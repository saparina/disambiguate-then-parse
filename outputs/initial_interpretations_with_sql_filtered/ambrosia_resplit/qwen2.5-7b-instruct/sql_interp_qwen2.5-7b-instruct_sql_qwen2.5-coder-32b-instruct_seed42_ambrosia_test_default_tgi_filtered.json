{
  "results": [
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_indoor-outdoor_space/attachment_1tab_val_indoor-outdoor_space.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenityName TEXT,\n    available BOOL DEFAULT FALSE\n);\nCREATE TABLE Booking(\n    bookingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    roomId INTEGER REFERENCES Room(id),\n    customerId INTEGER REFERENCES Customer(customerID),\n    startDate DATE,\n    endDate DATE,\n    totalPrice DECIMAL(10,2)\n);\nCREATE TABLE Customer(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10)\n);\nCREATE TABLE Room(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Indoor_Outdoor_Space TEXT,\n    Size INT,\n    Price DECIMAL(10,2)\n);\n\nINSERT INTO \"Amenities\" (id,amenityName,available) VALUES (1,'WiFi',1),(2,'Parking Space',1),(3,'Air Conditioner',1),(4,'Projector',0);\nINSERT INTO \"Booking\" (bookingID,roomId,customerId,startDate,endDate,totalPrice) VALUES (1,1,1,'2022-01-10','2022-01-12',2000),(2,2,2,'2022-01-15','2022-01-17',3000),(3,3,3,'2022-01-20','2022-01-22',4000),(4,4,4,'2022-01-25','2022-01-27',5000);\nINSERT INTO \"Customer\" (customerID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+123456789'),(2,'Jane','Smith','jane@example.com','+234567890'),(3,'Michael','Johnson','michael@example.com','+345678901'),(4,'Emily','Williams','emily@example.com','+45678902');\nINSERT INTO \"Room\" (id,Name,Indoor_Outdoor_Space,Size,Price) VALUES (1,'Conference Hall','Lobby',500,678.99),(2,'Banquet Hall','Lobby',600,830.99),(3,'Rooftop Terrace','Terrace',500,1000.99),(4,'Garden Patio','Terrace',400,870.99);\n",
      "question": "List all lobbies or terraces that can accomodate 500 people. Show them in one table.",
      "gold_queries": [
        "SELECT Room.Name \r\nFROM Room\r\nWHERE (Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\") AND Room.Size = 500",
        "SELECT Room.Name \r\nFROM Room\r\nWHERE Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\" AND Room.Size = 500"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all terraces that can accommodate 500 people.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Terrace' AND Size >= 500"
          ]
        },
        {
          "interpretation": "List all indoor and outdoor spaces that can accommodate 500 people.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Indoor_Outdoor_Space FROM Room WHERE Size >= 500"
          ]
        },
        {
          "interpretation": "List all lobbies or terraces with a Size greater than or equal to 500.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size >= 500"
          ]
        },
        {
          "interpretation": "List all lobbies that can accommodate 500 people.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Lobby' AND Size = 500"
          ]
        },
        {
          "interpretation": "List all lobbies or terraces that are not terraces but can accommodate 500 people.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Lobby' AND Size >= 500"
          ]
        },
        {
          "interpretation": "List all lobbies or terraces that are exactly 500 Size.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size = 500"
          ]
        },
        {
          "interpretation": "List all indoor spaces that can accommodate 500 people.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Indoor' AND Size >= 500"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2857142857142857,
        "f1_score": 0.4444444444444445,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_indoor-outdoor_space/attachment_1tab_val_indoor-outdoor_space.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenityName TEXT,\n    available BOOL DEFAULT FALSE\n);\nCREATE TABLE Booking(\n    bookingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    roomId INTEGER REFERENCES Room(id),\n    customerId INTEGER REFERENCES Customer(customerID),\n    startDate DATE,\n    endDate DATE,\n    totalPrice DECIMAL(10,2)\n);\nCREATE TABLE Customer(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10)\n);\nCREATE TABLE Room(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Indoor_Outdoor_Space TEXT,\n    Size INT,\n    Price DECIMAL(10,2)\n);\n\nINSERT INTO \"Amenities\" (id,amenityName,available) VALUES (1,'WiFi',1),(2,'Parking Space',1),(3,'Air Conditioner',1),(4,'Projector',0);\nINSERT INTO \"Booking\" (bookingID,roomId,customerId,startDate,endDate,totalPrice) VALUES (1,1,1,'2022-01-10','2022-01-12',2000),(2,2,2,'2022-01-15','2022-01-17',3000),(3,3,3,'2022-01-20','2022-01-22',4000),(4,4,4,'2022-01-25','2022-01-27',5000);\nINSERT INTO \"Customer\" (customerID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+123456789'),(2,'Jane','Smith','jane@example.com','+234567890'),(3,'Michael','Johnson','michael@example.com','+345678901'),(4,'Emily','Williams','emily@example.com','+45678902');\nINSERT INTO \"Room\" (id,Name,Indoor_Outdoor_Space,Size,Price) VALUES (1,'Conference Hall','Lobby',500,678.99),(2,'Banquet Hall','Lobby',600,830.99),(3,'Rooftop Terrace','Terrace',500,1000.99),(4,'Garden Patio','Terrace',400,870.99);\n",
      "question": "Show all lobbies and also show all terraces that can accommodate 500 people. Show them in one table.",
      "gold_queries": [
        "SELECT Room.Name \r\nFROM Room\r\nWHERE Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\" AND Room.Size = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all lobbies and also show all terraces with a Size of 500 that can accommodate 500 guests. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size \nFROM Room \nWHERE Indoor_Outdoor_Space = 'Lobby' OR (Indoor_Outdoor_Space = 'Terrace' AND Size = 500)"
          ]
        },
        {
          "interpretation": "Show all lobbies and also show all terraces with a Size of 500 that can seat a minimum of 500 people. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size, Price FROM Room WHERE Indoor_Outdoor_Space = 'Lobby' OR (Indoor_Outdoor_Space = 'Terrace' AND Size = 500)"
          ]
        },
        {
          "interpretation": "Show all lobbies and also show all terraces with a Size of 500 that can accommodate 500 people. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size = 500"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_indoor-outdoor_space/attachment_1tab_val_indoor-outdoor_space.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenityName TEXT,\n    available BOOL DEFAULT FALSE\n);\nCREATE TABLE Booking(\n    bookingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    roomId INTEGER REFERENCES Room(id),\n    customerId INTEGER REFERENCES Customer(customerID),\n    startDate DATE,\n    endDate DATE,\n    totalPrice DECIMAL(10,2)\n);\nCREATE TABLE Customer(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10)\n);\nCREATE TABLE Room(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Indoor_Outdoor_Space TEXT,\n    Size INT,\n    Price DECIMAL(10,2)\n);\n\nINSERT INTO \"Amenities\" (id,amenityName,available) VALUES (1,'WiFi',1),(2,'Parking Space',1),(3,'Air Conditioner',1),(4,'Projector',0);\nINSERT INTO \"Booking\" (bookingID,roomId,customerId,startDate,endDate,totalPrice) VALUES (1,1,1,'2022-01-10','2022-01-12',2000),(2,2,2,'2022-01-15','2022-01-17',3000),(3,3,3,'2022-01-20','2022-01-22',4000),(4,4,4,'2022-01-25','2022-01-27',5000);\nINSERT INTO \"Customer\" (customerID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+123456789'),(2,'Jane','Smith','jane@example.com','+234567890'),(3,'Michael','Johnson','michael@example.com','+345678901'),(4,'Emily','Williams','emily@example.com','+45678902');\nINSERT INTO \"Room\" (id,Name,Indoor_Outdoor_Space,Size,Price) VALUES (1,'Conference Hall','Lobby',500,678.99),(2,'Banquet Hall','Lobby',600,830.99),(3,'Rooftop Terrace','Terrace',500,1000.99),(4,'Garden Patio','Terrace',400,870.99);\n",
      "question": "List all lobbies that can accommodate 500 people and terraces of the same size. Show them in one table.",
      "gold_queries": [
        "SELECT Room.Name \r\nFROM Room\r\nWHERE (Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\") AND Room.Size = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all rooms that are either 500 size lobbies or 500 size terraces in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size, Price FROM Room WHERE (Size = 500 AND Indoor_Outdoor_Space = 'Lobby') OR (Size = 500 AND Indoor_Outdoor_Space = 'Terrace')"
          ]
        },
        {
          "interpretation": "List all lobbies with capacity of 500 and terraces with the same size in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size FROM Room WHERE (Indoor_Outdoor_Space = 'Lobby' AND Size = 500) OR (Indoor_Outdoor_Space = 'Terrace' AND Size = 500)"
          ]
        },
        {
          "interpretation": "List all rooms that are either indoor spaces of 500 size or outdoor spaces of 500 size in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE (Indoor_Outdoor_Space = 'Indoor' AND Size = 500) OR (Indoor_Outdoor_Space = 'Outdoor' AND Size = 500)"
          ]
        },
        {
          "interpretation": "List all rooms that are either indoor spaces labeled as \"Lobby\" or outdoor spaces labeled as \"Terrace\" with a size of 500 in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE (Indoor_Outdoor_Space = 'Lobby') OR (Indoor_Outdoor_Space = 'Terrace' AND Size = 500)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_hospitality_staff/attachment_1tab_ref_hospitality_staff.sqlite",
      "db_dump": "CREATE TABLE Bookings (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    GuestName TEXT,\n    CheckInDate DATE,\n    CheckOutDate DATE,\n    RoomID INTEGER,\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\nCREATE TABLE Languages (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Language TEXT UNIQUE);\nCREATE TABLE Rooms (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoomNumber INTEGER);\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Position TEXT,\n    LanguageID INTEGER,\n    FOREIGN KEY(LanguageID) REFERENCES Languages(ID));\nCREATE TABLE StaffRooms (\n    StaffID INTEGER,\n    RoomID INTEGER,\n    WorkDays TEXT,\n    PRIMARY KEY(StaffID, RoomID),\n    FOREIGN KEY(StaffID) REFERENCES Staff(ID),\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\n\nINSERT INTO \"Bookings\" (ID,GuestName,CheckInDate,CheckOutDate,RoomID) VALUES (1,'Alice Cooper','2023-06-01','2023-06-07',101),(2,'Bob Marley','2023-06-08','2023-06-14',102),(3,'Carol King','2023-06-15','2023-06-21',103),(4,'Daniel Ricciardo','2023-06-22','2023-06-29',104),(5,'Eva Mendes','2023-06-30','2023-07-07',105);\nINSERT INTO \"Languages\" (ID,Language) VALUES (1,'Spanish'),(2,'French'),(3,'German'),(4,'Italian'),(5,'Japanese');\nINSERT INTO \"Rooms\" (ID,RoomNumber) VALUES (1,101),(2,102),(3,103),(4,104),(5,105);\nINSERT INTO \"Staff\" (ID,Name,Position,LanguageID) VALUES (1,'John Doe','Chef',1),(2,'Mike Smith','Chef',3),(3,'Emily Johnson','Server',1),(4,'David Brown','Server',4),(5,'Anna Davis','Manager',2),(6,'Peter Miller','Bartender',5);\nINSERT INTO \"StaffRooms\" (StaffID,RoomID,WorkDays) VALUES (5,101,'Monday,Wednesday'),(6,102,'Tuesday,Thursday');\n",
      "question": "Provide a list of all chefs and also provide a list of all Spanish-speaking servers. Show them in one table.",
      "gold_queries": [
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE Staff.Position = \"Chef\" OR Staff.Position = \"Server\" AND Languages.Language = \"Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a table with two rows, where the first row lists all chefs and the second row lists all Spanish-speaking servers.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Staff WHERE Position = 'Chef'\nUNION ALL\nSELECT Name FROM Staff WHERE Position = 'Server' AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')"
          ]
        },
        {
          "interpretation": "Separate the output into two tables: one for chefs and one for Spanish-speaking servers, and then present both tables side by side.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position FROM Staff WHERE Position = 'Chef' UNION ALL SELECT Name, Position FROM Staff WHERE Position = 'Server' AND LanguageID = 1"
          ]
        },
        {
          "interpretation": "Provide a list of all chefs and a separate list of all Spanish-speaking servers in two distinct tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position FROM Staff WHERE Position = 'Server' AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')",
            "SELECT Name, Position FROM Staff WHERE Position = 'Chef'"
          ]
        },
        {
          "interpretation": "Provide a list of all chefs and a separate list of all Spanish-speaking servers in two distinct tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position FROM Staff WHERE Position = 'Server' AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')",
            "SELECT Name, Position FROM Staff WHERE Position = 'Chef'"
          ]
        },
        {
          "interpretation": "Provide a single table with two columns, where the first column lists all chefs and the second column lists all Spanish-speaking servers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Chef.Name AS Chefs, Server.Name AS SpanishSpeakingServers\nFROM Staff Chef\nLEFT JOIN Staff Server ON Chef.LanguageID = Server.LanguageID\nWHERE Chef.Position = 'Chef' AND Server.Position = 'Server' AND Server.LanguageID = 1"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 7,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_hospitality_staff/attachment_1tab_ref_hospitality_staff.sqlite",
      "db_dump": "CREATE TABLE Bookings (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    GuestName TEXT,\n    CheckInDate DATE,\n    CheckOutDate DATE,\n    RoomID INTEGER,\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\nCREATE TABLE Languages (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Language TEXT UNIQUE);\nCREATE TABLE Rooms (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoomNumber INTEGER);\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Position TEXT,\n    LanguageID INTEGER,\n    FOREIGN KEY(LanguageID) REFERENCES Languages(ID));\nCREATE TABLE StaffRooms (\n    StaffID INTEGER,\n    RoomID INTEGER,\n    WorkDays TEXT,\n    PRIMARY KEY(StaffID, RoomID),\n    FOREIGN KEY(StaffID) REFERENCES Staff(ID),\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\n\nINSERT INTO \"Bookings\" (ID,GuestName,CheckInDate,CheckOutDate,RoomID) VALUES (1,'Alice Cooper','2023-06-01','2023-06-07',101),(2,'Bob Marley','2023-06-08','2023-06-14',102),(3,'Carol King','2023-06-15','2023-06-21',103),(4,'Daniel Ricciardo','2023-06-22','2023-06-29',104),(5,'Eva Mendes','2023-06-30','2023-07-07',105);\nINSERT INTO \"Languages\" (ID,Language) VALUES (1,'Spanish'),(2,'French'),(3,'German'),(4,'Italian'),(5,'Japanese');\nINSERT INTO \"Rooms\" (ID,RoomNumber) VALUES (1,101),(2,102),(3,103),(4,104),(5,105);\nINSERT INTO \"Staff\" (ID,Name,Position,LanguageID) VALUES (1,'John Doe','Chef',1),(2,'Mike Smith','Chef',3),(3,'Emily Johnson','Server',1),(4,'David Brown','Server',4),(5,'Anna Davis','Manager',2),(6,'Peter Miller','Bartender',5);\nINSERT INTO \"StaffRooms\" (StaffID,RoomID,WorkDays) VALUES (5,101,'Monday,Wednesday'),(6,102,'Tuesday,Thursday');\n",
      "question": "What chefs speak Spanish and what servers also speak it? Show them in one table.",
      "gold_queries": [
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE (Staff.Position = \"Chef\" OR Staff.Position = \"Server\") AND Languages.Language = \"Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What staff members speaking Spanish are both chefs and servers? Show them in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Staff WHERE LanguageID = 1 AND Position = 'Chef' UNION SELECT Name FROM Staff WHERE LanguageID = 1 AND Position = 'Server'"
          ]
        },
        {
          "interpretation": "What chefs and servers speak Spanish? List them separately in two tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Staff WHERE Position = 'Server' AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')",
            "SELECT Name FROM Staff WHERE Position = 'Chef' AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')"
          ]
        },
        {
          "interpretation": "What chefs and servers speak Spanish? List them separately in two tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Staff WHERE Position = 'Server' AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')",
            "SELECT Name FROM Staff WHERE Position = 'Chef' AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')"
          ]
        },
        {
          "interpretation": "What chefs and servers can speak Spanish? Display them combined in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position FROM Staff WHERE LanguageID = 1 AND (Position = 'Chef' OR Position = 'Server')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 6,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_hospitality_staff/attachment_1tab_ref_hospitality_staff.sqlite",
      "db_dump": "CREATE TABLE Bookings (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    GuestName TEXT,\n    CheckInDate DATE,\n    CheckOutDate DATE,\n    RoomID INTEGER,\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\nCREATE TABLE Languages (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Language TEXT UNIQUE);\nCREATE TABLE Rooms (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoomNumber INTEGER);\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Position TEXT,\n    LanguageID INTEGER,\n    FOREIGN KEY(LanguageID) REFERENCES Languages(ID));\nCREATE TABLE StaffRooms (\n    StaffID INTEGER,\n    RoomID INTEGER,\n    WorkDays TEXT,\n    PRIMARY KEY(StaffID, RoomID),\n    FOREIGN KEY(StaffID) REFERENCES Staff(ID),\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\n\nINSERT INTO \"Bookings\" (ID,GuestName,CheckInDate,CheckOutDate,RoomID) VALUES (1,'Alice Cooper','2023-06-01','2023-06-07',101),(2,'Bob Marley','2023-06-08','2023-06-14',102),(3,'Carol King','2023-06-15','2023-06-21',103),(4,'Daniel Ricciardo','2023-06-22','2023-06-29',104),(5,'Eva Mendes','2023-06-30','2023-07-07',105);\nINSERT INTO \"Languages\" (ID,Language) VALUES (1,'Spanish'),(2,'French'),(3,'German'),(4,'Italian'),(5,'Japanese');\nINSERT INTO \"Rooms\" (ID,RoomNumber) VALUES (1,101),(2,102),(3,103),(4,104),(5,105);\nINSERT INTO \"Staff\" (ID,Name,Position,LanguageID) VALUES (1,'John Doe','Chef',1),(2,'Mike Smith','Chef',3),(3,'Emily Johnson','Server',1),(4,'David Brown','Server',4),(5,'Anna Davis','Manager',2),(6,'Peter Miller','Bartender',5);\nINSERT INTO \"StaffRooms\" (StaffID,RoomID,WorkDays) VALUES (5,101,'Monday,Wednesday'),(6,102,'Tuesday,Thursday');\n",
      "question": "Show Spanish-speaking servers and chefs. Show them in one table.",
      "gold_queries": [
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE (Staff.Position = \"Chef\" OR Staff.Position = \"Server\") AND Languages.Language = \"Spanish\"",
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE Staff.Position = \"Chef\" OR Staff.Position = \"Server\" AND Languages.Language = \"Spanish\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a combined table of Spanish-speaking Staff with the roles of Chef and Server.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.Name, S.Position \nFROM Staff S \nJOIN Languages L ON S.LanguageID = L.ID \nWHERE L.Language = 'Spanish' AND S.Position IN ('Chef', 'Server')"
          ]
        },
        {
          "interpretation": "Provide a table of Staff members who speak Spanish and are either Chefs or Servers.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Staff WHERE LanguageID = 1 AND Position IN ('Chef', 'Server')"
          ]
        },
        {
          "interpretation": "Show Staff members who speak Spanish and have the position of Chef in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position FROM Staff WHERE LanguageID = 1 AND Position = 'Chef'"
          ]
        },
        {
          "interpretation": "Show Staff members who speak Spanish and have the position of Server in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Name FROM Staff AS T1 JOIN Languages AS T2 ON T1.LanguageID = T2.ID WHERE T2.Language = 'Spanish' AND T1.Position = 'Server'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_relaxation_getaway/attachment_2tab_val_relaxation_getaway.sqlite",
      "db_dump": "CREATE TABLE Day_Spa(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Services TEXT,\n    Price INTEGER\n);\nCREATE TABLE Guest(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE Hotel(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Rooms TEXT,\n    Amenities TEXT\n);\nCREATE TABLE Restaurant(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Cuisine TEXT,\n    Menu TEXT\n);\nCREATE TABLE Spa_Therapist(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    Experience INT\n);\nCREATE TABLE Wellness_Retreat(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Activities TEXT,\n    Price INTEGER\n);\n\nINSERT INTO \"Day_Spa\" (id,Name,Location,Services,Price) VALUES (1,'Oasis Day Spa','New York','Massage, Facial, Manicure',150),(2,'Serenity Day Spa','Los Angeles','Aromatherapy, Yoga',300),(3,'Escape Day Spa','Chicago','Hot Stone Massage, Acupuncture',250),(4,'Zen Day Spa','Miami','Reflexology, Herbal Wraps',200),(5,'Paradise Day Spa','Dallas','Infrared Sauna, Meditation',180);\nINSERT INTO \"Guest\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'Anna','White','anna@example.com','123-456-7890'),(2,'Ben','Black','ben@example.com','234-567-8901'),(3,'Cathy','Green','cathy@example.com','345-678-9012'),(4,'Daniel','Blue','daniel@example.com','456-789-0123'),(5,'Elizabeth','Red','elizabeth@example.com','567-890-1234');\nINSERT INTO \"Hotel\" (id,Name,Location,Rooms,Amenities) VALUES (1,'Grand Plaza Hotel','New York','300 rooms','Gym, Pool, Restaurant'),(2,'Riverview Inn','California','200 rooms','Spa, Bar, Parking'),(3,'City Center Suites','Illinois','250 rooms','Business center, Concierge service, Laundry'),(4,'Coastal Breeze Resort','Texas','275 rooms','Kids club, Tennis courts, Beach access'),(5,'Urban Loft Hotel','Georgia','225 rooms','Free WiFi, Lounge area, Room service');\nINSERT INTO \"Restaurant\" (id,Name,Location,Cuisine,Menu) VALUES (1,'The Gourmet Table','New York','French','Steak frites, Coq au vin, Cr\u00e8me br\u00fbl\u00e9e'),(2,'Asian Delights','California','Japanese','Sushi rolls, Tempura, Soba noodles'),(3,'Italiano Ristorante','Illinois','Italian','Pasta, Risotto, Tiramisu'),(4,'Baja Grill','Texas','Mexican','Enchiladas, Fajitas, Churros'),(5,'Curry House','Georgia','Indian','Butter chicken, Biryani, Samosas');\nINSERT INTO \"Spa_Therapist\" (id,FirstName,LastName,Specialty,Experience) VALUES (1,'Alice','Smith','Massage',10),(2,'Bob','Johnson','Yoga',8),(3,'Carol','Williams','Acupuncture',6),(4,'David','Brown','Herbal Wraps',12),(5,'Emily','Jones','Facials',7);\nINSERT INTO \"Wellness_Retreat\" (id,Name,Location,Activities,Price) VALUES (1,'Mountain Retreat','Colorado','Hiking, Birdwatching',150),(2,'Beachside Retreat','Florida','Surfing, Paddleboarding',300),(3,'Forest Retreat','Washington','Camping, Fishing',250),(4,'Desert Oasis','Nevada','Stargazing, Offroading',200),(5,'Lakeside Escape','Minnesota','Boating, Swimming',180);\n",
      "question": "Show me $150 wellness programs and $150 day spas. Show them in one table.",
      "gold_queries": [
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nWHERE Day_Spa.Price = 150\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show me wellness retreats and day spas that cost $150 each.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Wellness_Retreat WHERE Price = 150 UNION SELECT Name FROM Day_Spa WHERE Price = 150"
          ]
        },
        {
          "interpretation": "List day spas and wellness retreats costing $150 in a single table, comparing them directly.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name AS FacilityName, 'Day Spa' AS Type, Price FROM Day_Spa WHERE Price = 150\nUNION\nSELECT Name AS FacilityName, 'Wellness Retreat' AS Type, Price FROM Wellness_Retreat WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Show me day spas and wellness retreats priced at $150, combining them in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Services AS Description, Price FROM Day_Spa WHERE Price = 150\nUNION\nSELECT Name, Location, Activities AS Description, Price FROM Wellness_Retreat WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Show day spas and wellness programs priced at $150 combined in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Services, Price FROM Day_Spa WHERE Price = 150\nUNION\nSELECT Name, Activities, Price FROM Wellness_Retreat WHERE Price = 150"
          ]
        },
        {
          "interpretation": "List wellness programs and day spas priced at $150 in a unified table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, 'Wellness_Retreat' as Type FROM Wellness_Retreat WHERE Price = 150\nUNION\nSELECT Name, Location, 'Day_Spa' as Type FROM Day_Spa WHERE Price = 150"
          ]
        },
        {
          "interpretation": "List $150 wellness programs and $150 day spas side by side in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Wellness_Retreat' AS Source, Name, Location, Activities, Price \nFROM Wellness_Retreat \nWHERE Price = 150\nUNION\nSELECT 'Day_Spa' AS Source, Name, Location, Services AS Activities, Price \nFROM Day_Spa \nWHERE Price = 150"
          ]
        },
        {
          "interpretation": "Display $150 day spa services alongside $150 wellness retreat activities in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name AS SpaName, Services AS SpaServices, Price AS SpaPrice, NULL AS RetreatName, NULL AS RetreatActivities, NULL AS RetreatPrice\nFROM Day_Spa\nWHERE Price = 150\nUNION\nSELECT NULL AS SpaName, NULL AS SpaServices, NULL AS SpaPrice, Name AS RetreatName, Activities AS RetreatActivities, Price AS RetreatPrice\nFROM Wellness_Retreat\nWHERE Price = 150"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_relaxation_getaway/attachment_2tab_val_relaxation_getaway.sqlite",
      "db_dump": "CREATE TABLE Day_Spa(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Services TEXT,\n    Price INTEGER\n);\nCREATE TABLE Guest(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE Hotel(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Rooms TEXT,\n    Amenities TEXT\n);\nCREATE TABLE Restaurant(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Cuisine TEXT,\n    Menu TEXT\n);\nCREATE TABLE Spa_Therapist(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    Experience INT\n);\nCREATE TABLE Wellness_Retreat(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Activities TEXT,\n    Price INTEGER\n);\n\nINSERT INTO \"Day_Spa\" (id,Name,Location,Services,Price) VALUES (1,'Oasis Day Spa','New York','Massage, Facial, Manicure',150),(2,'Serenity Day Spa','Los Angeles','Aromatherapy, Yoga',300),(3,'Escape Day Spa','Chicago','Hot Stone Massage, Acupuncture',250),(4,'Zen Day Spa','Miami','Reflexology, Herbal Wraps',200),(5,'Paradise Day Spa','Dallas','Infrared Sauna, Meditation',180);\nINSERT INTO \"Guest\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'Anna','White','anna@example.com','123-456-7890'),(2,'Ben','Black','ben@example.com','234-567-8901'),(3,'Cathy','Green','cathy@example.com','345-678-9012'),(4,'Daniel','Blue','daniel@example.com','456-789-0123'),(5,'Elizabeth','Red','elizabeth@example.com','567-890-1234');\nINSERT INTO \"Hotel\" (id,Name,Location,Rooms,Amenities) VALUES (1,'Grand Plaza Hotel','New York','300 rooms','Gym, Pool, Restaurant'),(2,'Riverview Inn','California','200 rooms','Spa, Bar, Parking'),(3,'City Center Suites','Illinois','250 rooms','Business center, Concierge service, Laundry'),(4,'Coastal Breeze Resort','Texas','275 rooms','Kids club, Tennis courts, Beach access'),(5,'Urban Loft Hotel','Georgia','225 rooms','Free WiFi, Lounge area, Room service');\nINSERT INTO \"Restaurant\" (id,Name,Location,Cuisine,Menu) VALUES (1,'The Gourmet Table','New York','French','Steak frites, Coq au vin, Cr\u00e8me br\u00fbl\u00e9e'),(2,'Asian Delights','California','Japanese','Sushi rolls, Tempura, Soba noodles'),(3,'Italiano Ristorante','Illinois','Italian','Pasta, Risotto, Tiramisu'),(4,'Baja Grill','Texas','Mexican','Enchiladas, Fajitas, Churros'),(5,'Curry House','Georgia','Indian','Butter chicken, Biryani, Samosas');\nINSERT INTO \"Spa_Therapist\" (id,FirstName,LastName,Specialty,Experience) VALUES (1,'Alice','Smith','Massage',10),(2,'Bob','Johnson','Yoga',8),(3,'Carol','Williams','Acupuncture',6),(4,'David','Brown','Herbal Wraps',12),(5,'Emily','Jones','Facials',7);\nINSERT INTO \"Wellness_Retreat\" (id,Name,Location,Activities,Price) VALUES (1,'Mountain Retreat','Colorado','Hiking, Birdwatching',150),(2,'Beachside Retreat','Florida','Surfing, Paddleboarding',300),(3,'Forest Retreat','Washington','Camping, Fishing',250),(4,'Desert Oasis','Nevada','Stargazing, Offroading',200),(5,'Lakeside Escape','Minnesota','Boating, Swimming',180);\n",
      "question": "Show $150 wellness programs and day spas. Show them in one table.",
      "gold_queries": [
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nWHERE Day_Spa.Price = 150\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150",
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show the joined data of day spas and wellness retreats that have a price of $150 in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Day_Spa.Name, Day_Spa.Location, Day_Spa.Services, Day_Spa.Price, Wellness_Retreat.Name, Wellness_Retreat.Location, Wellness_Retreat.Activities, Wellness_Retreat.Price\nFROM Day_Spa\nJOIN Wellness_Retreat ON Day_Spa.Price = Wellness_Retreat.Price\nWHERE Day_Spa.Price = 150"
          ]
        },
        {
          "interpretation": "Display day spas and wellness retreats where the cost is $150 in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price FROM Day_Spa WHERE Price = 150\nUNION\nSELECT Name, Location, Price FROM Wellness_Retreat WHERE Price = 150"
          ]
        },
        {
          "interpretation": "List all day spas and wellness programs that have a price of $150 in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Price FROM Day_Spa WHERE Price = 150\nUNION\nSELECT Name, Price FROM Wellness_Retreat WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Show all entries from the day spa and wellness retreat tables where the price is $150 in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Day_Spa WHERE Price = 150\nUNION\nSELECT * FROM Wellness_Retreat WHERE Price = 150"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_relaxation_getaway/attachment_2tab_val_relaxation_getaway.sqlite",
      "db_dump": "CREATE TABLE Day_Spa(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Services TEXT,\n    Price INTEGER\n);\nCREATE TABLE Guest(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE Hotel(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Rooms TEXT,\n    Amenities TEXT\n);\nCREATE TABLE Restaurant(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Cuisine TEXT,\n    Menu TEXT\n);\nCREATE TABLE Spa_Therapist(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    Experience INT\n);\nCREATE TABLE Wellness_Retreat(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Activities TEXT,\n    Price INTEGER\n);\n\nINSERT INTO \"Day_Spa\" (id,Name,Location,Services,Price) VALUES (1,'Oasis Day Spa','New York','Massage, Facial, Manicure',150),(2,'Serenity Day Spa','Los Angeles','Aromatherapy, Yoga',300),(3,'Escape Day Spa','Chicago','Hot Stone Massage, Acupuncture',250),(4,'Zen Day Spa','Miami','Reflexology, Herbal Wraps',200),(5,'Paradise Day Spa','Dallas','Infrared Sauna, Meditation',180);\nINSERT INTO \"Guest\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'Anna','White','anna@example.com','123-456-7890'),(2,'Ben','Black','ben@example.com','234-567-8901'),(3,'Cathy','Green','cathy@example.com','345-678-9012'),(4,'Daniel','Blue','daniel@example.com','456-789-0123'),(5,'Elizabeth','Red','elizabeth@example.com','567-890-1234');\nINSERT INTO \"Hotel\" (id,Name,Location,Rooms,Amenities) VALUES (1,'Grand Plaza Hotel','New York','300 rooms','Gym, Pool, Restaurant'),(2,'Riverview Inn','California','200 rooms','Spa, Bar, Parking'),(3,'City Center Suites','Illinois','250 rooms','Business center, Concierge service, Laundry'),(4,'Coastal Breeze Resort','Texas','275 rooms','Kids club, Tennis courts, Beach access'),(5,'Urban Loft Hotel','Georgia','225 rooms','Free WiFi, Lounge area, Room service');\nINSERT INTO \"Restaurant\" (id,Name,Location,Cuisine,Menu) VALUES (1,'The Gourmet Table','New York','French','Steak frites, Coq au vin, Cr\u00e8me br\u00fbl\u00e9e'),(2,'Asian Delights','California','Japanese','Sushi rolls, Tempura, Soba noodles'),(3,'Italiano Ristorante','Illinois','Italian','Pasta, Risotto, Tiramisu'),(4,'Baja Grill','Texas','Mexican','Enchiladas, Fajitas, Churros'),(5,'Curry House','Georgia','Indian','Butter chicken, Biryani, Samosas');\nINSERT INTO \"Spa_Therapist\" (id,FirstName,LastName,Specialty,Experience) VALUES (1,'Alice','Smith','Massage',10),(2,'Bob','Johnson','Yoga',8),(3,'Carol','Williams','Acupuncture',6),(4,'David','Brown','Herbal Wraps',12),(5,'Emily','Jones','Facials',7);\nINSERT INTO \"Wellness_Retreat\" (id,Name,Location,Activities,Price) VALUES (1,'Mountain Retreat','Colorado','Hiking, Birdwatching',150),(2,'Beachside Retreat','Florida','Surfing, Paddleboarding',300),(3,'Forest Retreat','Washington','Camping, Fishing',250),(4,'Desert Oasis','Nevada','Stargazing, Offroading',200),(5,'Lakeside Escape','Minnesota','Boating, Swimming',180);\n",
      "question": "Show all day spas and $150 wellness programs. Show them in one table.",
      "gold_queries": [
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_vacation_option/attachment_2tab_val_vacation_option.sqlite",
      "db_dump": "CREATE TABLE All_Inclusive_Resort (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    star_rating INTEGER,\n    number_of_rooms INTEGER,\n    activities TEXT);\nCREATE TABLE Booking(\n    bookingId INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerId INTEGER,\n    cruiseOrResort BOOLEAN,\n    checkinDate DATE,\n    checkoutDate DATE,\n    FOREIGN KEY(customerId) REFERENCES Customer(id));\nCREATE TABLE Cruise_Ship (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    capacity INTEGER,\n    destination TEXT,\n    cruise_start_date DATE,\n    cruise_end_date DATE,\n    activities TEXT);\nCREATE TABLE Customer(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    preferredLanguage TEXT);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    position TEXT,\n    yearsOfExperience INTEGER,\n    skill TEXT);\n\nINSERT INTO \"All_Inclusive_Resort\" (id,name,location,star_rating,number_of_rooms,activities) VALUES (1,'Paradise Beach','Hawaii',4,150,'Dance Class'),(2,'Sunset Oasis','Mexico',3,200,'Yoga Session');\nINSERT INTO \"Booking\" (bookingId,customerId,cruiseOrResort,checkinDate,checkoutDate) VALUES (1,1,1,'2023-06-01','2023-06-07'),(2,2,0,'2023-06-10','2023-06-20');\nINSERT INTO \"Cruise_Ship\" (id,name,capacity,destination,cruise_start_date,cruise_end_date,activities) VALUES (1,'Majestic Ocean',3000,'Caribbean','2023-06-01','2023-06-07','Dance Class'),(2,'Grand Voyage',2500,'Alaska','2023-05-15','2023-05-28','Bingo Night');\nINSERT INTO \"Customer\" (id,firstName,lastName,email,phoneNumber,preferredLanguage) VALUES (1,'John','Smith','johnsmith@example.com','+1234567890','English'),(2,'Jane','Doe','janedoe@example.com','+9876543210','French');\nINSERT INTO \"Employee\" (id,firstName,lastName,position,yearsOfExperience,skill) VALUES (1,'Tom','Anderson','Receptionist',5,'Customer Service'),(2,'Laura','Williams','Chef',8,'Cooking');\n",
      "question": "Display all the cruise ships but only the resorts that offer a dance class. Show them in one table.",
      "gold_queries": [
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a single table showing all cruise ships and the corresponding resorts that offer dance classes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Cruise_Ship WHERE activities = 'Dance Class'\nUNION\nSELECT name FROM All_Inclusive_Resort WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Show a consolidated table with cruise ships and the All-Inclusive Resorts that offer dance classes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name AS establishment_name, 'Cruise Ship' AS type, activities FROM Cruise_Ship WHERE activities = 'Dance Class'\nUNION\nSELECT name AS establishment_name, 'All-Inclusive Resort' AS type, activities FROM All_Inclusive_Resort WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Use a single table to show the details of all cruise ships and the All-Inclusive Resorts that offer a dance class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms, activities\nFROM All_Inclusive_Resort\nWHERE activities = 'Dance Class'\nUNION\nSELECT name, capacity, destination, cruise_start_date, activities\nFROM Cruise_Ship\nWHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Combine the information of all cruise ships with the names of the All-Inclusive Resorts that offer dance classes in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CS.id AS CruiseShipId, CS.name AS CruiseShipName, AR.id AS ResortId, AR.name AS ResortName\nFROM Cruise_Ship CS\nCROSS JOIN All_Inclusive_Resort AR\nWHERE AR.activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "In one table, list all cruise ships and the All-Inclusive Resorts that offer dance classes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, destination, activities FROM Cruise_Ship WHERE activities LIKE '%Dance Class%' UNION SELECT name, location AS destination, activities FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Combine the cruise ship data with the All-Inclusive Resorts that offer a dance class into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms, activities \nFROM All_Inclusive_Resort \nWHERE activities = 'Dance Class'\nUNION\nSELECT name, destination AS location, NULL AS star_rating, capacity AS number_of_rooms, activities \nFROM Cruise_Ship \nWHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Unified presentation of all cruise ships and the All-Inclusive Resorts that offer dance class activities in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name AS establishment_name, location AS establishment_location, 'Resort' AS establishment_type, activities \nFROM All_Inclusive_Resort \nWHERE activities = 'Dance Class'\nUNION\nSELECT name AS establishment_name, destination AS establishment_location, 'Cruise Ship' AS establishment_type, activities \nFROM Cruise_Ship \nWHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Combine the cruise ship details with the All-Inclusive Resorts that offer a dance class into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms, activities FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%' UNION SELECT name, destination, 'N/A', capacity, activities FROM Cruise_Ship WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Combine the cruise ship data and the All-Inclusive Resorts offering a dance class into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name, location, star_rating, number_of_rooms, activities FROM All_Inclusive_Resort WHERE activities = 'Dance Class'\nUNION\nSELECT id, name, destination AS location, NULL AS star_rating, capacity AS number_of_rooms, activities FROM Cruise_Ship WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Combined table showing all cruise ships and the All-Inclusive Resorts that offer dance class activities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms, activities \nFROM All_Inclusive_Resort \nWHERE activities = 'Dance Class'\nUNION\nSELECT name, capacity AS location, NULL AS star_rating, NULL AS number_of_rooms, activities \nFROM Cruise_Ship \nWHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Display the details of all cruise ships alongside the names of the resorts that offer a dance class in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms, activities FROM All_Inclusive_Resort WHERE activities = 'Dance Class'\nUNION\nSELECT name, capacity, destination, cruise_start_date, activities FROM Cruise_Ship"
          ]
        },
        {
          "interpretation": "Unite the cruise ship information with the All-Inclusive Resorts that offer a dance class in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CS.name AS cruise_ship_name, CS.capacity, CS.destination, CS.cruise_start_date, CS.cruise_end_date, CS.activities, AIR.name AS resort_name, AIR.location, AIR.star_rating, AIR.number_of_rooms, AIR.activities AS resort_activities\nFROM Cruise_Ship CS\nJOIN All_Inclusive_Resort AIR\nON CS.activities = AIR.activities\nWHERE AIR.activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Unified table showing the details of all cruise ships and the All-Inclusive Resorts that offer dance class activities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms FROM All_Inclusive_Resort WHERE activities = 'Dance Class'\nUNION\nSELECT name, capacity AS location, NULL AS star_rating, NULL AS number_of_rooms FROM Cruise_Ship WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Present a single table that combines the details of all cruise ships and the All-Inclusive Resorts that offer a dance class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms, activities, 'All-Inclusive Resort' AS type\nFROM All_Inclusive_Resort\nWHERE activities LIKE '%Dance Class%'\nUNION\nSELECT name, destination AS location, NULL AS star_rating, capacity AS number_of_rooms, activities, 'Cruise Ship' AS type\nFROM Cruise_Ship\nWHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Display a single table with all cruise ships and the All-Inclusive Resorts that offer dance classes, including any additional activities they provide.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms, activities \nFROM All_Inclusive_Resort \nWHERE activities LIKE '%Dance Class%' \nUNION \nSELECT name, destination, capacity, '-', activities \nFROM Cruise_Ship \nWHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Show a single table with all cruise ships and the All-Inclusive Resorts that offer a dance class activity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, destination, cruise_start_date, cruise_end_date FROM Cruise_Ship WHERE activities = 'Dance Class'\nUNION\nSELECT name, location AS destination, checkinDate AS cruise_start_date, checkoutDate AS cruise_end_date FROM Booking INNER JOIN All_Inclusive_Resort ON Booking.cruiseOrResort = 1 AND All_Inclusive_Resort.activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Unified display of all cruise ships and the All-Inclusive Resorts that offer a dance class in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Cruise Ship' AS type, name, capacity AS number_of_rooms, destination AS location, 'N/A' AS star_rating, activities\nFROM Cruise_Ship\nWHERE activities = 'Dance Class'\nUNION\nSELECT 'All-Inclusive Resort' AS type, name, number_of_rooms, location, star_rating, activities\nFROM All_Inclusive_Resort\nWHERE activities = 'Dance Class'"
          ]
        }
      ],
      "num_unique_execution_results": 17,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 17,
        "num_unique_queries": 17,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_vacation_option/attachment_2tab_val_vacation_option.sqlite",
      "db_dump": "CREATE TABLE All_Inclusive_Resort (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    star_rating INTEGER,\n    number_of_rooms INTEGER,\n    activities TEXT);\nCREATE TABLE Booking(\n    bookingId INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerId INTEGER,\n    cruiseOrResort BOOLEAN,\n    checkinDate DATE,\n    checkoutDate DATE,\n    FOREIGN KEY(customerId) REFERENCES Customer(id));\nCREATE TABLE Cruise_Ship (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    capacity INTEGER,\n    destination TEXT,\n    cruise_start_date DATE,\n    cruise_end_date DATE,\n    activities TEXT);\nCREATE TABLE Customer(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    preferredLanguage TEXT);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    position TEXT,\n    yearsOfExperience INTEGER,\n    skill TEXT);\n\nINSERT INTO \"All_Inclusive_Resort\" (id,name,location,star_rating,number_of_rooms,activities) VALUES (1,'Paradise Beach','Hawaii',4,150,'Dance Class'),(2,'Sunset Oasis','Mexico',3,200,'Yoga Session');\nINSERT INTO \"Booking\" (bookingId,customerId,cruiseOrResort,checkinDate,checkoutDate) VALUES (1,1,1,'2023-06-01','2023-06-07'),(2,2,0,'2023-06-10','2023-06-20');\nINSERT INTO \"Cruise_Ship\" (id,name,capacity,destination,cruise_start_date,cruise_end_date,activities) VALUES (1,'Majestic Ocean',3000,'Caribbean','2023-06-01','2023-06-07','Dance Class'),(2,'Grand Voyage',2500,'Alaska','2023-05-15','2023-05-28','Bingo Night');\nINSERT INTO \"Customer\" (id,firstName,lastName,email,phoneNumber,preferredLanguage) VALUES (1,'John','Smith','johnsmith@example.com','+1234567890','English'),(2,'Jane','Doe','janedoe@example.com','+9876543210','French');\nINSERT INTO \"Employee\" (id,firstName,lastName,position,yearsOfExperience,skill) VALUES (1,'Tom','Anderson','Receptionist',5,'Customer Service'),(2,'Laura','Williams','Chef',8,'Cooking');\n",
      "question": "Show cruise ships and resorts that offer a dance class. Show them in one table.",
      "gold_queries": [
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nWHERE Cruise_Ship.activities = \"Dance Class\"\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\"",
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all cruise ships and resorts side by side in a single table, indicating if each offers a dance class, with cruise ships first and then resorts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Cruise Ship' AS type, name, CASE WHEN activities LIKE '%Dance Class%' THEN 'Yes' ELSE 'No' END AS offers_dance_class\nFROM Cruise_Ship\nUNION ALL\nSELECT 'Resort' AS type, name, CASE WHEN activities LIKE '%Dance Class%' THEN 'Yes' ELSE 'No' END AS offers_dance_class\nFROM All_Inclusive_Resort"
          ]
        },
        {
          "interpretation": "Show a combined list of cruise ships and resorts that offer a dance class, without distinguishing between the two.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM All_Inclusive_Resort WHERE activities = 'Dance Class' UNION SELECT name FROM Cruise_Ship WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Display a merged list of all venues (both cruise ships and resorts) and highlight which ones offer a dance class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, 'Dance Class' AS activity, 'All_Inclusive_Resort' AS venue_type FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%' \nUNION \nSELECT name, 'Dance Class' AS activity, 'Cruise_Ship' AS venue_type FROM Cruise_Ship WHERE activities LIKE '%Dance Class%'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_vacation_option/attachment_2tab_val_vacation_option.sqlite",
      "db_dump": "CREATE TABLE All_Inclusive_Resort (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    star_rating INTEGER,\n    number_of_rooms INTEGER,\n    activities TEXT);\nCREATE TABLE Booking(\n    bookingId INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerId INTEGER,\n    cruiseOrResort BOOLEAN,\n    checkinDate DATE,\n    checkoutDate DATE,\n    FOREIGN KEY(customerId) REFERENCES Customer(id));\nCREATE TABLE Cruise_Ship (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    capacity INTEGER,\n    destination TEXT,\n    cruise_start_date DATE,\n    cruise_end_date DATE,\n    activities TEXT);\nCREATE TABLE Customer(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    preferredLanguage TEXT);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    position TEXT,\n    yearsOfExperience INTEGER,\n    skill TEXT);\n\nINSERT INTO \"All_Inclusive_Resort\" (id,name,location,star_rating,number_of_rooms,activities) VALUES (1,'Paradise Beach','Hawaii',4,150,'Dance Class'),(2,'Sunset Oasis','Mexico',3,200,'Yoga Session');\nINSERT INTO \"Booking\" (bookingId,customerId,cruiseOrResort,checkinDate,checkoutDate) VALUES (1,1,1,'2023-06-01','2023-06-07'),(2,2,0,'2023-06-10','2023-06-20');\nINSERT INTO \"Cruise_Ship\" (id,name,capacity,destination,cruise_start_date,cruise_end_date,activities) VALUES (1,'Majestic Ocean',3000,'Caribbean','2023-06-01','2023-06-07','Dance Class'),(2,'Grand Voyage',2500,'Alaska','2023-05-15','2023-05-28','Bingo Night');\nINSERT INTO \"Customer\" (id,firstName,lastName,email,phoneNumber,preferredLanguage) VALUES (1,'John','Smith','johnsmith@example.com','+1234567890','English'),(2,'Jane','Doe','janedoe@example.com','+9876543210','French');\nINSERT INTO \"Employee\" (id,firstName,lastName,position,yearsOfExperience,skill) VALUES (1,'Tom','Anderson','Receptionist',5,'Customer Service'),(2,'Laura','Williams','Chef',8,'Cooking');\n",
      "question": "Show any cruise ships and resorts where either offer a dance class. Show them in one table.",
      "gold_queries": [
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nWHERE Cruise_Ship.activities = \"Dance Class\"\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show cruise ships and resorts in one table where either offer a dance class or a yoga session.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name AS venue_name, 'All_Inclusive_Resort' AS venue_type, activities FROM All_Inclusive_Resort WHERE activities IN ('Dance Class', 'Yoga Session')\nUNION\nSELECT name AS venue_name, 'Cruise_Ship' AS venue_type, activities FROM Cruise_Ship WHERE activities IN ('Dance Class', 'Yoga Session')"
          ]
        },
        {
          "interpretation": "Show cruise ships and resorts in one table where both offer a dance class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name AS venue_name, 'All_Inclusive_Resort' AS venue_type FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%' UNION SELECT name AS venue_name, 'Cruise_Ship' AS venue_type FROM Cruise_Ship WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Show all resorts in one table that offer a dance class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms \nFROM All_Inclusive_Resort \nWHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Show a combined list of cruise ships and resorts in one table that include dance classes as an activity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, activities FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%' UNION SELECT name, destination, activities FROM Cruise_Ship WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Show all cruise ships in one table that offer a dance class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, capacity, destination, cruise_start_date, cruise_end_date FROM Cruise_Ship WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Show cruise ships and resorts in one table where either offer a yoga session.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, 'Resort' AS type FROM All_Inclusive_Resort WHERE activities = 'Yoga Session'\nUNION\nSELECT name, 'Cruise Ship' AS type FROM Cruise_Ship WHERE activities = 'Yoga Session'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_customer_facing_roles/attachment_1tab_ref_customer_facing_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Customer_Facing_Roles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    email TEXT,\n    phone TEXT,\n    customer_role_id INTEGER,\n    language_proficiency_id INTEGER, FullName TEXT,\n    FOREIGN KEY(customer_role_id) REFERENCES Customer_Facing_Roles(id),\n    FOREIGN KEY(language_proficiency_id) REFERENCES Language_Proficiencies(id)\n);\nCREATE TABLE Language_Proficiencies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT\n);\n\nINSERT INTO \"Companies\" (id,name) VALUES (1,'TechCorp'),(2,'Software Inc.'),(3,'Data Solutions Ltd.'),(4,'AI Developers'),(5,'Network Services Co.');\nINSERT INTO \"Customer_Facing_Roles\" (id,role) VALUES (1,'Customer Service Advisor'),(2,'IT Support Technician');\nINSERT INTO \"Employees\" (id,email,phone,customer_role_id,language_proficiency_id,FullName) VALUES (1,'mikeadams@email.com','+1112223333',1,1,'Mike Adams'),(2,'nancywalker@email.com','+2223334444',1,2,'Nancy Walker'),(3,'thanks@email.com','+3344556677',2,1,'Tom Hanks'),(4,'laurawilliams@email.com','+4455667788',2,2,'Laura Williams'),(5,'stevemartin@email.com','+5566778899',1,1,'Steve Martin');\nINSERT INTO \"Language_Proficiencies\" (id,language) VALUES (1,'Bilingual'),(2,'Multilingual');\n",
      "question": "Provide the customer service advisors and IT support technicians who are bilingual. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE (Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\") AND Language_Proficiencies.language = \"Bilingual\"",
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\" AND Language_Proficiencies.language = \"Bilingual\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide the details of the customer service advisors and IT support technicians who are bilingual, including their emails, phones, and the specific language proficiency marked as bilingual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.email, e.phone, l.language\nFROM Employees e\nJOIN Customer_Facing_Roles c ON e.customer_role_id = c.id\nJOIN Language_Proficiencies l ON e.language_proficiency_id = l.id\nWHERE c.role IN ('Customer Service Advisor', 'IT Support Technician') AND l.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Provide the complete information of employees who hold the roles of customer service advisor and IT support technician and are proficient in a bilingual capacity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employees WHERE customer_role_id IN (1, 2) AND language_proficiency_id = 1"
          ]
        },
        {
          "interpretation": "Show the customer service advisors and IT support technicians who can speak two languages, listing their full names, email addresses, and phone numbers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.email, E.phone \nFROM Employees E \nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id \nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id \nWHERE CFR.role IN ('Customer Service Advisor', 'IT Support Technician') AND LP.language = 'Multilingual'"
          ]
        },
        {
          "interpretation": "Provide the names, emails, and phones of the customer service advisors and IT support technicians who are bilingual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.email, E.phone \nFROM Employees E \nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id \nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id \nWHERE CFR.role IN ('Customer Service Advisor', 'IT Support Technician') \nAND LP.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Provide the customer service advisors and IT support technicians who are bilingual, listing their full names and the languages they are proficient in.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, LP.language\nFROM Employees E\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id\nWHERE LP.language = 'Bilingual' AND CFR.role IN ('Customer Service Advisor', 'IT Support Technician')"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_customer_facing_roles/attachment_1tab_ref_customer_facing_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Customer_Facing_Roles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    email TEXT,\n    phone TEXT,\n    customer_role_id INTEGER,\n    language_proficiency_id INTEGER, FullName TEXT,\n    FOREIGN KEY(customer_role_id) REFERENCES Customer_Facing_Roles(id),\n    FOREIGN KEY(language_proficiency_id) REFERENCES Language_Proficiencies(id)\n);\nCREATE TABLE Language_Proficiencies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT\n);\n\nINSERT INTO \"Companies\" (id,name) VALUES (1,'TechCorp'),(2,'Software Inc.'),(3,'Data Solutions Ltd.'),(4,'AI Developers'),(5,'Network Services Co.');\nINSERT INTO \"Customer_Facing_Roles\" (id,role) VALUES (1,'Customer Service Advisor'),(2,'IT Support Technician');\nINSERT INTO \"Employees\" (id,email,phone,customer_role_id,language_proficiency_id,FullName) VALUES (1,'mikeadams@email.com','+1112223333',1,1,'Mike Adams'),(2,'nancywalker@email.com','+2223334444',1,2,'Nancy Walker'),(3,'thanks@email.com','+3344556677',2,1,'Tom Hanks'),(4,'laurawilliams@email.com','+4455667788',2,2,'Laura Williams'),(5,'stevemartin@email.com','+5566778899',1,1,'Steve Martin');\nINSERT INTO \"Language_Proficiencies\" (id,language) VALUES (1,'Bilingual'),(2,'Multilingual');\n",
      "question": "Show all of the customer service advisor details, also show the bilingual IT support technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\" AND Language_Proficiencies.language = \"Bilingual\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Union of Customer Service Advisors and Bilingual IT Support Technicians in One Table",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Employees.FullName \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Customer_Facing_Roles.role = 'Customer Service Advisor' \nUNION \nSELECT Employees.FullName \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Customer_Facing_Roles.role = 'IT Support Technician' AND Language_Proficiencies.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Customer Service Advisors and IT Support Technicians with 'Bilingual' Language Proficiency in One Table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName, Customer_Facing_Roles.role, Language_Proficiencies.language\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE Customer_Facing_Roles.role IN ('Customer Service Advisor', 'IT Support Technician')\nAND Language_Proficiencies.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Combine Customer Service Advisors and Bilingual IT Support Technicians in One Table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.email, E.phone, CF.role, LP.language\nFROM Employees E\nJOIN Customer_Facing_Roles CF ON E.customer_role_id = CF.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE (CF.role = 'Customer Service Advisor')\n   OR (CF.role = 'IT Support Technician' AND LP.language = 'Bilingual')"
          ]
        },
        {
          "interpretation": "Customer Service Advisors and IT Support Technicians (Bilingual Only) in One Table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.FullName, e.email, e.phone, cfr.role, lp.language\nFROM Employees e\nJOIN Customer_Facing_Roles cfr ON e.customer_role_id = cfr.id\nJOIN Language_Proficiencies lp ON e.language_proficiency_id = lp.id\nWHERE cfr.role IN ('Customer Service Advisor', 'IT Support Technician') AND lp.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Customer Service Advisors and Bilingual IT Support Techs in One Table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName, Customer_Facing_Roles.role, Language_Proficiencies.language\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE (Customer_Facing_Roles.role = 'Customer Service Advisor') \n   OR (Customer_Facing_Roles.role = 'IT Support Technician' AND Language_Proficiencies.language = 'Bilingual')"
          ]
        },
        {
          "interpretation": "Customer Service Advisors and Non-Bilingual IT Support Technicians in One Table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.email, E.phone, CFR.role, LP.language\nFROM Employees E\nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE (CFR.role = 'Customer Service Advisor')\n   OR (CFR.role = 'IT Support Technician' AND LP.language != 'Bilingual')"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_customer_facing_roles/attachment_1tab_ref_customer_facing_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Customer_Facing_Roles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    email TEXT,\n    phone TEXT,\n    customer_role_id INTEGER,\n    language_proficiency_id INTEGER, FullName TEXT,\n    FOREIGN KEY(customer_role_id) REFERENCES Customer_Facing_Roles(id),\n    FOREIGN KEY(language_proficiency_id) REFERENCES Language_Proficiencies(id)\n);\nCREATE TABLE Language_Proficiencies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT\n);\n\nINSERT INTO \"Companies\" (id,name) VALUES (1,'TechCorp'),(2,'Software Inc.'),(3,'Data Solutions Ltd.'),(4,'AI Developers'),(5,'Network Services Co.');\nINSERT INTO \"Customer_Facing_Roles\" (id,role) VALUES (1,'Customer Service Advisor'),(2,'IT Support Technician');\nINSERT INTO \"Employees\" (id,email,phone,customer_role_id,language_proficiency_id,FullName) VALUES (1,'mikeadams@email.com','+1112223333',1,1,'Mike Adams'),(2,'nancywalker@email.com','+2223334444',1,2,'Nancy Walker'),(3,'thanks@email.com','+3344556677',2,1,'Tom Hanks'),(4,'laurawilliams@email.com','+4455667788',2,2,'Laura Williams'),(5,'stevemartin@email.com','+5566778899',1,1,'Steve Martin');\nINSERT INTO \"Language_Proficiencies\" (id,language) VALUES (1,'Bilingual'),(2,'Multilingual');\n",
      "question": "Display all of the bilingual employees working as either customer service advisors or IT support technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE (Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\") AND Language_Proficiencies.language = \"Bilingual\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a table that includes all employees who are Bilingual and either Customer Service Advisor or IT Support Technician, presenting them in one consolidated table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.email, E.phone, CF.role, LP.language\nFROM Employees E\nJOIN Customer_Facing_Roles CF ON E.customer_role_id = CF.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE LP.language = 'Bilingual' AND CF.role IN ('Customer Service Advisor', 'IT Support Technician')"
          ]
        },
        {
          "interpretation": "Retrieve and list every employee who is bilingual and filled the positions of Customer Service Advisor or IT Support Technician, arranging the output into a single table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Employees.FullName \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Language_Proficiencies.language = 'Bilingual' \nAND (Customer_Facing_Roles.role = 'Customer Service Advisor' OR Customer_Facing_Roles.role = 'IT Support Technician')"
          ]
        },
        {
          "interpretation": "Get all employees with Bilingual language proficiency and show them with their respective customer roles, including Customer Service Advisor and IT Support Technician, in one output table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Employees.FullName,\n    Customer_Facing_Roles.role\nFROM \n    Employees\nJOIN \n    Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nJOIN \n    Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nWHERE \n    Language_Proficiencies.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Display all bilingual employees who have a customer role, and filter for roles such as Customer Service Advisor or IT Support Technician, presenting the result in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName, Customer_Facing_Roles.role, Language_Proficiencies.language\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE Language_Proficiencies.language = 'Bilingual'\nAND (Customer_Facing_Roles.role = 'Customer Service Advisor' OR Customer_Facing_Roles.role = 'IT Support Technician')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What instruments are associated with each lab technician?",
      "gold_queries": [
        "SELECT Instruments.instrumentName  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)",
        "select lab_technicians.name , instruments.instrumentname from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Every lab technician has which instruments associated?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name, I.instrumentName\nFROM Lab_Technicians LT\nJOIN Lab_Technicians_Instruments LTI ON LT.id = LTI.technicianId\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What description of instruments is common for all lab technicians?",
      "gold_queries": [
        "SELECT Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What descriptions of instruments are held in common by all technicians?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT description FROM Instruments WHERE id IN (SELECT instrumentId FROM Lab_Technicians_Instruments GROUP BY instrumentId HAVING COUNT(DISTINCT technicianId) = (SELECT COUNT(*) FROM Lab_Technicians))"
          ]
        },
        {
          "interpretation": "What are the descriptions of instruments that each lab technician works with?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.description \nFROM Lab_Technicians_Instruments \nJOIN Lab_Technicians ON Lab_Technicians_Instruments.technicianId = Lab_Technicians.id \nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For each lab technician, list information about the instruments they use (their names and descriptions).",
      "gold_queries": [
        "select lab_technicians.name , instruments.instrumentname , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each lab technician, show their name and list the instrument names and descriptions of the instruments they use, but display the information in two separate columns.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT LT.name, I.instrumentName, I.description\nFROM Lab_Technicians LT\nJOIN Lab_Technicians_Instruments LTI ON LT.id = LTI.technicianId\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "For each lab technician, list their email along with the names and descriptions of the instruments they use.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.email, I.instrumentName, I.description\nFROM Lab_Technicians_Instruments LTI\nJOIN Lab_Technicians LT ON LTI.technicianId = LT.id\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "For each lab technician, list their id along with the names and descriptions of the instruments they use.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.id, I.instrumentName, I.description\nFROM Lab_Technicians LT\nJOIN Lab_Technicians_Instruments LTI ON LT.id = LTI.technicianId\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "For each lab technician, provide a count of the instruments they use and then list the instrument names and descriptions for those instruments.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT lt.name, COUNT(lti.instrumentId) AS instrument_count, i.instrumentName, i.description\nFROM Lab_Technicians lt\nJOIN Lab_Technicians_Instruments lti ON lt.id = lti.technicianId\nJOIN Instruments i ON lti.instrumentId = i.id\nGROUP BY lt.name, i.instrumentName, i.description"
          ]
        },
        {
          "interpretation": "For each lab technician, list the names of the instruments they use, but do not include descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.instrumentName\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "For each lab technician, list the names and descriptions of the instruments they use, and also include the average description length for each instrument.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    LT.name AS TechnicianName,\n    I.instrumentName AS InstrumentName,\n    I.description AS Description,\n    AVG(LENGTH(I.description)) OVER (PARTITION BY I.id) AS AverageDescriptionLength\nFROM \n    Lab_Technicians_Instruments LTI\nJOIN \n    Lab_Technicians LT ON LTI.technicianId = LT.id\nJOIN \n    Instruments I ON LTI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "For each lab technician, list the instrumentIds and retrieve the corresponding instrument names and descriptions for the instruments they use.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.id AS technicianId, LTI.instrumentId, I.instrumentName, I.description\nFROM Lab_Technicians LT\nJOIN Lab_Technicians_Instruments LTI ON LT.id = LTI.technicianId\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "Tell me about the instruments every lab technician uses (their names and descriptions).",
      "gold_queries": [
        "SELECT Instruments.instrumentName, Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)",
        "select lab_technicians.name , instruments.instrumentname , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Describe the intersection of instruments and their descriptions used by all lab technicians.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.instrumentName, I.description\nFROM Instruments I\nWHERE I.id IN (\n    SELECT LI.instrumentId\n    FROM Lab_Technicians_Instruments LI\n    GROUP BY LI.instrumentId\n    HAVING COUNT(DISTINCT LI.technicianId) = (SELECT COUNT(*) FROM Lab_Technicians)\n)"
          ]
        },
        {
          "interpretation": "Describe the set of instruments and their details that each lab technician operates.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.instrumentName, Instruments.description\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "Detail the instruments and their descriptions associated with each lab technician.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.instrumentName, T2.description, T1.name, T1.email\nFROM Lab_Technicians_Instruments AS LT_I\nJOIN Instruments AS T2 ON LT_I.instrumentId = T2.id\nJOIN Lab_Technicians AS T1 ON LT_I.technicianId = T1.id"
          ]
        },
        {
          "interpretation": "Enumerate the unique instruments and their descriptions for all lab technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT instrumentName, description FROM Instruments"
          ]
        },
        {
          "interpretation": "Detail the common instruments and their descriptions across all lab technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT I.instrumentName, I.description\nFROM Instruments I\nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId"
          ]
        },
        {
          "interpretation": "Present the instrument names and descriptions for every technician's assigned instruments.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.instrumentName, I.description\nFROM Instruments I\nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What description of instruments do we have for each laboratory technician?",
      "gold_queries": [
        "SELECT Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)",
        "select lab_technicians.name , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the descriptions associated with each laboratory technician's instruments?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T3.description FROM Lab_Technicians AS T1 JOIN Lab_Technicians_Instruments AS T2 ON T1.id = T2.technicianId JOIN Instruments AS T3 ON T2.instrumentId = T3.id"
          ]
        },
        {
          "interpretation": "Provide a description of the instruments for each technician.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name, I.instrumentName, I.description\nFROM Lab_Technicians LT\nJOIN Lab_Technicians_Instruments LTI ON LT.id = LTI.technicianId\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "For each laboratory technician, list the descriptions of the instruments they manage.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.description \nFROM Lab_Technicians_Instruments AS T1 \nJOIN Instruments AS T2 ON T1.instrumentId = T2.id \nJOIN Lab_Technicians AS T3 ON T1.technicianId = T3.id \nGROUP BY T3.name, T2.description"
          ]
        },
        {
          "interpretation": "List the descriptions of instruments for each assigned to the technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentName, description FROM Instruments"
          ]
        },
        {
          "interpretation": "Describe the instruments each technician is responsible for.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.instrumentName\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What information is there about the instruments that are used equally by all lab technicians (their names and descriptions)?",
      "gold_queries": [
        "SELECT Instruments.instrumentName, Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What information is there about the instruments all technicians use (their names and descriptions)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT I.instrumentName, I.description \nFROM Instruments I \nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId"
          ]
        },
        {
          "interpretation": "What information is there about the instruments that each lab technician uses (their names and descriptions)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.instrumentName, Instruments.description \nFROM Lab_Technicians \nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId \nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "What information is there about the instruments universally accessible to all technicians (their names and descriptions)?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT instrumentName, description FROM Instruments WHERE id IN (SELECT instrumentId FROM Lab_Technicians_Instruments GROUP BY instrumentId HAVING COUNT(DISTINCT technicianId) = (SELECT COUNT(*) FROM Lab_Technicians))"
          ]
        },
        {
          "interpretation": "What information is there about the instruments each lab technician operates (their names and descriptions)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.description\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "What information is there about the instruments every technician handles (their names and descriptions)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.instrumentName, T1.description\nFROM Instruments AS T1\nJOIN Lab_Technicians_Instruments AS T2 ON T1.id = T2.instrumentId"
          ]
        },
        {
          "interpretation": "What information is there about the instruments used by every lab technician (their names and descriptions)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.instrumentName, I.description\nFROM Instruments I"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What instrument is common for all lab technicians?",
      "gold_queries": [
        "SELECT Instruments.instrumentName  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What instrument is associated with all lab technicians?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT instrumentName \nFROM Instruments \nWHERE id IN (\n    SELECT instrumentId \n    FROM Lab_Technicians_Instruments \n    GROUP BY instrumentId \n    HAVING COUNT(DISTINCT technicianId) = (SELECT COUNT(*) FROM Lab_Technicians)\n)"
          ]
        },
        {
          "interpretation": "What instrument can each lab technician use?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name, I.instrumentName\nFROM Lab_Technicians_Instruments LTI\nJOIN Lab_Technicians LT ON LTI.technicianId = LT.id\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every lab technicians, provide the corresponding description of instruments.",
      "gold_queries": [
        "select lab_technicians.name , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every Lab_Technician, provide the concatenated descriptions of all instruments they are associated with.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name, GROUP_CONCAT(I.description) AS instrument_descriptions\nFROM Lab_Technicians_Instruments LTI\nJOIN Lab_Technicians LT ON LTI.technicianId = LT.id\nJOIN Instruments I ON LTI.instrumentId = I.id\nGROUP BY LT.name"
          ]
        },
        {
          "interpretation": "For every Lab_Technician, provide the corresponding description of the Microscope.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.description\nFROM Lab_Technicians_Instruments AS T1\nJOIN Instruments AS T2 ON T1.instrumentId = T2.id\nJOIN Lab_Technicians AS T3 ON T1.technicianId = T3.id\nWHERE T2.instrumentName = 'Microscope'"
          ]
        },
        {
          "interpretation": "For every Lab_Technician, provide the descriptions of all instruments they are associated with.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT LT.name, I.description\nFROM Lab_Technicians LT\nJOIN Lab_Technicians_Instruments LTI ON LT.id = LTI.technicianId\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "For every Lab_Technician, provide the corresponding description of the pH Meter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T3.description \nFROM Lab_Technicians AS T1 \nJOIN Lab_Technicians_Instruments AS T2 ON T1.id = T2.technicianId \nJOIN Instruments AS T3 ON T2.instrumentId = T3.id \nWHERE T3.instrumentName = 'pH Meter'"
          ]
        },
        {
          "interpretation": "For every Lab_Technician, provide the corresponding description of the Autoclave.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.description \nFROM Lab_Technicians \nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId \nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id \nWHERE Instruments.instrumentName = 'Autoclave'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every lab technician, what are the corresponding instrument?",
      "gold_queries": [
        "select lab_technicians.name , instruments.instrumentname from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each technician, show their paired instruments.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T.name AS technicianName, I.instrumentName\nFROM Lab_Technicians_Instruments AS LTI\nJOIN Lab_Technicians AS T ON LTI.technicianId = T.id\nJOIN Instruments AS I ON LTI.instrumentId = I.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_content_creators_platforms/scope_content_creators_platforms.sqlite",
      "db_dump": "CREATE TABLE Content_Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Content_Creators_Platforms (\n    content_creator_id INTEGER,\n    platform_id INTEGER,\n    FOREIGN KEY (content_creator_id) REFERENCES Content_Creators(id),\n    FOREIGN KEY (platform_id) REFERENCES Platforms(id),\n    PRIMARY KEY (content_creator_id, platform_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Content_Creators\" (id,name,email) VALUES (1,'Alice','alice@example.com'),(2,'Bob','bob@example.com'),(3,'Charlie','charlie@example.com'),(4,'Dave','dave@example.com'),(5,'Eve','eve@example.com');\nINSERT INTO \"Content_Creators_Platforms\" (content_creator_id,platform_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'YouTube'),(2,'Twitch'),(3,'Vimeo'),(4,'Facebook'),(5,'Instagram');\n",
      "question": "Show me the platforms each content creator uses.",
      "gold_queries": [
        "SELECT Platforms.platform_name  from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id   GROUP BY Content_Creators_Platforms.platform_id HAVING COUNT(DISTINCT Content_Creators_Platforms.content_creator_id) = (SELECT COUNT(*) FROM  Content_Creators)",
        "select content_creators.name , platforms.platform_name from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the platforms each content creator is active on.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, P.platform_name\nFROM Content_Creators CC\nJOIN Content_Creators_Platforms CCP ON CC.id = CCP.content_creator_id\nJOIN Platforms P ON CCP.platform_id = P.id"
          ]
        },
        {
          "interpretation": "Show the range of platforms each content creator follows.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cc.name, GROUP_CONCAT(p.platform_name) AS platforms\nFROM Content_Creators cc\nJOIN Content_Creators_Platforms ccp ON cc.id = ccp.content_creator_id\nJOIN Platforms p ON ccp.platform_id = p.id\nGROUP BY cc.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_content_creators_platforms/scope_content_creators_platforms.sqlite",
      "db_dump": "CREATE TABLE Content_Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Content_Creators_Platforms (\n    content_creator_id INTEGER,\n    platform_id INTEGER,\n    FOREIGN KEY (content_creator_id) REFERENCES Content_Creators(id),\n    FOREIGN KEY (platform_id) REFERENCES Platforms(id),\n    PRIMARY KEY (content_creator_id, platform_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Content_Creators\" (id,name,email) VALUES (1,'Alice','alice@example.com'),(2,'Bob','bob@example.com'),(3,'Charlie','charlie@example.com'),(4,'Dave','dave@example.com'),(5,'Eve','eve@example.com');\nINSERT INTO \"Content_Creators_Platforms\" (content_creator_id,platform_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'YouTube'),(2,'Twitch'),(3,'Vimeo'),(4,'Facebook'),(5,'Instagram');\n",
      "question": "What platforms are shared between all content creators?",
      "gold_queries": [
        "SELECT Platforms.platform_name  from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id   GROUP BY Content_Creators_Platforms.platform_id HAVING COUNT(DISTINCT Content_Creators_Platforms.content_creator_id) = (SELECT COUNT(*) FROM  Content_Creators)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which platforms are present in the profiles of all content creators?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT platform_name\nFROM Platforms\nWHERE id IN (\n    SELECT platform_id\n    FROM Content_Creators_Platforms\n    GROUP BY platform_id\n    HAVING COUNT(content_creator_id) = (SELECT COUNT(*) FROM Content_Creators)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_content_creators_platforms/scope_content_creators_platforms.sqlite",
      "db_dump": "CREATE TABLE Content_Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Content_Creators_Platforms (\n    content_creator_id INTEGER,\n    platform_id INTEGER,\n    FOREIGN KEY (content_creator_id) REFERENCES Content_Creators(id),\n    FOREIGN KEY (platform_id) REFERENCES Platforms(id),\n    PRIMARY KEY (content_creator_id, platform_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Content_Creators\" (id,name,email) VALUES (1,'Alice','alice@example.com'),(2,'Bob','bob@example.com'),(3,'Charlie','charlie@example.com'),(4,'Dave','dave@example.com'),(5,'Eve','eve@example.com');\nINSERT INTO \"Content_Creators_Platforms\" (content_creator_id,platform_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'YouTube'),(2,'Twitch'),(3,'Vimeo'),(4,'Facebook'),(5,'Instagram');\n",
      "question": "For every content creator, list the platforms used.",
      "gold_queries": [
        "select content_creators.name , platforms.platform_name from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every creator, list the platforms they employ.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Content_Creators.name, Platforms.platform_name\nFROM Content_Creators_Platforms\nJOIN Content_Creators ON Content_Creators_Platforms.content_creator_id = Content_Creators.id\nJOIN Platforms ON Content_Creators_Platforms.platform_id = Platforms.id"
          ]
        },
        {
          "interpretation": "Retrieve platforms used by all content creators.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.platform_name \nFROM Platforms p \nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM Content_Creators c \n    LEFT JOIN Content_Creators_Platforms ccp ON c.id = ccp.content_creator_id \n    WHERE ccp.platform_id IS NULL OR ccp.platform_id != p.id\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_financial_analysts_metrics/scope_financial_analysts_metrics.sqlite",
      "db_dump": "CREATE TABLE Company (\n    company_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    location TEXT\n);\nCREATE TABLE Financial_Analysts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Financial_Analysts_JobPostings (\n    financial_analyst_id INTEGER,\n    job_posting_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id)\n);\nCREATE TABLE Financial_Analysts_Metrics (\n    financial_analyst_id INTEGER,\n    metric_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(metric_id) REFERENCES Metrics(metric_id)\n);\nCREATE TABLE JobPostings (\n    job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE JobPostings_Company (\n    job_posting_id INTEGER,\n    company_id INTEGER,\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id),\n    FOREIGN KEY(company_id) REFERENCES Company(company_id)\n);\nCREATE TABLE Metrics (\n    metric_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    metric_name TEXT);\n\nINSERT INTO \"Company\" (company_id,company_name,location) VALUES (1,'ABC Corporation','New York'),(2,'XYZ Inc.','California'),(3,'LNM Limited','Texas'),(4,'MNO Enterprises','Florida'),(5,'PQR Holdings','Illinois');\nINSERT INTO \"Financial_Analysts\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Alice Johnson',10),(4,'Bob Brown',7),(5,'Emma Wilson',6);\nINSERT INTO \"Financial_Analysts_Metrics\" (financial_analyst_id,metric_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"JobPostings\" (job_posting_id,title,description,salary,created_at) VALUES (1,'Financial Analyst','Analyze market trends and make recommendations based on research',75000.0,'2024-01-30 19:22:37'),(2,'Senior Financial Analyst','Lead a team of analysts in providing investment advice',100000.0,'2024-01-30 19:22:37'),(3,'Associate Financial Analyst','Assist senior analysts in preparing reports and forecasts',60000.0,'2024-01-30 19:22:37'),(4,'Financial Modelling Analyst','Develop financial models to assist in decision-making processes',70000.0,'2024-01-30 19:22:37'),(5,'Equity Research Analyst','Conduct analysis on specific industries and companies to provide buy/sell/hold recommendations',80000.0,'2024-01-30 19:22:37');\nINSERT INTO \"Metrics\" (metric_id,metric_name) VALUES (1,'Earnings_Per_Share'),(2,'Revenue'),(3,'Gross_Profit'),(4,'Net_Income'),(5,'Market_Capitalization');\n",
      "question": "Give me the metrics corresponding to each financial analyst.",
      "gold_queries": [
        "SELECT Metrics.metric_name  from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id   GROUP BY Financial_Analysts_Metrics.metric_id HAVING COUNT(DISTINCT Financial_Analysts_Metrics.financial_analyst_id) = (SELECT COUNT(*) FROM  Financial_Analysts)",
        "select financial_analysts.name , metrics.metric_name from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the metrics for all financial analysts",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Metrics.metric_name \nFROM Metrics \nJOIN Financial_Analysts_Metrics ON Metrics.metric_id = Financial_Analysts_Metrics.metric_id"
          ]
        },
        {
          "interpretation": "Provide the metrics connected to each financial analyst",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Financial_Analysts.id, Financial_Analysts.name, Metrics.metric_name\nFROM Financial_Analysts\nJOIN Financial_Analysts_Metrics ON Financial_Analysts.id = Financial_Analysts_Metrics.financial_analyst_id\nJOIN Metrics ON Financial_Analysts_Metrics.metric_id = Metrics.metric_id"
          ]
        },
        {
          "interpretation": "Present the metrics each financial analyst is responsible for",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Financial_Analysts.name, Metrics.metric_name\nFROM Financial_Analysts_Metrics\nJOIN Financial_Analysts ON Financial_Analysts_metrics.financial_analyst_id = Financial_Analysts.id\nJOIN Metrics ON Financial_Analysts_Metrics.metric_id = Metrics.metric_id"
          ]
        },
        {
          "interpretation": "Fetch the metrics each analyst is working on",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FAM.financial_analyst_id, M.metric_name\nFROM Financial_Analysts_Metrics FAM\nJOIN Metrics M ON FAM.metric_id = M.metric_id"
          ]
        },
        {
          "interpretation": "Show the metrics that correspond to all financial analysts",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT M.metric_name\nFROM Financial_Analysts_Metrics FAM\nJOIN Metrics M ON FAM.metric_id = M.metric_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_financial_analysts_metrics/scope_financial_analysts_metrics.sqlite",
      "db_dump": "CREATE TABLE Company (\n    company_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    location TEXT\n);\nCREATE TABLE Financial_Analysts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Financial_Analysts_JobPostings (\n    financial_analyst_id INTEGER,\n    job_posting_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id)\n);\nCREATE TABLE Financial_Analysts_Metrics (\n    financial_analyst_id INTEGER,\n    metric_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(metric_id) REFERENCES Metrics(metric_id)\n);\nCREATE TABLE JobPostings (\n    job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE JobPostings_Company (\n    job_posting_id INTEGER,\n    company_id INTEGER,\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id),\n    FOREIGN KEY(company_id) REFERENCES Company(company_id)\n);\nCREATE TABLE Metrics (\n    metric_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    metric_name TEXT);\n\nINSERT INTO \"Company\" (company_id,company_name,location) VALUES (1,'ABC Corporation','New York'),(2,'XYZ Inc.','California'),(3,'LNM Limited','Texas'),(4,'MNO Enterprises','Florida'),(5,'PQR Holdings','Illinois');\nINSERT INTO \"Financial_Analysts\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Alice Johnson',10),(4,'Bob Brown',7),(5,'Emma Wilson',6);\nINSERT INTO \"Financial_Analysts_Metrics\" (financial_analyst_id,metric_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"JobPostings\" (job_posting_id,title,description,salary,created_at) VALUES (1,'Financial Analyst','Analyze market trends and make recommendations based on research',75000.0,'2024-01-30 19:22:37'),(2,'Senior Financial Analyst','Lead a team of analysts in providing investment advice',100000.0,'2024-01-30 19:22:37'),(3,'Associate Financial Analyst','Assist senior analysts in preparing reports and forecasts',60000.0,'2024-01-30 19:22:37'),(4,'Financial Modelling Analyst','Develop financial models to assist in decision-making processes',70000.0,'2024-01-30 19:22:37'),(5,'Equity Research Analyst','Conduct analysis on specific industries and companies to provide buy/sell/hold recommendations',80000.0,'2024-01-30 19:22:37');\nINSERT INTO \"Metrics\" (metric_id,metric_name) VALUES (1,'Earnings_Per_Share'),(2,'Revenue'),(3,'Gross_Profit'),(4,'Net_Income'),(5,'Market_Capitalization');\n",
      "question": "Show me the metric that all financial analysts have in common.",
      "gold_queries": [
        "SELECT Metrics.metric_name  from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id   GROUP BY Financial_Analysts_Metrics.metric_id HAVING COUNT(DISTINCT Financial_Analysts_Metrics.financial_analyst_id) = (SELECT COUNT(*) FROM  Financial_Analysts)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the metric that is present in the records of all financial analysts.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT metric_name FROM Metrics WHERE metric_id IN (SELECT metric_id FROM Financial_Analysts_Metrics GROUP BY metric_id HAVING COUNT(financial_analyst_id) = (SELECT COUNT(*) FROM Financial_Analysts))"
          ]
        },
        {
          "interpretation": "Show me the common metric among all entries in the Financial_Analysts_Metrics table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT metric_id FROM Financial_Analysts_Metrics GROUP BY metric_id HAVING COUNT(DISTINCT financial_analyst_id) = (SELECT COUNT(*) FROM Financial_Analysts)"
          ]
        },
        {
          "interpretation": "Show me the metric that is linked to each financial analyst.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T3.metric_name FROM Financial_Analysts AS T1 JOIN Financial_Analysts_Metrics AS T2 ON T1.id = T2.financial_analyst_id JOIN Metrics AS T3 ON T2.metric_id = T3.metric_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_financial_analysts_metrics/scope_financial_analysts_metrics.sqlite",
      "db_dump": "CREATE TABLE Company (\n    company_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    location TEXT\n);\nCREATE TABLE Financial_Analysts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Financial_Analysts_JobPostings (\n    financial_analyst_id INTEGER,\n    job_posting_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id)\n);\nCREATE TABLE Financial_Analysts_Metrics (\n    financial_analyst_id INTEGER,\n    metric_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(metric_id) REFERENCES Metrics(metric_id)\n);\nCREATE TABLE JobPostings (\n    job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE JobPostings_Company (\n    job_posting_id INTEGER,\n    company_id INTEGER,\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id),\n    FOREIGN KEY(company_id) REFERENCES Company(company_id)\n);\nCREATE TABLE Metrics (\n    metric_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    metric_name TEXT);\n\nINSERT INTO \"Company\" (company_id,company_name,location) VALUES (1,'ABC Corporation','New York'),(2,'XYZ Inc.','California'),(3,'LNM Limited','Texas'),(4,'MNO Enterprises','Florida'),(5,'PQR Holdings','Illinois');\nINSERT INTO \"Financial_Analysts\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Alice Johnson',10),(4,'Bob Brown',7),(5,'Emma Wilson',6);\nINSERT INTO \"Financial_Analysts_Metrics\" (financial_analyst_id,metric_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"JobPostings\" (job_posting_id,title,description,salary,created_at) VALUES (1,'Financial Analyst','Analyze market trends and make recommendations based on research',75000.0,'2024-01-30 19:22:37'),(2,'Senior Financial Analyst','Lead a team of analysts in providing investment advice',100000.0,'2024-01-30 19:22:37'),(3,'Associate Financial Analyst','Assist senior analysts in preparing reports and forecasts',60000.0,'2024-01-30 19:22:37'),(4,'Financial Modelling Analyst','Develop financial models to assist in decision-making processes',70000.0,'2024-01-30 19:22:37'),(5,'Equity Research Analyst','Conduct analysis on specific industries and companies to provide buy/sell/hold recommendations',80000.0,'2024-01-30 19:22:37');\nINSERT INTO \"Metrics\" (metric_id,metric_name) VALUES (1,'Earnings_Per_Share'),(2,'Revenue'),(3,'Gross_Profit'),(4,'Net_Income'),(5,'Market_Capitalization');\n",
      "question": "Give me the financial analysts and the corresponding metrics",
      "gold_queries": [
        "select financial_analysts.name , metrics.metric_name from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Financial analysts and the metrics they report on",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Financial_Analysts.name, Metrics.metric_name\nFROM Financial_Analysts\nJOIN Financial_Analysts_Metrics ON Financial_Analysts.id = Financial_Analysts_Metrics.financial_analyst_id\nJOIN Metrics ON Financial_Analysts_Metrics.metric_id = Metrics.metric_id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What are the minimum and preferred years of experience for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Minimum_Years, Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the minimum and preferred years of experience for the role with the maximal salary?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Minimum_Years, Preferred_Years \nFROM Jobs \nWHERE Salary = (SELECT MAX(Salary) FROM Jobs)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What are the preferred years of experience for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the preferred years of experience for the job offering the highest compensation?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Preferred_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What experience do I need for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Minimum_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;",
        "SELECT Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;",
        "SELECT Minimum_Years, Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What degrees or certifications are needed for the job with the top salary?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DegreeLevel, FieldOfStudy \nFROM EducationRequirements \nWHERE RequirementID = (\n    SELECT JobID \n    FROM Jobs \n    ORDER BY Salary DESC \n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "What specific experience is needed for the job posting with the highest salary?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Minimum_Years, Preferred_Years \nFROM Jobs \nWHERE Salary = (SELECT MAX(Salary) FROM Jobs)"
          ]
        },
        {
          "interpretation": "What experience level is necessary for the role that pays the most?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Preferred_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.6666666666666666,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What are the street addresses and cities of the rental properties in the database?",
      "gold_queries": [
        "SELECT P.Street_Address, City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the street addresses and cities of properties that have a transaction type of rent or rental?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Street_Address, City FROM Properties WHERE property_id IN (SELECT property_id FROM Transactions WHERE TypeOfTransaction = 'Rent' OR TypeOfTransaction = 'Rental')"
          ]
        },
        {
          "interpretation": "What are the street addresses and cities of properties listed as rental properties in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address, City FROM Properties WHERE Property_Type = 'Condo' OR Property_Type = 'Lease'"
          ]
        },
        {
          "interpretation": "What are the street addresses and cities of properties that are categorized as rental units in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address, City FROM Properties WHERE Property_Type = 'Condo' OR Property_Type = 'Townhouse' OR Property_Type = 'Loft'"
          ]
        },
        {
          "interpretation": "What are the street addresses and cities of properties that are being leased or rented?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address, City FROM Properties WHERE property_id IN (SELECT property_id FROM Transactions WHERE TypeOfTransaction IN ('Lease', 'Rent'))"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What are the minimum years of experience that I need for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Minimum_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the minimum experience threshold for the job with the greatest earning potential?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Minimum_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "What are the years of experience requirement for the job offering the highest remuneration?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Minimum_Years, Preferred_Years \nFROM Jobs \nORDER BY Salary DESC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "In what city is the property of the customer with phone number 555-333-4444 located?",
      "gold_queries": [
        "SELECT P.City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Would the city of the property of the client with the phone number 555-333-4444 be Anytown or Othertown?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.City\nFROM Clients AS T1\nJOIN ClientProperties AS T3 ON T1.client_id = T3.client_id\nJOIN Properties AS T2 ON T3.property_id = T2.property_id\nWHERE T1.PhoneNumber = '555-333-4444'"
          ]
        },
        {
          "interpretation": "Is the city of the property linked to the client at 555-333-4444 the same as the city where real estate office 1 is located?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CASE \n          WHEN p.City = reo.Address THEN 'Yes' \n          ELSE 'No' \n       END\nFROM Clients c\nJOIN ClientProperties cp ON c.client_id = cp.client_id\nJOIN Properties p ON cp.property_id = p.property_id\nJOIN RealEstateOffices reo ON p.Real_Estate_Offices = reo.real_estate_office_id\nWHERE c.PhoneNumber = '555-333-4444' AND reo.real_estate_office_id = 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What is the customer with phone number 555-333-4444's street address?",
      "gold_queries": [
        "SELECT P.Street_Address from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Clients do not have street address, find it from Transactions and Properties",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Clients.Name, Properties.Street_Address\nFROM Clients\nJOIN Transactions ON Clients.client_id = Transactions.client_id\nJOIN Properties ON Transactions.property_id = Properties.property_id"
          ]
        },
        {
          "interpretation": "Phone number should match exactly, what if there is a typo",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Clients WHERE PhoneNumber = '555-111-2222'"
          ]
        },
        {
          "interpretation": "Street address should be joined from Properties table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address FROM Properties"
          ]
        },
        {
          "interpretation": "Phone number is not sufficient, need to cross-check with transactions for property",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Clients.Name, Clients.Email, Clients.PhoneNumber, Properties.Street_Address, Properties.City, Transactions.TypeOfTransaction\nFROM Clients\nJOIN Transactions ON Clients.client_id = Transactions.client_id\nJOIN Properties ON Transactions.property_id = Properties.property_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What is the city and street address of the property for the customer with phone number 555-333-4444?",
      "gold_queries": [
        "SELECT P.Street_Address, City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the city and street address of the property Jane Smith is interested in?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT p.City, p.Street_Address \nFROM Properties p \nJOIN ClientProperties cp ON p.property_id = cp.property_id \nJOIN Clients c ON cp.client_id = c.client_id \nWHERE c.Name = 'Jane Smith'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What are the street addresses of the rental properties in the database?",
      "gold_queries": [
        "SELECT P.Street_Address from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the street addresses of the properties that have been rented out at least once according to the Transactions table?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Street_Address\nFROM Properties P\nJOIN Transactions T ON P.property_id = T.property_id\nWHERE T.TypeOfTransaction = 'Rent'\nGROUP BY P.Street_Address"
          ]
        },
        {
          "interpretation": "What are the street addresses of the properties where the Real_Estate_Offices are involved in rental activities?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address FROM Properties WHERE Real_Estate_Offices IN (SELECT Real_Estate_Offices FROM Transactions WHERE TypeOfTransaction IN ('Rent', 'Lease'))"
          ]
        },
        {
          "interpretation": "What are the street addresses of the properties that have been marked as rental properties in the Properties table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address FROM Properties WHERE Property_Type = 'Condo' OR Property_Type = 'Townhouse'"
          ]
        },
        {
          "interpretation": "What are the street addresses of the properties that are related to rental activities in the database, regardless of whether transactions have been made?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.Street_Address\nFROM Properties p\nJOIN ClientProperties cp ON p.property_id = cp.property_id\nWHERE cp.property_id IN (\n    SELECT t.property_id\n    FROM Transactions t\n    WHERE t.TypeOfTransaction = 'Rent' OR t.TypeOfTransaction = 'Lease'\n)"
          ]
        },
        {
          "interpretation": "What are the street addresses of the properties that are categorized as rental properties based on the Property_Type in the Properties table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address FROM Properties WHERE Property_Type = 'Rental'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "In what city are the rental properties in the database?",
      "gold_queries": [
        "SELECT P.City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which city contains the rental properties stored in the database?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT City FROM Properties WHERE property_id IN (SELECT property_id FROM Transactions WHERE TypeOfTransaction = 'Rent')"
          ]
        },
        {
          "interpretation": "In what urban centers can rental properties be identified in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT City FROM Properties WHERE property_id IN (SELECT property_id FROM Transactions WHERE TypeOfTransaction IN ('Rent', 'Lease'))"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What are the locations of rental properties in the database?",
      "gold_queries": [
        "SELECT P.Street_Address from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'",
        "SELECT P.City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'",
        "SELECT P.Street_Address, City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What is the location of the property for the customer with phone number 555-333-4444?",
      "gold_queries": [
        "SELECT P.Street_Address from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'",
        "SELECT P.City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'",
        "SELECT P.Street_Address, City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Real estate office location associated with the property",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Address FROM RealEstateOffices WHERE real_estate_office_id = (SELECT Real_Estate_Offices FROM Properties LIMIT 1)"
          ]
        },
        {
          "interpretation": "Date when the customer showed interest in the property",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT InterestedDate FROM ClientProperties"
          ]
        },
        {
          "interpretation": "Type of transaction related to the property",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TypeOfTransaction FROM Transactions"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_ref_leisure_features/attachment_2tab_ref_leisure_features.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    ID INTEGER PRIMARY KEY,\n    Description TEXT);\nCREATE TABLE City(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE);\nCREATE TABLE HotTub(\n    ID INTEGER PRIMARY KEY,\n    Capacity INTEGER ,\n    HeatingMethod TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\nCREATE TABLE Hotel(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    PriceRange REAL ,\n    FOREIGN KEY(ID) REFERENCES City(ID));\nCREATE TABLE HotelAmenities(\n    HotelID INTEGER,\n    AmenityID INTEGER,\n    Available BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(HotelID) REFERENCES Hotel(ID),\n    FOREIGN KEY(AmenityID) REFERENCES Amenities(ID));\nCREATE TABLE SwimmingPool(\n    ID INTEGER PRIMARY KEY,\n    PoolType TEXT,\n    Size TEXT,\n    MaintenanceFrequency TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\n\nINSERT INTO \"Amenities\" (ID,Description) VALUES (1,'Free WiFi'),(2,'Gym');\nINSERT INTO \"City\" (ID,Name) VALUES (1,'Miami'),(2,'Los Angeles');\nINSERT INTO \"HotTub\" (ID,Capacity,HeatingMethod) VALUES (1,5,'Electric'),(2,8,'Gas');\nINSERT INTO \"Hotel\" (ID,Name,Address,PhoneNumber,PriceRange) VALUES (1,'Palm Beach','200 Palm St.','+1234567890',150.0),(2,'Sunrise Inn','300 Sun Rise Ave.','+1345678901',100.0);\nINSERT INTO \"HotelAmenities\" (HotelID,AmenityID,Available) VALUES (1,1,1),(2,2,0);\nINSERT INTO \"SwimmingPool\" (ID,PoolType,Size,MaintenanceFrequency) VALUES (1,'Outdoor','Medium','Daily'),(2,'Indoor','Small','Weekly');\n",
      "question": "What size are the swimming pools in Miami and what size are the hot tubs there? Show them in one table.",
      "gold_queries": [
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nWHERE City.Name = 'Miami'\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What is the size of the swimming pools belonging to hotels located in Miami and what is the capacity of hot tubs available at hotels in Miami? Display the data in a single table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Size AS PoolSize, H.Capacity AS HotTubCapacity\nFROM Hotel A\nJOIN City B ON A.ID = B.ID\nLEFT JOIN SwimmingPool P ON A.ID = P.ID\nLEFT JOIN HotTub H ON A.ID = H.ID\nWHERE B.Name = 'Miami'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_ref_leisure_features/attachment_2tab_ref_leisure_features.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    ID INTEGER PRIMARY KEY,\n    Description TEXT);\nCREATE TABLE City(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE);\nCREATE TABLE HotTub(\n    ID INTEGER PRIMARY KEY,\n    Capacity INTEGER ,\n    HeatingMethod TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\nCREATE TABLE Hotel(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    PriceRange REAL ,\n    FOREIGN KEY(ID) REFERENCES City(ID));\nCREATE TABLE HotelAmenities(\n    HotelID INTEGER,\n    AmenityID INTEGER,\n    Available BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(HotelID) REFERENCES Hotel(ID),\n    FOREIGN KEY(AmenityID) REFERENCES Amenities(ID));\nCREATE TABLE SwimmingPool(\n    ID INTEGER PRIMARY KEY,\n    PoolType TEXT,\n    Size TEXT,\n    MaintenanceFrequency TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\n\nINSERT INTO \"Amenities\" (ID,Description) VALUES (1,'Free WiFi'),(2,'Gym');\nINSERT INTO \"City\" (ID,Name) VALUES (1,'Miami'),(2,'Los Angeles');\nINSERT INTO \"HotTub\" (ID,Capacity,HeatingMethod) VALUES (1,5,'Electric'),(2,8,'Gas');\nINSERT INTO \"Hotel\" (ID,Name,Address,PhoneNumber,PriceRange) VALUES (1,'Palm Beach','200 Palm St.','+1234567890',150.0),(2,'Sunrise Inn','300 Sun Rise Ave.','+1345678901',100.0);\nINSERT INTO \"HotelAmenities\" (HotelID,AmenityID,Available) VALUES (1,1,1),(2,2,0);\nINSERT INTO \"SwimmingPool\" (ID,PoolType,Size,MaintenanceFrequency) VALUES (1,'Outdoor','Medium','Daily'),(2,'Indoor','Small','Weekly');\n",
      "question": "Can you show me the sizes of all hot tubs in Miami along with the sizes of all swimming pools in any given location? Show them in one table.",
      "gold_queries": [
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Can you display the capacities of all hot tubs in Miami alongside the sizes of all swimming pools in Miami in a single table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ht.Capacity, sp.Size\nFROM HotTub ht\nJOIN Hotel h ON ht.ID = h.ID\nJOIN City c ON h.ID = c.ID\nJOIN SwimmingPool sp ON h.ID = sp.ID\nWHERE c.Name = 'Miami'"
          ]
        },
        {
          "interpretation": "Can you gather the capacities of hot tubs in Miami and the sizes of swimming pools in Miami along with locations in one table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.Capacity AS HotTubCapacity, S.Size AS SwimmingPoolSize, City.Name AS Location\nFROM City\nJOIN Hotel ON City.ID = Hotel.ID\nLEFT JOIN HotTub H ON Hotel.ID = H.ID\nLEFT JOIN SwimmingPool S ON Hotel.ID = S.ID\nWHERE City.Name = 'Miami'"
          ]
        },
        {
          "interpretation": "Can you arrange the capacities of hot tubs in Miami with the sizes of swimming pools in Miami or any other location in a single table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ht.Capacity, sp.Size\nFROM HotTub ht\nJOIN Hotel h ON ht.ID = h.ID\nJOIN City c ON h.ID = c.ID\nJOIN SwimmingPool sp ON sp.ID = h.ID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_ref_leisure_features/attachment_2tab_ref_leisure_features.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    ID INTEGER PRIMARY KEY,\n    Description TEXT);\nCREATE TABLE City(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE);\nCREATE TABLE HotTub(\n    ID INTEGER PRIMARY KEY,\n    Capacity INTEGER ,\n    HeatingMethod TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\nCREATE TABLE Hotel(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    PriceRange REAL ,\n    FOREIGN KEY(ID) REFERENCES City(ID));\nCREATE TABLE HotelAmenities(\n    HotelID INTEGER,\n    AmenityID INTEGER,\n    Available BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(HotelID) REFERENCES Hotel(ID),\n    FOREIGN KEY(AmenityID) REFERENCES Amenities(ID));\nCREATE TABLE SwimmingPool(\n    ID INTEGER PRIMARY KEY,\n    PoolType TEXT,\n    Size TEXT,\n    MaintenanceFrequency TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\n\nINSERT INTO \"Amenities\" (ID,Description) VALUES (1,'Free WiFi'),(2,'Gym');\nINSERT INTO \"City\" (ID,Name) VALUES (1,'Miami'),(2,'Los Angeles');\nINSERT INTO \"HotTub\" (ID,Capacity,HeatingMethod) VALUES (1,5,'Electric'),(2,8,'Gas');\nINSERT INTO \"Hotel\" (ID,Name,Address,PhoneNumber,PriceRange) VALUES (1,'Palm Beach','200 Palm St.','+1234567890',150.0),(2,'Sunrise Inn','300 Sun Rise Ave.','+1345678901',100.0);\nINSERT INTO \"HotelAmenities\" (HotelID,AmenityID,Available) VALUES (1,1,1),(2,2,0);\nINSERT INTO \"SwimmingPool\" (ID,PoolType,Size,MaintenanceFrequency) VALUES (1,'Outdoor','Medium','Daily'),(2,'Indoor','Small','Weekly');\n",
      "question": "What size are all swimming pools and hot tubs in Miami? Show them in one table.",
      "gold_queries": [
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nWHERE City.Name = 'Miami'\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'",
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "All swimming pools and hot tubs in Miami, including their sizes and capacities, listed in one table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.Name AS HotelName, SP.Size AS PoolSize, HT.Capacity AS HotTubCapacity\nFROM Hotel H\nJOIN City C ON H.ID = C.ID\nLEFT JOIN SwimmingPool SP ON H.ID = SP.ID\nLEFT JOIN HotTub HT ON H.ID = HT.ID\nWHERE C.Name = 'Miami'"
          ]
        },
        {
          "interpretation": "Size information for all swimming pools and hot tubs in hotels situated in Miami?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Size AS PoolSize, H.Capacity AS HotTubCapacity \nFROM Hotel A \nJOIN City B ON A.ID = B.ID \nLEFT JOIN SwimmingPool P ON A.ID = P.ID \nLEFT JOIN HotTub H ON A.ID = H.ID \nWHERE B.Name = 'Miami'"
          ]
        },
        {
          "interpretation": "What are the dimensions of all swimming pools and hot tubs present in hotels in Miami? Display in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    T2.Size AS PoolSize, \n    T2.PoolType AS PoolType, \n    T3.Capacity AS HotTubCapacity, \n    T3.HeatingMethod AS HotTubHeatingMethod\nFROM \n    Hotel AS T1\nLEFT JOIN \n    SwimmingPool AS T2 ON T1.ID = T2.ID\nLEFT JOIN \n    HotTub AS T3 ON T1.ID = T3.ID\nJOIN \n    City AS T4 ON T1.ID = T4.ID\nWHERE \n    T4.Name = 'Miami'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
      "db_dump": "CREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birth_year INTEGER,\n    nationality TEXT\n);\nCREATE TABLE Film_Director(\n    film_id INTEGER,\n    director_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    PRIMARY KEY(film_id, director_id)\n);\nCREATE TABLE Film_Genre(\n    film_id INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(genre_id) REFERENCES Genres(id),\n    PRIMARY KEY(film_id, genre_id)\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_date DATE,\n    director TEXT,\n    budget REAL\n);\nCREATE TABLE Genres(\n    id INTEGER PRIMARY KEY,\n    genre TEXT\n);\n\nINSERT INTO \"Directors\" (id,name,birth_year,nationality) VALUES (1,'Stanley Kubrick',1928,'American'),(2,'David Robert Mitchell',1974,'American'),(3,'Christopher Nolan',1970,'English'),(4,'David Fincher',1962,'American');\nINSERT INTO \"Film_Director\" (film_id,director_id) VALUES (1,1),(2,2),(3,3),(4,4);\nINSERT INTO \"Film_Genre\" (film_id,genre_id) VALUES (1,1),(2,1),(3,2),(4,2);\nINSERT INTO \"Films\" (id,title,release_date,director,budget) VALUES (1,'The Shining','1980-06-22','Stanley Kubrick',20000000.0),(2,'It Follows','2014-03-14','David Robert Mitchell',5000000.0),(3,'Inception','2010-07-16','Christopher Nolan',20000000.0),(4,'Gone Girl','2014-10-03','David Fincher',65000000.0);\nINSERT INTO \"Genres\" (id,genre) VALUES (1,'Horror'),(2,'Thriller');\n",
      "question": "What horror films had a budget of 20 million and what thriller films had the same budget? Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE (Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\") AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What horror films and thriller films each had a budget of 20 million? Show them in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT F.title\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE G.genre IN ('Horror', 'Thriller') AND F.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "What horror films and thriller films have a budget of no more than 20 million? Show them in one table, with horror films and thriller films listed separately.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, g.genre FROM Films f JOIN Film_Genre fg ON f.id = fg.film_id JOIN Genres g ON fg.genre_id = g.id WHERE g.genre IN ('Horror', 'Thriller') AND f.budget <= 20000000.0"
          ]
        },
        {
          "interpretation": "What horror films had a budget of exactly 20 million and what thriller films had the same budget? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title, G.genre\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE (G.genre = 'Horror' OR G.genre = 'Thriller') AND F.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "What films of any type that had a budget of exactly 20 million are both horror and thriller? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title\nFROM Films F\nJOIN Film_Genre FG1 ON F.id = FG1.film_id\nJOIN Film_Genre FG2 ON F.id = FG2.film_id\nJOIN Genres G1 ON FG1.genre_id = G1.id\nJOIN Genres G2 ON FG2.genre_id = G2.id\nWHERE F.budget = 20000000.0 AND G1.genre = 'Horror' AND G2.genre = 'Thriller'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
      "db_dump": "CREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birth_year INTEGER,\n    nationality TEXT\n);\nCREATE TABLE Film_Director(\n    film_id INTEGER,\n    director_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    PRIMARY KEY(film_id, director_id)\n);\nCREATE TABLE Film_Genre(\n    film_id INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(genre_id) REFERENCES Genres(id),\n    PRIMARY KEY(film_id, genre_id)\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_date DATE,\n    director TEXT,\n    budget REAL\n);\nCREATE TABLE Genres(\n    id INTEGER PRIMARY KEY,\n    genre TEXT\n);\n\nINSERT INTO \"Directors\" (id,name,birth_year,nationality) VALUES (1,'Stanley Kubrick',1928,'American'),(2,'David Robert Mitchell',1974,'American'),(3,'Christopher Nolan',1970,'English'),(4,'David Fincher',1962,'American');\nINSERT INTO \"Film_Director\" (film_id,director_id) VALUES (1,1),(2,2),(3,3),(4,4);\nINSERT INTO \"Film_Genre\" (film_id,genre_id) VALUES (1,1),(2,1),(3,2),(4,2);\nINSERT INTO \"Films\" (id,title,release_date,director,budget) VALUES (1,'The Shining','1980-06-22','Stanley Kubrick',20000000.0),(2,'It Follows','2014-03-14','David Robert Mitchell',5000000.0),(3,'Inception','2010-07-16','Christopher Nolan',20000000.0),(4,'Gone Girl','2014-10-03','David Fincher',65000000.0);\nINSERT INTO \"Genres\" (id,genre) VALUES (1,'Horror'),(2,'Thriller');\n",
      "question": "Show horror films and thriller films with a budget of 20 million. Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE (Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\") AND Films.budget = 20000000.0",
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\" AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show both horror and thriller films with a budget of exactly 20 million, or the closest approximation to 20 million in one table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title\nFROM Films\nWHERE budget = 20000000.0\nAND id IN (\n    SELECT film_id\n    FROM Film_Genre\n    WHERE genre_id IN (1, 2)\n)\nGROUP BY title"
          ]
        },
        {
          "interpretation": "Show horror and thriller films with a budget that rounds to 20 million, excluding any films that are budgeted exactly at 20 million but not rounded in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE g.genre IN ('Horror', 'Thriller')\nAND round(f.budget) = 20000000\nAND f.budget != 20000000"
          ]
        },
        {
          "interpretation": "Show horror and thriller films with a budget that either equals 20 million or is the nearest non-exact match to 20 million in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T3.genre, T1.budget\nFROM Films AS T1\nJOIN Film_Genre AS T2 ON T1.id = T2.film_id\nJOIN Genres AS T3 ON T2.genre_id = T3.id\nWHERE T3.genre IN ('Horror', 'Thriller')\nAND (T1.budget = 20000000 OR T1.budget = (SELECT budget FROM Films WHERE budget < 20000000 ORDER BY budget DESC LIMIT 1) OR T1.budget = (SELECT budget FROM Films WHERE budget > 20000000 ORDER BY budget ASC LIMIT 1))"
          ]
        },
        {
          "interpretation": "Include all horror and thriller films with a budget within a threshold of 20 million, with exact matches listed first in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T1.release_date, T1.director, T1.budget \nFROM Films AS T1 \nJOIN Film_Genre AS T2 ON T1.id = T2.film_id \nJOIN Genres AS T3 ON T2.genre_id = T3.id \nWHERE (T3.genre = 'Horror' OR T3.genre = 'Thriller') AND T1.budget <= 20000000.0 \nORDER BY CASE WHEN T1.budget = 20000000.0 THEN 0 ELSE 1 END, T1.budget DESC"
          ]
        },
        {
          "interpretation": "Show horror and thriller films where the budget approximates 20 million, with exact matches prioritized, in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, f.release_date, f.budget\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE g.genre IN ('Horror', 'Thriller')\nAND (f.budget = 20000000.0 OR f.budget LIKE '20000000.%')\nORDER BY CASE WHEN f.budget = 20000000.0 THEN 0 ELSE 1 END, f.budget"
          ]
        },
        {
          "interpretation": "List all horror and thriller films that have received a budget of 20 million or less but are closest to 20 million in budget in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T1.budget \nFROM Films AS T1 \nJOIN Film_Genre AS T2 ON T1.id = T2.film_id \nJOIN Genres AS T3 ON T2.genre_id = T3.id \nWHERE T3.genre IN ('Horror', 'Thriller') AND T1.budget <= 20000000 \nORDER BY T1.budget DESC"
          ]
        },
        {
          "interpretation": "Show only those horror and thriller films with budgets strictly equal to 20 million in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, f.release_date, f.director, f.budget\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE g.genre IN ('Horror', 'Thriller') AND f.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Show horror and thriller films with a budget that is a multiple of 20 million up to and including 20 million in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, g.genre, f.budget\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE (g.genre = 'Horror' OR g.genre = 'Thriller') AND f.budget <= 20000000 AND f.budget % 20000000 = 0"
          ]
        },
        {
          "interpretation": "Show horror and thriller films with budgets close to but not exceeding 20 million in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title, F.budget, G.genre\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE G.genre IN ('Horror', 'Thriller') AND F.budget <= 20000000"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1111111111111111,
        "f1_score": 0.1818181818181818,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
      "db_dump": "CREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birth_year INTEGER,\n    nationality TEXT\n);\nCREATE TABLE Film_Director(\n    film_id INTEGER,\n    director_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    PRIMARY KEY(film_id, director_id)\n);\nCREATE TABLE Film_Genre(\n    film_id INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(genre_id) REFERENCES Genres(id),\n    PRIMARY KEY(film_id, genre_id)\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_date DATE,\n    director TEXT,\n    budget REAL\n);\nCREATE TABLE Genres(\n    id INTEGER PRIMARY KEY,\n    genre TEXT\n);\n\nINSERT INTO \"Directors\" (id,name,birth_year,nationality) VALUES (1,'Stanley Kubrick',1928,'American'),(2,'David Robert Mitchell',1974,'American'),(3,'Christopher Nolan',1970,'English'),(4,'David Fincher',1962,'American');\nINSERT INTO \"Film_Director\" (film_id,director_id) VALUES (1,1),(2,2),(3,3),(4,4);\nINSERT INTO \"Film_Genre\" (film_id,genre_id) VALUES (1,1),(2,1),(3,2),(4,2);\nINSERT INTO \"Films\" (id,title,release_date,director,budget) VALUES (1,'The Shining','1980-06-22','Stanley Kubrick',20000000.0),(2,'It Follows','2014-03-14','David Robert Mitchell',5000000.0),(3,'Inception','2010-07-16','Christopher Nolan',20000000.0),(4,'Gone Girl','2014-10-03','David Fincher',65000000.0);\nINSERT INTO \"Genres\" (id,genre) VALUES (1,'Horror'),(2,'Thriller');\n",
      "question": "Provide a list of all horror films and also list thriller films with a budget of 20 million. Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\" AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Thriller films with a budget of 20 million and their directors",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, f.director \nFROM Films f \nJOIN Film_Genre fg ON f.id = fg.film_id \nJOIN Genres g ON fg.genre_id = g.id \nWHERE g.genre = 'Thriller' AND f.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their film director IDs",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Films.id, Film_Director.director_id\nFROM Films\nJOIN Film_Director ON Films.id = Film_Director.film_id\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE Genres.genre = 'Thriller' AND Films.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their nationality of directors",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title, D.nationality\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nJOIN Film_Director FD ON F.id = FD.film_id\nJOIN Directors D ON FD.director_id = D.id\nWHERE G.genre = 'Thriller' AND F.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their details",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title, F.release_date, F.director, F.budget\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE G.genre = 'Thriller' AND F.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their birth years of directors",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Films.title, Directors.birth_year\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nJOIN Film_Director ON Films.id = Film_Director.film_id\nJOIN Directors ON Film_Director.director_id = Directors.id\nWHERE Genres.genre = 'Thriller' AND Films.budget = 20000000"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their number of genres",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, COUNT(fg.genre_id) AS number_of_genres\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE g.genre = 'Thriller' AND f.budget >= 20000000\nGROUP BY f.id"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their primary keys",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Films.id, Films.title \nFROM Films \nJOIN Film_Genre ON Films.id = Film_Genre.film_id \nJOIN Genres ON Film_Genre.genre_id = Genres.id \nWHERE Genres.genre = 'Thriller' AND Films.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their genre names",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title, G.genre \nFROM Films F \nJOIN Film_Genre FG ON F.id = FG.film_id \nJOIN Genres G ON FG.genre_id = G.id \nWHERE G.genre = 'Thriller' AND F.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their film IDs",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Films.id, Films.title\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE Genres.genre = 'Thriller' AND Films.budget >= 20000000.0"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their genre IDs",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.id, FG.genre_id\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE G.genre = 'Thriller' AND F.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Thriller films with a budget of 20 million and their release dates",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T1.release_date \nFROM Films AS T1 \nJOIN Film_Genre AS T2 ON T1.id = T2.film_id \nJOIN Genres AS T3 ON T2.genre_id = T3.id \nWHERE T3.genre = 'Thriller' AND T1.budget = 20000000.0"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
      "db_dump": "CREATE TABLE \"Composer\"( `id` INTEGER PRIMARY KEY ,\n    creator TEXT,\n    birth_year INTEGER,\n    death_year INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    director_id INTEGER,\n    FOREIGN KEY (director_id) REFERENCES Director(id)\n);\nCREATE TABLE \"Movie_Elements\"(\n    element_type TEXT ,\n    movie_title TEXT,\n    \"composer_id\" INTEGER,\n    duration INTEGER,\n    FOREIGN KEY (\"composer_id\") REFERENCES Composer(id)\n);\n\nINSERT INTO \"Composer\" (id,creator,birth_year,death_year) VALUES (1,'John Williams',1932,NULL),(2,'Hans Zimmer',1957,NULL),(3,'Danny Elfman',1953,NULL),(4,'Howard Shore',1946,NULL),(5,'Thomas Newman',1955,NULL),(6,'Zack Hemsey',1983,NULL),(7,'Javier Navarrete',1956,NULL);\nINSERT INTO \"Director\" (id,name) VALUES (1,'Christopher Nolan'),(2,'Quentin Tarantino'),(3,'Steven Spielberg'),(4,'Guillermo del Toro'),(5,'Martin Scorsese'),(6,'Ava DuVernay');\nINSERT INTO \"Film\" (id,title,release_date,director_id) VALUES (1,'Inception','2010-07-16',1),(2,'Pulp Fiction','1994-10-14',2),(3,'Schindler\u2019s List','1993-12-15',3),(4,'Pan\u2019s Labyrinth','2006-03-17',4),(5,'The Departed','2006-08-04',5);\nINSERT INTO \"Movie_Elements\" (element_type,movie_title,composer_id,duration) VALUES ('Sound Design','Inception',6,140),('Sound Design','Inception',1,150),('Music Score','Schindler\u2019s List',1,150),('Music Score','Pan\u2019s Labyrinth',7,120),('Music Score','The Departed',4,130);\n",
      "question": "Provide films listed with sound design and also show films where John Williams composed the music score. Show them in one table.",
      "gold_queries": [
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\" AND Composer.creator = \"John Williams\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Films that include sound design and are also associated with John Williams as the music composer",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title FROM Film AS T1 JOIN Movie_Elements AS T2 ON T1.title = T2.movie_title WHERE T2.element_type = 'Sound Design' AND T2.composer_id IN (SELECT id FROM Composer WHERE creator = 'John Williams')"
          ]
        },
        {
          "interpretation": "Films where the composer is John Williams for both sound design and music score",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.title \nFROM Movie_Elements AS T1 \nJOIN Film AS T2 ON T1.movie_title = T2.title \nJOIN Composer AS T3 ON T1.composer_id = T3.id \nWHERE T3.creator = 'John Williams' AND T1.element_type IN ('Sound Design', 'Music Score') \nGROUP BY T2.title \nHAVING COUNT(DISTINCT T1.element_type) = 2"
          ]
        },
        {
          "interpretation": "Films that have sound design and music score by the same or different composers, including John Williams",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT movie_title\nFROM Movie_Elements\nWHERE composer_id = 1 OR element_type IN ('Sound Design', 'Music Score')"
          ]
        },
        {
          "interpretation": "Films that have both sound design and music score composed by John Williams",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT F.title \nFROM Film F \nJOIN Movie_Elements E ON F.title = E.movie_title \nWHERE E.composer_id = 1 AND E.element_type IN ('Sound Design', 'Music Score')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
      "db_dump": "CREATE TABLE \"Composer\"( `id` INTEGER PRIMARY KEY ,\n    creator TEXT,\n    birth_year INTEGER,\n    death_year INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    director_id INTEGER,\n    FOREIGN KEY (director_id) REFERENCES Director(id)\n);\nCREATE TABLE \"Movie_Elements\"(\n    element_type TEXT ,\n    movie_title TEXT,\n    \"composer_id\" INTEGER,\n    duration INTEGER,\n    FOREIGN KEY (\"composer_id\") REFERENCES Composer(id)\n);\n\nINSERT INTO \"Composer\" (id,creator,birth_year,death_year) VALUES (1,'John Williams',1932,NULL),(2,'Hans Zimmer',1957,NULL),(3,'Danny Elfman',1953,NULL),(4,'Howard Shore',1946,NULL),(5,'Thomas Newman',1955,NULL),(6,'Zack Hemsey',1983,NULL),(7,'Javier Navarrete',1956,NULL);\nINSERT INTO \"Director\" (id,name) VALUES (1,'Christopher Nolan'),(2,'Quentin Tarantino'),(3,'Steven Spielberg'),(4,'Guillermo del Toro'),(5,'Martin Scorsese'),(6,'Ava DuVernay');\nINSERT INTO \"Film\" (id,title,release_date,director_id) VALUES (1,'Inception','2010-07-16',1),(2,'Pulp Fiction','1994-10-14',2),(3,'Schindler\u2019s List','1993-12-15',3),(4,'Pan\u2019s Labyrinth','2006-03-17',4),(5,'The Departed','2006-08-04',5);\nINSERT INTO \"Movie_Elements\" (element_type,movie_title,composer_id,duration) VALUES ('Sound Design','Inception',6,140),('Sound Design','Inception',1,150),('Music Score','Schindler\u2019s List',1,150),('Music Score','Pan\u2019s Labyrinth',7,120),('Music Score','The Departed',4,130);\n",
      "question": "Which films are listed with sound design and music score composed by John Williams? Show them in one table.",
      "gold_queries": [
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE (Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\") AND Composer.creator = \"John Williams\"",
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\" AND Composer.creator = \"John Williams\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Which films are listed with sound design and music score, where the music score is composed by John Williams? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.movie_title\nFROM Composer AS T1\nJOIN Movie_Elements AS T2 ON T1.id = T2.composer_id\nWHERE T1.creator = 'John Williams' AND T2.element_type = 'Music Score'\nINTERSECT\nSELECT movie_title\nFROM Movie_Elements\nWHERE element_type = 'Sound Design'"
          ]
        },
        {
          "interpretation": "Which films are listed with sound design, and John Williams is listed in the Movie_Elements table for either sound design or music score? Show them in one table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title \nFROM Film AS T1 \nJOIN Movie_Elements AS T2 ON T1.title = T2.movie_title \nJOIN Composer AS T3 ON T2.composer_id = T3.id \nWHERE (T2.element_type = 'Sound Design' AND T3.creator = 'John Williams') \n   OR (T2.element_type = 'Music Score' AND T3.creator = 'John Williams')"
          ]
        },
        {
          "interpretation": "Which films are listed with sound design and have John Williams listed as either the sound designer or music composer? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.title\nFROM Movie_Elements AS T1\nJOIN Film AS T2 ON T1.movie_title = T2.title\nJOIN Composer AS T3 ON T1.composer_id = T3.id\nWHERE T1.element_type = 'Sound Design' AND T3.creator = 'John Williams'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
      "db_dump": "CREATE TABLE \"Composer\"( `id` INTEGER PRIMARY KEY ,\n    creator TEXT,\n    birth_year INTEGER,\n    death_year INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    director_id INTEGER,\n    FOREIGN KEY (director_id) REFERENCES Director(id)\n);\nCREATE TABLE \"Movie_Elements\"(\n    element_type TEXT ,\n    movie_title TEXT,\n    \"composer_id\" INTEGER,\n    duration INTEGER,\n    FOREIGN KEY (\"composer_id\") REFERENCES Composer(id)\n);\n\nINSERT INTO \"Composer\" (id,creator,birth_year,death_year) VALUES (1,'John Williams',1932,NULL),(2,'Hans Zimmer',1957,NULL),(3,'Danny Elfman',1953,NULL),(4,'Howard Shore',1946,NULL),(5,'Thomas Newman',1955,NULL),(6,'Zack Hemsey',1983,NULL),(7,'Javier Navarrete',1956,NULL);\nINSERT INTO \"Director\" (id,name) VALUES (1,'Christopher Nolan'),(2,'Quentin Tarantino'),(3,'Steven Spielberg'),(4,'Guillermo del Toro'),(5,'Martin Scorsese'),(6,'Ava DuVernay');\nINSERT INTO \"Film\" (id,title,release_date,director_id) VALUES (1,'Inception','2010-07-16',1),(2,'Pulp Fiction','1994-10-14',2),(3,'Schindler\u2019s List','1993-12-15',3),(4,'Pan\u2019s Labyrinth','2006-03-17',4),(5,'The Departed','2006-08-04',5);\nINSERT INTO \"Movie_Elements\" (element_type,movie_title,composer_id,duration) VALUES ('Sound Design','Inception',6,140),('Sound Design','Inception',1,150),('Music Score','Schindler\u2019s List',1,150),('Music Score','Pan\u2019s Labyrinth',7,120),('Music Score','The Departed',4,130);\n",
      "question": "Display the films where John Williams composed the sound design or music score. Show them in one table.",
      "gold_queries": [
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE (Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\") AND Composer.creator = \"John Williams\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display the films where John Williams is credited for either sound design or music composition. Output in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.title \nFROM Movie_Elements AS T1 \nJOIN Film AS T2 ON T1.movie_title = T2.title \nJOIN Composer AS T3 ON T1.composer_id = T3.id \nWHERE T3.creator = 'John Williams' AND (T1.element_type = 'Sound Design' OR T1.element_type = 'Music Score')"
          ]
        },
        {
          "interpretation": "Show the films where John Williams's contribution is either in sound design or music score. Present this data in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ME.movie_title, ME.element_type\nFROM Movie_Elements ME\nJOIN Composer C ON ME.composer_id = C.id\nWHERE C.creator = 'John Williams' AND ME.element_type IN ('Sound Design', 'Music Score')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_accommodation2/attachment_1tab_ref_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Accomodations(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    type TEXT \n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    emailAddress TEXT UNIQUE\n);\nCREATE TABLE Prices(\n    accommodationId INTEGER,\n    price_per_night REAL,\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\nCREATE TABLE Reservations(\n    reservationId INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    accommodationId INTEGER,\n    checkInDate DATE,\n    checkOutDate DATE,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\n\nINSERT INTO \"Accomodations\" (id,name,type) VALUES (1,'Mountain Chalet','Chalet'),(2,'Lakeside Cabin','Cabin'),(3,'River View Lodge','Chalet'),(4,'Forest Hut','Cabin'),(5,'Beach Bungalow','Chalet');\nINSERT INTO \"Guests\" (id,firstName,lastName,emailAddress) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com'),(3,'Michael','Brown','michael.brown@example.com'),(4,'Emily','White','emily.white@example.com'),(5,'David','Black','david.black@example.com');\nINSERT INTO \"Prices\" (accommodationId,price_per_night) VALUES (1,200.0),(1,300.0),(2,200.0),(2,300.0),(3,200.0);\nINSERT INTO \"Reservations\" (reservationId,guestId,accommodationId,checkInDate,checkOutDate,totalCost) VALUES (1,1,1,'2022-10-01','2022-10-07',1200.0),(2,2,1,'2022-10-14','2022-10-21',1800.0),(3,3,2,'2022-10-01','2022-10-07',1600.0),(4,4,2,'2022-10-14','2022-10-21',2000.0),(5,5,3,'2022-10-01','2022-10-07',900.0);\n",
      "question": "Which chalets are 300.0 per night and which cabins are the same price per night? Show them in one table.",
      "gold_queries": [
        "SELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Chalet\" AND Prices.price_per_night = 300.0\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What Chalets cost 300.0 per night and what Cabins cost 300.0 per night, presented together in a single output?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T1.type \nFROM Accomodations AS T1 \nJOIN Prices AS T2 ON T1.id = T2.accommodationId \nWHERE (T1.type = 'Chalet' AND T2.price_per_night = 300.0) \n   OR (T1.type = 'Cabin' AND T2.price_per_night = 300.0)"
          ]
        },
        {
          "interpretation": "List Chalets that cost 300.0 per night and Cabins that cost 300.0 per night, presented in a single table format.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, A.type, P.price_per_night\nFROM Accomodations A\nJOIN Prices P ON A.id = P.accommodationId\nWHERE (A.type = 'Chalet' OR A.type = 'Cabin') AND P.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "What are the Chalet accommodations priced at 300.0 per night and the Cabin accommodations also priced at 300.0 per night, combined into one result set?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT A.name FROM Accomodations A JOIN Prices P ON A.id = P.accommodationId WHERE (A.type = 'Chalet' OR A.type = 'Cabin') AND P.price_per_night = 300.0"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_accommodation2/attachment_1tab_ref_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Accomodations(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    type TEXT \n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    emailAddress TEXT UNIQUE\n);\nCREATE TABLE Prices(\n    accommodationId INTEGER,\n    price_per_night REAL,\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\nCREATE TABLE Reservations(\n    reservationId INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    accommodationId INTEGER,\n    checkInDate DATE,\n    checkOutDate DATE,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\n\nINSERT INTO \"Accomodations\" (id,name,type) VALUES (1,'Mountain Chalet','Chalet'),(2,'Lakeside Cabin','Cabin'),(3,'River View Lodge','Chalet'),(4,'Forest Hut','Cabin'),(5,'Beach Bungalow','Chalet');\nINSERT INTO \"Guests\" (id,firstName,lastName,emailAddress) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com'),(3,'Michael','Brown','michael.brown@example.com'),(4,'Emily','White','emily.white@example.com'),(5,'David','Black','david.black@example.com');\nINSERT INTO \"Prices\" (accommodationId,price_per_night) VALUES (1,200.0),(1,300.0),(2,200.0),(2,300.0),(3,200.0);\nINSERT INTO \"Reservations\" (reservationId,guestId,accommodationId,checkInDate,checkOutDate,totalCost) VALUES (1,1,1,'2022-10-01','2022-10-07',1200.0),(2,2,1,'2022-10-14','2022-10-21',1800.0),(3,3,2,'2022-10-01','2022-10-07',1600.0),(4,4,2,'2022-10-14','2022-10-21',2000.0),(5,5,3,'2022-10-01','2022-10-07',900.0);\n",
      "question": "Show chalets and cabins that are 300.0 per night. Show them in one table.",
      "gold_queries": [
        "SELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Chalet\" AND Prices.price_per_night = 300.0\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0",
        "SELECT Accomodations.name \r\nFROM Accomodations WHERE Accomodations.type = \"Chalet\"\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Unified table showing Chalets and Cabins priced at 300.0 per night.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, A.type \nFROM Accomodations A \nJOIN Prices P ON A.id = P.accommodationId \nWHERE P.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Show Accomodations that are either Chalets or Cabins and have a price_per_night of 300.0, presenting them in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, A.type, P.price_per_night\nFROM Accomodations A\nJOIN Prices P ON A.id = P.accommodationId\nWHERE (A.type = 'Chalet' OR A.type = 'Cabin') AND P.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Display a combined table containing details of Chalets and Cabins that are listed at 300.0 per night.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.id, A.name, A.type, P.price_per_night\nFROM Accomodations A\nJOIN Prices P ON A.id = P.accommodationId\nWHERE P.price_per_night = 300.0 AND A.type IN ('Chalet', 'Cabin')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_accommodation2/attachment_1tab_ref_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Accomodations(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    type TEXT \n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    emailAddress TEXT UNIQUE\n);\nCREATE TABLE Prices(\n    accommodationId INTEGER,\n    price_per_night REAL,\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\nCREATE TABLE Reservations(\n    reservationId INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    accommodationId INTEGER,\n    checkInDate DATE,\n    checkOutDate DATE,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\n\nINSERT INTO \"Accomodations\" (id,name,type) VALUES (1,'Mountain Chalet','Chalet'),(2,'Lakeside Cabin','Cabin'),(3,'River View Lodge','Chalet'),(4,'Forest Hut','Cabin'),(5,'Beach Bungalow','Chalet');\nINSERT INTO \"Guests\" (id,firstName,lastName,emailAddress) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com'),(3,'Michael','Brown','michael.brown@example.com'),(4,'Emily','White','emily.white@example.com'),(5,'David','Black','david.black@example.com');\nINSERT INTO \"Prices\" (accommodationId,price_per_night) VALUES (1,200.0),(1,300.0),(2,200.0),(2,300.0),(3,200.0);\nINSERT INTO \"Reservations\" (reservationId,guestId,accommodationId,checkInDate,checkOutDate,totalCost) VALUES (1,1,1,'2022-10-01','2022-10-07',1200.0),(2,2,1,'2022-10-14','2022-10-21',1800.0),(3,3,2,'2022-10-01','2022-10-07',1600.0),(4,4,2,'2022-10-14','2022-10-21',2000.0),(5,5,3,'2022-10-01','2022-10-07',900.0);\n",
      "question": "Provide a list of all chalets and also provide a list of cabins that are 300.0 per night. Show them in one table.",
      "gold_queries": [
        "SELECT Accomodations.name \r\nFROM Accomodations WHERE Accomodations.type = \"Chalet\"\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all chalets and exclusively list cabins priced at 300.0 per night, combining the results in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, type FROM Accomodations WHERE type = 'Chalet' UNION SELECT T1.name, T1.type FROM Accomodations AS T1 JOIN Prices AS T2 ON T1.id = T2.accommodationId WHERE T1.type = 'Cabin' AND T2.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Provide a list of all chalets and a separate list of cabins with a price of 300.0 per night. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, A.type\nFROM Accomodations A\nJOIN Prices P ON A.id = P.accommodationId\nWHERE (A.type = 'Chalet' AND P.price_per_night = 300.0)\n   OR (A.type = 'Cabin' AND P.price_per_night = 300.0)"
          ]
        },
        {
          "interpretation": "Provide a list of all chalets and mark with an asterisk those cabins that have a price of 300.0 per night. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, CASE WHEN P.price_per_night = 300.0 THEN '*' ELSE '' END as mark\nFROM Accomodations A\nLEFT JOIN Prices P ON A.id = P.accommodationId\nWHERE A.type = 'Chalet' OR (A.type = 'Cabin' AND P.price_per_night = 300.0)\nORDER BY A.name"
          ]
        },
        {
          "interpretation": "Show all chalets and mark cabins that have a 300.0 per night rate, combining the results into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, type, CASE WHEN price_per_night = 300.0 THEN 'Cabin' ELSE type END AS marked_type\nFROM Accomodations\nLEFT JOIN Prices ON Accomodations.id = Prices.accommodationId\nWHERE type = 'Chalet' OR (type = 'Cabin' AND price_per_night = 300.0)"
          ]
        },
        {
          "interpretation": "Show all chalets and only those cabins with a price of 300.0 per night in one table, but separate the categories visually.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Chalets' AS Category, name FROM Accomodations WHERE type = 'Chalet'\nUNION ALL\nSELECT 'Cabin, $300/night' AS Category, name FROM Accomodations WHERE id IN (SELECT accommodationId FROM Prices WHERE price_per_night = 300.0) AND type = 'Cabin'"
          ]
        },
        {
          "interpretation": "List only the amenities that are chalets and show all cabins priced at 300.0 per night in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Accomodations WHERE type = 'Chalet'\nUNION\nSELECT Accomodations.name FROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId WHERE Accomodations.type = 'Cabin' AND Prices.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Provide a list of all chalets and cabins, highlighting cabins with a price of 300.0 per night in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, A.type, P.price_per_night FROM Accomodations A JOIN Prices P ON A.id = P.accommodationId WHERE A.type IN ('Chalet', 'Cabin') AND (A.type = 'Chalet' OR (A.type = 'Cabin' AND P.price_per_night = 300.0))"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
      "db_dump": "CREATE TABLE \"Action_Films\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    genre TEXT,\n    runtime INTEGER,\n    language TEXT,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Actors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender CHAR(1),\n    ethnicity TEXT\n);\nCREATE TABLE Blockbusters (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    boxOffice REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthDate DATE,\n    nationality TEXT\n);\nCREATE TABLE Festivals (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE\n);\nCREATE TABLE Indies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    gross REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Roles (\n    actor_id INTEGER,\n    film_id INTEGER,\n    characterName TEXT,\n    FOREIGN KEY(actor_id) REFERENCES Actors(id),\n    FOREIGN KEY(film_id) REFERENCES \"Action_Films\"(id)\n);\n\nINSERT INTO \"Action_Films\" (id,title,releaseYear,genre,runtime,language,film_festival_id) VALUES (1,'Inception',2010,'Action/Science Fiction',148,'English',1),(2,'The Dark Knight',2008,'Action/Crime',152,'English',2);\nINSERT INTO \"Actors\" (id,name,dateOfBirth,gender,ethnicity) VALUES (1,'Leonardo DiCaprio','1974-11-11','Male','Italian/German/Irish'),(2,'Jennifer Lawrence','1990-08-15','Female','England');\nINSERT INTO \"Blockbusters\" (id,title,releaseYear,director,budget,boxOffice,film_festival_id) VALUES (1,'Avatar',2009,'James Cameron',237.0,2747.0,1),(2,'Titanic',1997,'James Cameron',200.0,2202.0,2);\nINSERT INTO \"Directors\" (id,name,birthDate,nationality) VALUES (1,'Quentin Tarantino','1963-03-27','American'),(2,'Christopher Nolan','1970-07-30','English');\nINSERT INTO \"Festivals\" (id,name) VALUES (1,'Sundance Film Festival'),(2,'Cannes Film Festival');\nINSERT INTO \"Indies\" (id,title,releaseYear,director,budget,gross,film_festival_id) VALUES (1,'Little Miss Sunshine',2006,'Jonathan Dayton',8.0,60.0,1),(2,'Juno',2007,'Jason Reitman',6.0,231.0,2);\nINSERT INTO \"Roles\" (actor_id,film_id,characterName) VALUES (1,1,'Dom Cobb'),(2,1,'Rachel McDougall'),(1,2,'Howard St John'),(2,2,'Harvey Dent');\n",
      "question": "Show all the blockbuster films and only those indie films which played at Sundance film festival. Show them in one table.",
      "gold_queries": [
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display blockbusters and indie films shown at Sundance Film Festival within a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title, B.releaseYear, B.director, B.budget, B.boxOffice, 'Blockbuster' AS film_type\nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT I.title, I.releaseYear, I.director, I.budget, I.gross, 'Indie' AS film_type\nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "List all blockbusters and indie films from the Sundance Film Festival together in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseYear, director, budget, boxOffice \nFROM Blockbusters \nJOIN Festivals ON Blockbusters.film_festival_id = Festivals.id \nWHERE Festivals.name = 'Sundance Film Festival'\nUNION\nSELECT title, releaseYear, director, budget, gross \nFROM Indies \nJOIN Festivals ON Indies.film_festival_id = Festivals.id \nWHERE Festivals.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Display blockbusters and indie films playing at Sundance Film Festival in one listing.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')\nUNION\nSELECT title FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        },
        {
          "interpretation": "Show a combined list of all blockbusters and only those indie films that participated in the Sundance Film Festival.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters UNION SELECT title FROM Indies WHERE film_festival_id = 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
      "db_dump": "CREATE TABLE \"Action_Films\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    genre TEXT,\n    runtime INTEGER,\n    language TEXT,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Actors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender CHAR(1),\n    ethnicity TEXT\n);\nCREATE TABLE Blockbusters (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    boxOffice REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthDate DATE,\n    nationality TEXT\n);\nCREATE TABLE Festivals (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE\n);\nCREATE TABLE Indies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    gross REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Roles (\n    actor_id INTEGER,\n    film_id INTEGER,\n    characterName TEXT,\n    FOREIGN KEY(actor_id) REFERENCES Actors(id),\n    FOREIGN KEY(film_id) REFERENCES \"Action_Films\"(id)\n);\n\nINSERT INTO \"Action_Films\" (id,title,releaseYear,genre,runtime,language,film_festival_id) VALUES (1,'Inception',2010,'Action/Science Fiction',148,'English',1),(2,'The Dark Knight',2008,'Action/Crime',152,'English',2);\nINSERT INTO \"Actors\" (id,name,dateOfBirth,gender,ethnicity) VALUES (1,'Leonardo DiCaprio','1974-11-11','Male','Italian/German/Irish'),(2,'Jennifer Lawrence','1990-08-15','Female','England');\nINSERT INTO \"Blockbusters\" (id,title,releaseYear,director,budget,boxOffice,film_festival_id) VALUES (1,'Avatar',2009,'James Cameron',237.0,2747.0,1),(2,'Titanic',1997,'James Cameron',200.0,2202.0,2);\nINSERT INTO \"Directors\" (id,name,birthDate,nationality) VALUES (1,'Quentin Tarantino','1963-03-27','American'),(2,'Christopher Nolan','1970-07-30','English');\nINSERT INTO \"Festivals\" (id,name) VALUES (1,'Sundance Film Festival'),(2,'Cannes Film Festival');\nINSERT INTO \"Indies\" (id,title,releaseYear,director,budget,gross,film_festival_id) VALUES (1,'Little Miss Sunshine',2006,'Jonathan Dayton',8.0,60.0,1),(2,'Juno',2007,'Jason Reitman',6.0,231.0,2);\nINSERT INTO \"Roles\" (actor_id,film_id,characterName) VALUES (1,1,'Dom Cobb'),(2,1,'Rachel McDougall'),(1,2,'Howard St John'),(2,2,'Harvey Dent');\n",
      "question": "Show blockbusters and indie films where either played at Sundance film festival. Show them in one table.",
      "gold_queries": [
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\"\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show Blockbusters and Indie films in one table, with associated film festival name if played at Sundance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS film_title, B.releaseYear, B.director, 'Blockbuster' AS film_type, F.name AS festival_name\nFROM Blockbusters B\nLEFT JOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT I.title AS film_title, I.releaseYear, I.director, 'Indie' AS film_type, F.name AS festival_name\nFROM Indies I\nLEFT JOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "List Blockbusters and Indie films played at Sundance in one table, with a count of how many films they are.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Blockbusters' AS film_type, COUNT(*) AS film_count\nFROM Blockbusters\nJOIN Festivals ON Blockbusters.film_festival_id = Festivals.id\nWHERE Festivals.name = 'Sundance Film Festival'\nUNION ALL\nSELECT 'Indies' AS film_type, COUNT(*) AS film_count\nFROM Indies\nJOIN Festivals ON Indies.film_festival_id = Festivals.id\nWHERE Festivals.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Show all Blockbusters and Indie films in one table, without filtering by the Sundance Film Festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseYear, director, budget FROM Blockbusters UNION SELECT title, releaseYear, director, budget FROM Indies"
          ]
        },
        {
          "interpretation": "Display Blockbusters and Indie films together in one table, with an additional column for the film festival name, showing all distinct festivals involved.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS filmTitle, B.releaseYear, B.director, B.budget, B.boxOffice, F.name AS festivalName\nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nUNION\nSELECT I.title AS filmTitle, I.releaseYear, I.director, I.budget, I.gross AS boxOffice, F.name AS festivalName\nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id"
          ]
        },
        {
          "interpretation": "List Blockbusters and Indie films separately in one table, with a column indicating if each was played at Sundance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, 'Blockbuster' AS type, CASE WHEN T4.name = 'Sundance Film Festival' THEN 'Yes' ELSE 'No' END AS sundance\nFROM Blockbusters AS T1\nLEFT JOIN Festivals AS T4 ON T1.film_festival_id = T4.id",
            "SELECT title, 'Indie' AS type, CASE WHEN T5.name = 'Sundance Film Festival' THEN 'Yes' ELSE 'No' END AS sundance\nFROM Indies AS T3\nLEFT JOIN Festivals AS T5 ON T3.film_festival_id = T5.id"
          ]
        },
        {
          "interpretation": "List Blockbusters and Indie films separately in one table, with a column indicating if each was played at Sundance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, 'Blockbuster' AS type, CASE WHEN T4.name = 'Sundance Film Festival' THEN 'Yes' ELSE 'No' END AS sundance\nFROM Blockbusters AS T1\nLEFT JOIN Festivals AS T4 ON T1.film_festival_id = T4.id",
            "SELECT title, 'Indie' AS type, CASE WHEN T5.name = 'Sundance Film Festival' THEN 'Yes' ELSE 'No' END AS sundance\nFROM Indies AS T3\nLEFT JOIN Festivals AS T5 ON T3.film_festival_id = T5.id"
          ]
        },
        {
          "interpretation": "Show both Blockbusters and Indie films in one table, if they were played at the Sundance Film Festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS film_title, 'Blockbuster' AS film_type\nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT I.title AS film_title, 'Indie' AS film_type\nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Show Blockbusters and Indie films where any associated character was played at the Sundance Film Festival.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT B.title FROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nJOIN Roles R ON B.id = R.film_id\nWHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT I.title FROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nJOIN Roles R ON I.id = R.film_id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Show Blockbusters and Indie films in one table, filtered by those played at either the Sundance or Cannes Film Festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseYear, director, budget, boxOffice FROM Blockbusters WHERE film_festival_id IN (1, 2)\nUNION\nSELECT title, releaseYear, director, budget, gross FROM Indies WHERE film_festival_id IN (1, 2)"
          ]
        },
        {
          "interpretation": "Show only Blockbusters that were played at the Sundance Film Festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title, B.releaseYear, B.director, B.budget, B.boxOffice\nFROM Blockbusters AS B\nJOIN Festivals AS F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1,
        "f1_score": 0.18181818181818182,
        "num_queries": 12,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_film_production_role/attachment_2tab_val_film_production_role.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Roles INT);\nCREATE TABLE Cinematographers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Films_Cinematographed INT);\nCREATE TABLE Directors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Movies_Directed INT);\nCREATE TABLE Editors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\nCREATE TABLE Producers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Productions INT);\nCREATE TABLE Screenwriters(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\n\nINSERT INTO \"Actors\" (ID,Name,Age,Country,Number_Of_Roles) VALUES (1,'Leonardo DiCaprio',45,'USA',15),(2,'Keanu Reeves',55,'Canada',20),(3,'Denzel Washington',65,'USA',10),(4,'Will Smith',50,'USA',7),(5,'Tom Cruise',55,'USA',15),(6,'Mark Wahlberg',48,'USA',25),(7,'Scarlett Johansson',35,'USA',18),(8,'Natalie Portman',40,'Israel',12),(9,'Idris Elba',48,'UK',15),(10,'Viola Davis',55,'USA',20);\nINSERT INTO \"Cinematographers\" (ID,Name,Age,Country,Number_Of_Films_Cinematographed) VALUES (1,'Roger Deakins',75,'USA',15),(2,'Janusz Kaminski',65,'Poland',20),(3,'Wally Pfister',60,'USA',10),(4,'Eric Alan Edwards',55,'USA',7),(5,'Phedon Papamichael',50,'Greece',15),(6,'Mihai Malaimare Jr.',45,'Romania',25),(7,'Roberto Schaefer',55,'Switzerland',18),(8,'Rodrigo Prieto',50,'Mexico',12),(9,'Simon Duggan',48,'Australia',15),(10,'Stuart Dryburgh',60,'New Zealand',20);\nINSERT INTO \"Directors\" (ID,Name,Age,Country,Number_Of_Movies_Directed) VALUES (1,'Tom Hanks',65,'USA',15),(2,'Steven Spielberg',75,'USA',20),(3,'Christopher Nolan',50,'UK',10),(4,'Quentin Tarantino',60,'USA',7),(5,'Martin Scorsese',80,'USA',15),(6,'Clint Eastwood',90,'USA',25),(7,'Ang Lee',65,'Taiwan',18),(8,'Ava DuVernay',50,'USA',12),(9,'Guillermo del Toro',55,'Mexico',15),(10,'Kathryn Bigelow',70,'USA',20);\nINSERT INTO \"Editors\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'Thelma Schoonmaker',75,'USA',15),(2,'Lee Smith',65,'England',20),(3,'Paul Hirsch',68,'USA',10),(4,'Anne V. Coates',90,'England',7),(5,'James Cameron',65,'Canada',15),(6,'Conrad Buff IV',55,'USA',25),(7,'Stephen Mirrione',50,'USA',18),(8,'Tim Squyres',48,'USA',12),(9,'Jeffrey Ford AICE',55,'USA',15),(10,'Tom Cross',40,'USA',20);\nINSERT INTO \"Producers\" (ID,Name,Age,Country,Number_Of_Productions) VALUES (1,'Harvey Weinstein',65,'USA',15),(2,'Jack Nicholson',75,'USA',20),(3,'Barbra Streisand',75,'USA',10),(4,'George Clooney',55,'USA',7),(5,'Steve Martin',75,'USA',15),(6,'Oprah Winfrey',65,'USA',25),(7,'Robert De Niro',75,'USA',18),(8,'Julia Roberts',50,'USA',12),(9,'Morgan Freeman',65,'USA',15),(10,'Drew Barrymore',45,'USA',20);\nINSERT INTO \"Screenwriters\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'John Doe',30,'USA',15),(2,'Jane Smith',28,'UK',20),(3,'Alice Johnson',35,'Canada',10),(4,'Bob Brown',40,'Australia',7),(5,'Charlie Green',32,'Germany',15),(6,'David White',29,'France',25),(7,'Emma Black',31,'Italy',18),(8,'Fred Grey',37,'Spain',12),(9,'Grace Blue',27,'Japan',15),(10,'Hannah Red',33,'India',20);\n",
      "question": "Show all screenwriters and editors with 15 completed projects. Show them in one table.",
      "gold_queries": [
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nWHERE Screenwriters.Number_Of_Projects_Completed = 15\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15",
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Identify screenwriters and editors with exactly 15 completed projects, but display the results in two separate tables, one for screenwriters and one for editors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15",
            "SELECT Name, Country, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Identify screenwriters and editors with exactly 15 completed projects, but display the results in two separate tables, one for screenwriters and one for editors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15",
            "SELECT Name, Country, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "List all screenwriters and editors with 15 completed projects together in one table, but separate them by role, with screenwriters appearing first followed by editors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Screenwriter' AS Role, Name, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION ALL\nSELECT 'Editor' AS Role, Name, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Display a combined table with both screenwriters and editors who have completed 15 projects, but only show their names and the number of projects, without additional columns for their age, country, and other details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15 UNION SELECT Name, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Show all screenwriters and editors with 15 completed projects in a single table, combining both sets of data into one row for each individual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Age, Country, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Show only the screenwriters with 15 completed projects and list their names, followed by the editors with 15 completed projects, listed separately.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Number_Of_Projects_Completed = 15",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Show only the screenwriters with 15 completed projects and list their names, followed by the editors with 15 completed projects, listed separately.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Number_Of_Projects_Completed = 15",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_film_production_role/attachment_2tab_val_film_production_role.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Roles INT);\nCREATE TABLE Cinematographers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Films_Cinematographed INT);\nCREATE TABLE Directors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Movies_Directed INT);\nCREATE TABLE Editors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\nCREATE TABLE Producers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Productions INT);\nCREATE TABLE Screenwriters(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\n\nINSERT INTO \"Actors\" (ID,Name,Age,Country,Number_Of_Roles) VALUES (1,'Leonardo DiCaprio',45,'USA',15),(2,'Keanu Reeves',55,'Canada',20),(3,'Denzel Washington',65,'USA',10),(4,'Will Smith',50,'USA',7),(5,'Tom Cruise',55,'USA',15),(6,'Mark Wahlberg',48,'USA',25),(7,'Scarlett Johansson',35,'USA',18),(8,'Natalie Portman',40,'Israel',12),(9,'Idris Elba',48,'UK',15),(10,'Viola Davis',55,'USA',20);\nINSERT INTO \"Cinematographers\" (ID,Name,Age,Country,Number_Of_Films_Cinematographed) VALUES (1,'Roger Deakins',75,'USA',15),(2,'Janusz Kaminski',65,'Poland',20),(3,'Wally Pfister',60,'USA',10),(4,'Eric Alan Edwards',55,'USA',7),(5,'Phedon Papamichael',50,'Greece',15),(6,'Mihai Malaimare Jr.',45,'Romania',25),(7,'Roberto Schaefer',55,'Switzerland',18),(8,'Rodrigo Prieto',50,'Mexico',12),(9,'Simon Duggan',48,'Australia',15),(10,'Stuart Dryburgh',60,'New Zealand',20);\nINSERT INTO \"Directors\" (ID,Name,Age,Country,Number_Of_Movies_Directed) VALUES (1,'Tom Hanks',65,'USA',15),(2,'Steven Spielberg',75,'USA',20),(3,'Christopher Nolan',50,'UK',10),(4,'Quentin Tarantino',60,'USA',7),(5,'Martin Scorsese',80,'USA',15),(6,'Clint Eastwood',90,'USA',25),(7,'Ang Lee',65,'Taiwan',18),(8,'Ava DuVernay',50,'USA',12),(9,'Guillermo del Toro',55,'Mexico',15),(10,'Kathryn Bigelow',70,'USA',20);\nINSERT INTO \"Editors\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'Thelma Schoonmaker',75,'USA',15),(2,'Lee Smith',65,'England',20),(3,'Paul Hirsch',68,'USA',10),(4,'Anne V. Coates',90,'England',7),(5,'James Cameron',65,'Canada',15),(6,'Conrad Buff IV',55,'USA',25),(7,'Stephen Mirrione',50,'USA',18),(8,'Tim Squyres',48,'USA',12),(9,'Jeffrey Ford AICE',55,'USA',15),(10,'Tom Cross',40,'USA',20);\nINSERT INTO \"Producers\" (ID,Name,Age,Country,Number_Of_Productions) VALUES (1,'Harvey Weinstein',65,'USA',15),(2,'Jack Nicholson',75,'USA',20),(3,'Barbra Streisand',75,'USA',10),(4,'George Clooney',55,'USA',7),(5,'Steve Martin',75,'USA',15),(6,'Oprah Winfrey',65,'USA',25),(7,'Robert De Niro',75,'USA',18),(8,'Julia Roberts',50,'USA',12),(9,'Morgan Freeman',65,'USA',15),(10,'Drew Barrymore',45,'USA',20);\nINSERT INTO \"Screenwriters\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'John Doe',30,'USA',15),(2,'Jane Smith',28,'UK',20),(3,'Alice Johnson',35,'Canada',10),(4,'Bob Brown',40,'Australia',7),(5,'Charlie Green',32,'Germany',15),(6,'David White',29,'France',25),(7,'Emma Black',31,'Italy',18),(8,'Fred Grey',37,'Spain',12),(9,'Grace Blue',27,'Japan',15),(10,'Hannah Red',33,'India',20);\n",
      "question": "Provide a list of all screenwriters combined with a list of editors with 15 completed projects. Show them in one table.",
      "gold_queries": [
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Screenwriters and editors with 15 or more completed projects combined in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Number_Of_Projects_Completed AS Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed >= 15\nUNION\nSELECT Name, Age, Number_Of_Projects_Completed AS Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed >= 15"
          ]
        },
        {
          "interpretation": "Screenwriters and editors with 15 completed projects each in a single row combined in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Number_Of_Projects_Completed = 15 UNION SELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "A table showing screenwriters alongside editors who have completed 15 projects, side by side",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.Name AS Screenwriter, e.Name AS Editor \nFROM Screenwriters s, Editors e \nWHERE e.Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Screenwriters with 15 projects next to editors with 15 projects in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Number_Of_Projects_Completed\nFROM Editors\nWHERE Number_Of_Projects_Completed = 15",
            "SELECT Name, Number_Of_Projects_Completed\nFROM Screenwriters\nWHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Screenwriters with 15 projects next to editors with 15 projects in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Number_Of_Projects_Completed\nFROM Editors\nWHERE Number_Of_Projects_Completed = 15",
            "SELECT Name, Number_Of_Projects_Completed\nFROM Screenwriters\nWHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Screenwriters and editors, highlighting those with exactly 15 completed projects, listed in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed AS Projects_Completed, 'Screenwriter' AS Profession\nFROM Screenwriters\nWHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Age, Country, Number_Of_Projects_Completed AS Projects_Completed, 'Editor' AS Profession\nFROM Editors\nWHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Screenwriters and editors with a count of 15 completed projects in a single row",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    (SELECT Name FROM Screenwriters WHERE Number_Of_Projects_Completed = 15) AS Screenwriter,\n    (SELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15) AS Editor"
          ]
        },
        {
          "interpretation": "Screenwriters and editors with precisely 15 completed projects each in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Age, Country, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "A list of all screenwriters side by side with a list of editors who have completed exactly 15 projects",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters UNION SELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "f1_score": 0.19999999999999998,
        "num_queries": 11,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_film_production_role/attachment_2tab_val_film_production_role.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Roles INT);\nCREATE TABLE Cinematographers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Films_Cinematographed INT);\nCREATE TABLE Directors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Movies_Directed INT);\nCREATE TABLE Editors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\nCREATE TABLE Producers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Productions INT);\nCREATE TABLE Screenwriters(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\n\nINSERT INTO \"Actors\" (ID,Name,Age,Country,Number_Of_Roles) VALUES (1,'Leonardo DiCaprio',45,'USA',15),(2,'Keanu Reeves',55,'Canada',20),(3,'Denzel Washington',65,'USA',10),(4,'Will Smith',50,'USA',7),(5,'Tom Cruise',55,'USA',15),(6,'Mark Wahlberg',48,'USA',25),(7,'Scarlett Johansson',35,'USA',18),(8,'Natalie Portman',40,'Israel',12),(9,'Idris Elba',48,'UK',15),(10,'Viola Davis',55,'USA',20);\nINSERT INTO \"Cinematographers\" (ID,Name,Age,Country,Number_Of_Films_Cinematographed) VALUES (1,'Roger Deakins',75,'USA',15),(2,'Janusz Kaminski',65,'Poland',20),(3,'Wally Pfister',60,'USA',10),(4,'Eric Alan Edwards',55,'USA',7),(5,'Phedon Papamichael',50,'Greece',15),(6,'Mihai Malaimare Jr.',45,'Romania',25),(7,'Roberto Schaefer',55,'Switzerland',18),(8,'Rodrigo Prieto',50,'Mexico',12),(9,'Simon Duggan',48,'Australia',15),(10,'Stuart Dryburgh',60,'New Zealand',20);\nINSERT INTO \"Directors\" (ID,Name,Age,Country,Number_Of_Movies_Directed) VALUES (1,'Tom Hanks',65,'USA',15),(2,'Steven Spielberg',75,'USA',20),(3,'Christopher Nolan',50,'UK',10),(4,'Quentin Tarantino',60,'USA',7),(5,'Martin Scorsese',80,'USA',15),(6,'Clint Eastwood',90,'USA',25),(7,'Ang Lee',65,'Taiwan',18),(8,'Ava DuVernay',50,'USA',12),(9,'Guillermo del Toro',55,'Mexico',15),(10,'Kathryn Bigelow',70,'USA',20);\nINSERT INTO \"Editors\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'Thelma Schoonmaker',75,'USA',15),(2,'Lee Smith',65,'England',20),(3,'Paul Hirsch',68,'USA',10),(4,'Anne V. Coates',90,'England',7),(5,'James Cameron',65,'Canada',15),(6,'Conrad Buff IV',55,'USA',25),(7,'Stephen Mirrione',50,'USA',18),(8,'Tim Squyres',48,'USA',12),(9,'Jeffrey Ford AICE',55,'USA',15),(10,'Tom Cross',40,'USA',20);\nINSERT INTO \"Producers\" (ID,Name,Age,Country,Number_Of_Productions) VALUES (1,'Harvey Weinstein',65,'USA',15),(2,'Jack Nicholson',75,'USA',20),(3,'Barbra Streisand',75,'USA',10),(4,'George Clooney',55,'USA',7),(5,'Steve Martin',75,'USA',15),(6,'Oprah Winfrey',65,'USA',25),(7,'Robert De Niro',75,'USA',18),(8,'Julia Roberts',50,'USA',12),(9,'Morgan Freeman',65,'USA',15),(10,'Drew Barrymore',45,'USA',20);\nINSERT INTO \"Screenwriters\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'John Doe',30,'USA',15),(2,'Jane Smith',28,'UK',20),(3,'Alice Johnson',35,'Canada',10),(4,'Bob Brown',40,'Australia',7),(5,'Charlie Green',32,'Germany',15),(6,'David White',29,'France',25),(7,'Emma Black',31,'Italy',18),(8,'Fred Grey',37,'Spain',12),(9,'Grace Blue',27,'Japan',15),(10,'Hannah Red',33,'India',20);\n",
      "question": "Which screenwriters have 15 completed projects and which editors have the same number of completed projects? Show them in one table.",
      "gold_queries": [
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nWHERE Screenwriters.Number_Of_Projects_Completed = 15\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Those screenwriters who have completed 15 projects, along with editors who have completed the same number of projects, listed in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Screenwriters and editors, each with 15 completed projects, shown in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Number_Of_Projects_Completed AS Number_Of_Completed_Projects FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Number_Of_Projects_Completed AS Number_Of_Completed_Projects FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Screenwriters who have completed 15 projects and editors who have also completed 15 projects, presented in an integrated table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Country FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Screenwriters with 15 completed projects and editors with a specific number of completed projects which matches that of the screenwriters, listed in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed AS Number_Of_Projects\nFROM Screenwriters\nWHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Age, Country, Number_Of_Projects_Completed\nFROM Editors\nWHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Screenwriters and editors who have completed exactly 15 projects, displayed in a combined table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed AS Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 115\nUNION\nSELECT Name, Age, Country, Number_Of_Projects_Completed AS Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 115"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
      "db_dump": "CREATE TABLE \"Action_Films\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    genre TEXT,\n    runtime INTEGER,\n    language TEXT,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Actors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender CHAR(1),\n    ethnicity TEXT\n);\nCREATE TABLE Blockbusters (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    boxOffice REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthDate DATE,\n    nationality TEXT\n);\nCREATE TABLE Festivals (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE\n);\nCREATE TABLE Indies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    gross REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Roles (\n    actor_id INTEGER,\n    film_id INTEGER,\n    characterName TEXT,\n    FOREIGN KEY(actor_id) REFERENCES Actors(id),\n    FOREIGN KEY(film_id) REFERENCES \"Action_Films\"(id)\n);\n\nINSERT INTO \"Action_Films\" (id,title,releaseYear,genre,runtime,language,film_festival_id) VALUES (1,'Inception',2010,'Action/Science Fiction',148,'English',1),(2,'The Dark Knight',2008,'Action/Crime',152,'English',2);\nINSERT INTO \"Actors\" (id,name,dateOfBirth,gender,ethnicity) VALUES (1,'Leonardo DiCaprio','1974-11-11','Male','Italian/German/Irish'),(2,'Jennifer Lawrence','1990-08-15','Female','England');\nINSERT INTO \"Blockbusters\" (id,title,releaseYear,director,budget,boxOffice,film_festival_id) VALUES (1,'Avatar',2009,'James Cameron',237.0,2747.0,1),(2,'Titanic',1997,'James Cameron',200.0,2202.0,2);\nINSERT INTO \"Directors\" (id,name,birthDate,nationality) VALUES (1,'Quentin Tarantino','1963-03-27','American'),(2,'Christopher Nolan','1970-07-30','English');\nINSERT INTO \"Festivals\" (id,name) VALUES (1,'Sundance Film Festival'),(2,'Cannes Film Festival');\nINSERT INTO \"Indies\" (id,title,releaseYear,director,budget,gross,film_festival_id) VALUES (1,'Little Miss Sunshine',2006,'Jonathan Dayton',8.0,60.0,1),(2,'Juno',2007,'Jason Reitman',6.0,231.0,2);\nINSERT INTO \"Roles\" (actor_id,film_id,characterName) VALUES (1,1,'Dom Cobb'),(2,1,'Rachel McDougall'),(1,2,'Howard St John'),(2,2,'Harvey Dent');\n",
      "question": "List blockbusters and indie films which played at Sundance film festival. Show them in one table.",
      "gold_queries": [
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\"\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\"",
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List blockbusters and indie films separately that played at the Sundance Film Festival in two separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.title, I.releaseYear, I.director, I.budget, I.gross\nFROM Indies I\nINNER JOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'",
            "SELECT B.title, B.releaseYear, B.director, B.budget, B.boxOffice\nFROM Blockbusters B\nINNER JOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "List blockbusters and indie films separately that played at the Sundance Film Festival in two separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.title, I.releaseYear, I.director, I.budget, I.gross\nFROM Indies I\nINNER JOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'",
            "SELECT B.title, B.releaseYear, B.director, B.budget, B.boxOffice\nFROM Blockbusters B\nINNER JOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Provide a list of films that are either blockbusters or indie films, which were presented at the Sundance Film Festival, combining them in one table and clearly indicating each film's category.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, 'Blockbuster' AS category\nFROM Blockbusters\nWHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')\nUNION\nSELECT title, 'Indie' AS category\nFROM Indies\nWHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        },
        {
          "interpretation": "List films that are both blockbusters and indie films, if any, played at the Sundance Film Festival, in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title, B.releaseYear, B.director, B.budget, B.boxOffice, I.gross\nFROM Blockbusters B\nJOIN Indies I ON B.title = I.title\nJOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Show a combined list of blockbusters and indie films from the Sundance Film Festival, but exclude any film that is both a blockbuster and an indie film from the same listing.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival') EXCEPT SELECT title FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival') UNION SELECT title FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival') EXCEPT SELECT title FROM Blockbusters WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        },
        {
          "interpretation": "List blockbusters and indie films together that played at the Sundance Film Festival, distinguishing them by type in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Blockbuster' AS type, B.title, B.releaseYear, B.director, B.budget, B.boxOffice\nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT 'Indie' AS type, I.title, I.releaseYear, I.director, I.budget, I.gross\nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Display blockbusters and indie films, if any overlap exists, that played at the Sundance Film Festival in a single table, indicating overlap if present.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS Blockbuster, I.title AS Indie, CASE WHEN B.film_festival_id = I.film_festival_id THEN 'Overlap' ELSE 'No Overlap' END AS overlap_status\nFROM Blockbusters B\nFULL OUTER JOIN Indies I ON B.film_festival_id = I.film_festival_id\nJOIN Festivals F ON B.film_festival_id = F.id OR I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "List blockbusters that played at the Sundance Film Festival and indie films that played at the Sundance Film Festival in separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')",
            "SELECT title FROM Blockbusters WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    education TEXT,\n    experience_years INT);\nCREATE TABLE Construction_Workers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    work_experience INT,\n    salary REAL);\nCREATE TABLE Electricians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    certifications TEXT,\n    hourly_rate REAL);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    industry TEXT,\n    years_in_industry INT);\nCREATE TABLE Marketing_Managers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    marketing_strategy TEXT,\n    campaign_successes TEXT);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    programming_language TEXT,\n    years_of_experience INT);\n\nINSERT INTO \"Accountants\" (id,name,company_name,education,experience_years) VALUES (1,'Jennifer Lawrence','FinanceGroup','BBA',6),(2,'Scarlett Johansson','AccountingFirm','MAcc',7);\nINSERT INTO \"Construction_Workers\" (id,name,company_owner,work_experience,salary) VALUES (1,'John Doe','Derek Brown',7,30000.0),(2,'Jane Smith','Michael Johnson',5,28000.0),(3,'Robert White','Emily Davis',6,29000.0);\nINSERT INTO \"Electricians\" (id,name,company_owner,certifications,hourly_rate) VALUES (1,'Tom Anderson','Derek Brown','A, B, C',25.0),(2,'Erica Thompson','Samantha Taylor','X, Y, Z',27.0);\nINSERT INTO \"HR_Specialists\" (id,name,company_name,industry,years_in_industry) VALUES (1,'Chris Hemsworth','HumanResources','HR',8),(2,'Mark Ruffalo','RecruitmentAgencies','IT',10);\nINSERT INTO \"Marketing_Managers\" (id,name,company_name,marketing_strategy,campaign_successes) VALUES (1,'Ryan Reynolds','AdvertisingAgency','Content Marketing','Product Launch A'),(2,'Ben Affleck','BrandConsultancy','SEO','Website Traffic Increase');\nINSERT INTO \"Software_Engineers\" (id,name,company_name,programming_language,years_of_experience) VALUES (1,'Chris Evans','TechCorp','Python',4),(2,'Olivia Wilde','SoftwareInc','JavaScript',3),(3,'Gal Gadot','CodingCo','C++',5);\n",
      "question": "Show all employees of Derek Brown from the construction workers and electricians. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nWHERE Construction_Workers.company_owner = \"Derek Brown\"\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine the results of construction workers and electricians into one table and filter out those not employed by Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience, salary FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, company_owner, certifications AS work_experience, hourly_rate AS salary FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Show all construction workers from Derek Brown and all electricians from Derek Brown in a single table without distinct separation.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience, salary AS rate FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, company_owner, NULL AS work_experience, hourly_rate AS rate FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Show only the electricians of Derek Brown in one table, excluding construction workers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, certifications, hourly_rate\nFROM Electricians\nWHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Combine all construction workers and electricians in one table, but separately list those who belong to Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, 'Construction_Worker' AS profession FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, company_owner, 'Electrician' AS profession FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Show all employees of Derek Brown from the construction workers table and list them alongside the electricians who work for Derek Brown in a single output.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Display a merged list of construction workers and electricians, showing those associated with Derek Brown, while separating them by job type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Construction Worker' AS job_type, name, company_owner, work_experience, salary \nFROM Construction_Workers \nWHERE company_owner = 'Derek Brown'\nUNION ALL\nSELECT 'Electrician' AS job_type, name, company_owner, certifications AS additional_info, hourly_rate AS salary \nFROM Electricians \nWHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Show only the construction workers of Derek Brown in one table, excluding electricians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience, salary\nFROM Construction_Workers\nWHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Display a single table containing both construction workers and electricians who work for Derek Brown, without distinguishing between the two job types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, company_owner FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    education TEXT,\n    experience_years INT);\nCREATE TABLE Construction_Workers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    work_experience INT,\n    salary REAL);\nCREATE TABLE Electricians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    certifications TEXT,\n    hourly_rate REAL);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    industry TEXT,\n    years_in_industry INT);\nCREATE TABLE Marketing_Managers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    marketing_strategy TEXT,\n    campaign_successes TEXT);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    programming_language TEXT,\n    years_of_experience INT);\n\nINSERT INTO \"Accountants\" (id,name,company_name,education,experience_years) VALUES (1,'Jennifer Lawrence','FinanceGroup','BBA',6),(2,'Scarlett Johansson','AccountingFirm','MAcc',7);\nINSERT INTO \"Construction_Workers\" (id,name,company_owner,work_experience,salary) VALUES (1,'John Doe','Derek Brown',7,30000.0),(2,'Jane Smith','Michael Johnson',5,28000.0),(3,'Robert White','Emily Davis',6,29000.0);\nINSERT INTO \"Electricians\" (id,name,company_owner,certifications,hourly_rate) VALUES (1,'Tom Anderson','Derek Brown','A, B, C',25.0),(2,'Erica Thompson','Samantha Taylor','X, Y, Z',27.0);\nINSERT INTO \"HR_Specialists\" (id,name,company_name,industry,years_in_industry) VALUES (1,'Chris Hemsworth','HumanResources','HR',8),(2,'Mark Ruffalo','RecruitmentAgencies','IT',10);\nINSERT INTO \"Marketing_Managers\" (id,name,company_name,marketing_strategy,campaign_successes) VALUES (1,'Ryan Reynolds','AdvertisingAgency','Content Marketing','Product Launch A'),(2,'Ben Affleck','BrandConsultancy','SEO','Website Traffic Increase');\nINSERT INTO \"Software_Engineers\" (id,name,company_name,programming_language,years_of_experience) VALUES (1,'Chris Evans','TechCorp','Python',4),(2,'Olivia Wilde','SoftwareInc','JavaScript',3),(3,'Gal Gadot','CodingCo','C++',5);\n",
      "question": "Show me all the construction workers listed and also just those electricians who work for Derek Brown. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display construction workers and electricians affiliated with Derek Brown in the same result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Combine construction workers with electricians who are under Derek Brown and show in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience, salary FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, company_owner, certifications AS work_experience, hourly_rate AS salary FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Show all construction workers and electricians working for Derek Brown in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, 'Construction_Workers' AS job_type FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, 'Electricians' AS job_type FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Show construction workers and list only the electricians employed by Derek Brown in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience, salary FROM Construction_Workers\nUNION\nSELECT name, company_owner, certifications AS work_experience, hourly_rate AS salary FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Show a combined list of all construction workers and electricians working for Derek Brown in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, work_experience FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, certifications FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "List all construction workers and include electricians who are associated with Derek Brown in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience AS experience, salary, 'Construction Worker' AS profession FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, company_owner, NULL AS experience, hourly_rate, 'Electrician' AS profession FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    education TEXT,\n    experience_years INT);\nCREATE TABLE Construction_Workers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    work_experience INT,\n    salary REAL);\nCREATE TABLE Electricians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    certifications TEXT,\n    hourly_rate REAL);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    industry TEXT,\n    years_in_industry INT);\nCREATE TABLE Marketing_Managers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    marketing_strategy TEXT,\n    campaign_successes TEXT);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    programming_language TEXT,\n    years_of_experience INT);\n\nINSERT INTO \"Accountants\" (id,name,company_name,education,experience_years) VALUES (1,'Jennifer Lawrence','FinanceGroup','BBA',6),(2,'Scarlett Johansson','AccountingFirm','MAcc',7);\nINSERT INTO \"Construction_Workers\" (id,name,company_owner,work_experience,salary) VALUES (1,'John Doe','Derek Brown',7,30000.0),(2,'Jane Smith','Michael Johnson',5,28000.0),(3,'Robert White','Emily Davis',6,29000.0);\nINSERT INTO \"Electricians\" (id,name,company_owner,certifications,hourly_rate) VALUES (1,'Tom Anderson','Derek Brown','A, B, C',25.0),(2,'Erica Thompson','Samantha Taylor','X, Y, Z',27.0);\nINSERT INTO \"HR_Specialists\" (id,name,company_name,industry,years_in_industry) VALUES (1,'Chris Hemsworth','HumanResources','HR',8),(2,'Mark Ruffalo','RecruitmentAgencies','IT',10);\nINSERT INTO \"Marketing_Managers\" (id,name,company_name,marketing_strategy,campaign_successes) VALUES (1,'Ryan Reynolds','AdvertisingAgency','Content Marketing','Product Launch A'),(2,'Ben Affleck','BrandConsultancy','SEO','Website Traffic Increase');\nINSERT INTO \"Software_Engineers\" (id,name,company_name,programming_language,years_of_experience) VALUES (1,'Chris Evans','TechCorp','Python',4),(2,'Olivia Wilde','SoftwareInc','JavaScript',3),(3,'Gal Gadot','CodingCo','C++',5);\n",
      "question": "Provide all construction workers and electricians who work for Derek Brown. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nWHERE Construction_Workers.company_owner = \"Derek Brown\"\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\"",
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all construction workers and electricians with certifications from Derek Brown in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, salary AS hourly_rate FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, company_owner, hourly_rate FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "List all construction workers and electricians under Derek Brown's ownership in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, 'Construction_Workers' AS occupation FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, 'Electricians' AS occupation FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "List all construction workers and electricians working for Derek Brown in one table",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_events/attachment_1tab_ref_events.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Persons(PersonID));\nCREATE TABLE \"Events\"(\n    EventID INTEGER PRIMARY KEY AUTOINCREMENT, \"EventName\" TEXT,\n    EventType TEXT,\n    Date DATE,\n    Location TEXT,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE MediaScrums(\n    MediaScrumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    StartTime TIME,\n    EndTime TIME,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE Persons(\n    PersonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT UNIQUE);\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,AuthorID) VALUES (1,'Article 1','Content of article 1...',1),(2,'Article 2','Content of article 2...',2),(3,'Article 3','Content of article 3...',3),(4,'Article 4','Content of article 4...',4),(5,'Article 5','Content of article 5...',5);\nINSERT INTO \"Events\" (EventID,EventName,EventType,Date,Location,PersonID) VALUES (1,'New Year Press','Press Conference','2022-01-01','New York',1),(2,'LA Launch','Press Conference','2022-02-01','Los Angeles',2),(3,'Spring Scrum','Media Scrum','2022-03-01','Chicago',1),(4,'Dallas Debate','Media Scrum','2022-04-01','Dallas',3),(5,'Capitol Interview','Interview','2022-05-01','Washington',4);\nINSERT INTO \"MediaScrums\" (MediaScrumID,Description,StartTime,EndTime,PersonID) VALUES (1,'Desc 1','10:00','11:00',1),(2,'Desc 2','12:00','13:00',3),(3,'Desc 3','14:00','15:00',5),(4,'Desc 4','16:00','17:00',2),(5,'Desc 5','18:00','19:00',4);\nINSERT INTO \"Persons\" (PersonID,FullName) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Emily Johnson'),(4,'Michael Brown'),(5,'Cathy Williams');\n",
      "question": "Show press conferences and media scrums attended by John Doe. Show them in one table.",
      "gold_queries": [
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE (Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\") AND Persons.FullName = \"John Doe\"",
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\" AND Persons.FullName = \"John Doe\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Events.EventName, Events.Date, Events.Location, MediaScrums.Description, MediaScrums.StartTime, MediaScrums.EndTime",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Events.EventName, Events.Date, Events.Location, MediaScrums.Description, MediaScrums.StartTime, MediaScrums.EndTime\nFROM Events\nJOIN MediaScrums ON Events.PersonID = MediaScrums.PersonID"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_events/attachment_1tab_ref_events.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Persons(PersonID));\nCREATE TABLE \"Events\"(\n    EventID INTEGER PRIMARY KEY AUTOINCREMENT, \"EventName\" TEXT,\n    EventType TEXT,\n    Date DATE,\n    Location TEXT,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE MediaScrums(\n    MediaScrumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    StartTime TIME,\n    EndTime TIME,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE Persons(\n    PersonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT UNIQUE);\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,AuthorID) VALUES (1,'Article 1','Content of article 1...',1),(2,'Article 2','Content of article 2...',2),(3,'Article 3','Content of article 3...',3),(4,'Article 4','Content of article 4...',4),(5,'Article 5','Content of article 5...',5);\nINSERT INTO \"Events\" (EventID,EventName,EventType,Date,Location,PersonID) VALUES (1,'New Year Press','Press Conference','2022-01-01','New York',1),(2,'LA Launch','Press Conference','2022-02-01','Los Angeles',2),(3,'Spring Scrum','Media Scrum','2022-03-01','Chicago',1),(4,'Dallas Debate','Media Scrum','2022-04-01','Dallas',3),(5,'Capitol Interview','Interview','2022-05-01','Washington',4);\nINSERT INTO \"MediaScrums\" (MediaScrumID,Description,StartTime,EndTime,PersonID) VALUES (1,'Desc 1','10:00','11:00',1),(2,'Desc 2','12:00','13:00',3),(3,'Desc 3','14:00','15:00',5),(4,'Desc 4','16:00','17:00',2),(5,'Desc 5','18:00','19:00',4);\nINSERT INTO \"Persons\" (PersonID,FullName) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Emily Johnson'),(4,'Michael Brown'),(5,'Cathy Williams');\n",
      "question": "List all press conferences and also list media scrums that John Doe attended. Show them in one table.",
      "gold_queries": [
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\" AND Persons.FullName = \"John Doe\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all press conferences and media scrums that John Doe attended in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType FROM Events E JOIN Persons P ON E.PersonID = P.PersonID WHERE P.FullName = 'John Doe' AND (E.EventType = 'Press Conference' OR E.EventType = 'Media Scrum')\nUNION\nSELECT MS.Description, 'Media Scrum' AS EventType FROM MediaScrums MS JOIN Persons P ON MS.PersonID = P.PersonID WHERE P.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "Display a table with all press conferences and include the media scrums that John Doe attended on those dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Date, MS.Description\nFROM Events E\nLEFT JOIN MediaScrums MS ON E.PersonID = MS.PersonID AND E.Date = Date('2022-01-01')\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE E.EventType = 'Press Conference' AND P.FullName = 'John Doe' AND E.Date IN (\n    SELECT Date FROM Events WHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe') AND EventType = 'Press Conference'\n)"
          ]
        },
        {
          "interpretation": "List all press conferences, and include a separate row for each media scrum that John Doe attended on those same dates in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Date, E.Location\nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE E.EventType = 'Press Conference' AND P.FullName = 'John Doe'\nUNION ALL\nSELECT MS.Description, E.Date, E.Location\nFROM MediaScrums MS\nJOIN Events E ON MS.PersonID = E.PersonID AND Date(E.Date) = Date(MS.StartTime)\nJOIN Persons P ON MS.PersonID = P.PersonID\nWHERE E.EventType = 'Press Conference' AND P.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "Show all press conferences, and for any that John Doe attended, additionally list the media scrums he attended, in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType, E.Date, E.Location\nFROM Events E\nWHERE E.EventType = 'Press Conference'\nUNION\nSELECT MS.Description, 'Media Scrum' AS EventType, '' AS Date, '' AS Location\nFROM MediaScrums MS\nJOIN Persons P ON MS.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "Combine all press conferences and media scrums attended by John Doe into one table, with press conferences listed first, followed by the media scrums.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType, E.Date, E.Location \nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType = 'Press Conference'\nUNION ALL\nSELECT M.Description AS EventName, 'Media Scrum' AS EventType, '' AS Date, '' AS Location \nFROM MediaScrums M\nJOIN Persons P ON M.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "List all press conferences and for those that John Doe attended, also include details of the media scrums he attended in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, EventType, Date, Location\nFROM Events\nWHERE EventType = 'Press Conference'\nUNION\nSELECT T1.Description, 'Media Scrum' AS EventType, NULL AS Date, NULL AS Location\nFROM MediaScrums AS T1\nJOIN Persons AS T2 ON T1.PersonID = T2.PersonID\nWHERE T2.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "Display a list of all press conferences and highlight the ones attended by John Doe, and include any related media scrums in the same table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, CASE WHEN P.FullName = 'John Doe' THEN 'Yes' ELSE 'No' END AS AttendedByJohnDoe, M.Description AS MediaScrumDescription\nFROM Events E\nLEFT JOIN Persons P ON E.PersonID = P.PersonID\nLEFT JOIN MediaScrums M ON E.PersonID = M.PersonID\nWHERE E.EventType = 'Press Conference' OR M.Description IS NOT NULL"
          ]
        },
        {
          "interpretation": "List all press conferences, and when John Doe attended them, also list the media scrums he participated in during the same period, in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Date, E.EventType\nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType = 'Press Conference'\nUNION ALL\nSELECT M.Description, M.StartTime AS Date, 'Media Scrum' AS EventType\nFROM MediaScrums M\nJOIN Persons P ON M.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "List all press conferences and media scrums, separately, in one table, where John Doe attended either type of event.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName AS Name, EventType, Date, Location\nFROM Events\nWHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe') AND EventType IN ('Press Conference', 'Media Scrum')"
          ]
        },
        {
          "interpretation": "List press conferences and media scrums attended by John Doe, combining the results into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.EventName, T2.EventType, T2.Date, T2.Location\nFROM Persons AS T1 JOIN Events AS T2 ON T1.PersonID = T2.PersonID\nWHERE T1.FullName = 'John Doe' AND T2.EventType IN ('Press Conference', 'Media Scrum')\nUNION\nSELECT 'Media Scrum' AS EventType, Description AS EventName, StartTime AS Date, EndTime AS Location\nFROM Persons AS T1 JOIN MediaScrums AS T2 ON T1.PersonID = T2.PersonID\nWHERE T1.FullName = 'John Doe'"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_events/attachment_1tab_ref_events.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Persons(PersonID));\nCREATE TABLE \"Events\"(\n    EventID INTEGER PRIMARY KEY AUTOINCREMENT, \"EventName\" TEXT,\n    EventType TEXT,\n    Date DATE,\n    Location TEXT,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE MediaScrums(\n    MediaScrumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    StartTime TIME,\n    EndTime TIME,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE Persons(\n    PersonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT UNIQUE);\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,AuthorID) VALUES (1,'Article 1','Content of article 1...',1),(2,'Article 2','Content of article 2...',2),(3,'Article 3','Content of article 3...',3),(4,'Article 4','Content of article 4...',4),(5,'Article 5','Content of article 5...',5);\nINSERT INTO \"Events\" (EventID,EventName,EventType,Date,Location,PersonID) VALUES (1,'New Year Press','Press Conference','2022-01-01','New York',1),(2,'LA Launch','Press Conference','2022-02-01','Los Angeles',2),(3,'Spring Scrum','Media Scrum','2022-03-01','Chicago',1),(4,'Dallas Debate','Media Scrum','2022-04-01','Dallas',3),(5,'Capitol Interview','Interview','2022-05-01','Washington',4);\nINSERT INTO \"MediaScrums\" (MediaScrumID,Description,StartTime,EndTime,PersonID) VALUES (1,'Desc 1','10:00','11:00',1),(2,'Desc 2','12:00','13:00',3),(3,'Desc 3','14:00','15:00',5),(4,'Desc 4','16:00','17:00',2),(5,'Desc 5','18:00','19:00',4);\nINSERT INTO \"Persons\" (PersonID,FullName) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Emily Johnson'),(4,'Michael Brown'),(5,'Cathy Williams');\n",
      "question": "What press conferences did John Doe attend and what media scrums did he also attend? Show them in one table.",
      "gold_queries": [
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE (Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\") AND Persons.FullName = \"John Doe\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What press conferences did John Doe attend, and which media scrums was he also a part of, shown in one table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType, MS.Description\nFROM Persons P\nLEFT JOIN Events E ON P.PersonID = E.PersonID\nLEFT JOIN MediaScrums MS ON P.PersonID = MS.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType = 'Press Conference' OR P.FullName = 'John Doe' AND MS.MediaScrumID IS NOT NULL"
          ]
        },
        {
          "interpretation": "What press conferences did John Doe attend, and what media scrums did he also join, presented together in one table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName AS Event, 'Press Conference' AS Type FROM Events WHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe') AND EventType = 'Press Conference'\nUNION\nSELECT Description AS Event, 'Media Scrum' AS Type FROM MediaScrums WHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe')"
          ]
        },
        {
          "interpretation": "What press conferences did \"John Doe\" attend, and what media scrums did \"John Doe\" also participate in, shown in a single table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName AS PressConference, M.Description AS MediaScrum\nFROM Events E\nFULL OUTER JOIN MediaScrums M ON E.PersonID = M.PersonID AND E.PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe')\nWHERE E.EventType = 'Press Conference' OR M.Description IS NOT NULL\nAND (E.PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe') OR M.PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe'))"
          ]
        },
        {
          "interpretation": "What press conferences did John Doe attend, and what media scrums did he attend as well, displayed in one result?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, M.Description\nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nLEFT JOIN MediaScrums M ON M.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType = 'Press Conference'\nUNION\nSELECT E.EventName, M.Description\nFROM MediaScrums M\nJOIN Persons P ON M.PersonID = P.PersonID\nLEFT JOIN Events E ON E.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType IS NULL"
          ]
        },
        {
          "interpretation": "What press conferences did John Doe join, and what media scrums did he additionally join, shown in one table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.EventName AS EventName, 'Press Conference' AS EventType\nFROM Events AS T1\nJOIN Persons AS T2 ON T1.PersonID = T2.PersonID\nWHERE T2.FullName = 'John Doe'\nUNION\nSELECT DISTINCT T3.Description AS EventName, 'Media Scrum' AS EventType\nFROM MediaScrums AS T3\nJOIN Persons AS T4 ON T3.PersonID = T4.PersonID\nWHERE T4.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "What press conferences did John Doe attend, and what media scrums did he also take part in, displayed in one table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName AS Event, E.EventType AS Type, E.Date, E.Location\nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType = 'Press Conference'\nUNION\nSELECT M.Description AS Event, 'Media Scrum' AS Type, 'N/A' AS Date, 'N/A' AS Location\nFROM MediaScrums M\nJOIN Persons P ON M.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_news_industry_economics/attachment_2tab_val_news_industry_economics.sqlite",
      "db_dump": "CREATE TABLE \"Advertising\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Advertising_Revenue REAL ,\n    Subscribers INT,\n    Country TEXT, `Type` TEXT);\nCREATE TABLE Articles(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    PublishDate Date,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(ID));\nCREATE TABLE Authors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    Birthdate Date,\n    Nationality Text);\nCREATE TABLE Issues(\n    IssueNumber INT PRIMARY KEY,\n    MagazineID INTEGER,\n    ReleaseDate Date,\n    FOREIGN KEY(MagazineID) REFERENCES Magazines(ID));\nCREATE TABLE Magazines(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Category TEXT,\n    EditorInChief TEXT,\n    PublishingHouse TEXT);\nCREATE TABLE \"Subscriptions\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Subscription_Fees REAL ,\n    NumberOfSubscribers INT,\n    \"Type\" TEXT);\n\nINSERT INTO \"Advertising\" (ID,Magazine,Advertising_Revenue,Subscribers,Country,Type) VALUES (1,'Good Housekeeping',1000000.0,30000,'USA','Social Media Ads'),(2,'Time',800000.0,25000,'UK','Flyers');\nINSERT INTO \"Articles\" (ID,Title,Content,AuthorID,PublishDate) VALUES (1,'The Rise of AI','...',1,'2021-01-01'),(2,'Climate Change Effects','...',2,'2021-02-02');\nINSERT INTO \"Authors\" (ID,Name,Email,Birthdate,Nationality) VALUES (1,'John Doe','john@example.com','1990-01-01','USA'),(2,'Jane Smith','jane@example.com','1985-02-02','Canada');\nINSERT INTO \"Issues\" (IssueNumber,MagazineID,ReleaseDate) VALUES (1,1,'2021-01-01'),(2,1,'2021-02-01');\nINSERT INTO \"Magazines\" (ID,Name,Category,EditorInChief,PublishingHouse) VALUES (1,'Good Housekeeping','Lifestyle','Alice Johnson','Hearst Communications'),(2,'Time','News & Current Affairs','Bob Williams','Time Inc.');\nINSERT INTO \"Subscriptions\" (ID,Magazine,Subscription_Fees,NumberOfSubscribers,Type) VALUES (1,'Good Housekeeping',9.99,27000,'Monthly'),(2,'National Geographic',6.99,20000,'Bi-monthly');\n",
      "question": "Show the advertising and subscription types where either are listed for Good Housekeeping magazine. Show them in one table.",
      "gold_queries": [
        "SELECT Advertising.Type\r\nFROM Advertising\r\nWHERE Advertising.Magazine = \"Good Housekeeping\"\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_news_industry_economics/attachment_2tab_val_news_industry_economics.sqlite",
      "db_dump": "CREATE TABLE \"Advertising\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Advertising_Revenue REAL ,\n    Subscribers INT,\n    Country TEXT, `Type` TEXT);\nCREATE TABLE Articles(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    PublishDate Date,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(ID));\nCREATE TABLE Authors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    Birthdate Date,\n    Nationality Text);\nCREATE TABLE Issues(\n    IssueNumber INT PRIMARY KEY,\n    MagazineID INTEGER,\n    ReleaseDate Date,\n    FOREIGN KEY(MagazineID) REFERENCES Magazines(ID));\nCREATE TABLE Magazines(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Category TEXT,\n    EditorInChief TEXT,\n    PublishingHouse TEXT);\nCREATE TABLE \"Subscriptions\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Subscription_Fees REAL ,\n    NumberOfSubscribers INT,\n    \"Type\" TEXT);\n\nINSERT INTO \"Advertising\" (ID,Magazine,Advertising_Revenue,Subscribers,Country,Type) VALUES (1,'Good Housekeeping',1000000.0,30000,'USA','Social Media Ads'),(2,'Time',800000.0,25000,'UK','Flyers');\nINSERT INTO \"Articles\" (ID,Title,Content,AuthorID,PublishDate) VALUES (1,'The Rise of AI','...',1,'2021-01-01'),(2,'Climate Change Effects','...',2,'2021-02-02');\nINSERT INTO \"Authors\" (ID,Name,Email,Birthdate,Nationality) VALUES (1,'John Doe','john@example.com','1990-01-01','USA'),(2,'Jane Smith','jane@example.com','1985-02-02','Canada');\nINSERT INTO \"Issues\" (IssueNumber,MagazineID,ReleaseDate) VALUES (1,1,'2021-01-01'),(2,1,'2021-02-01');\nINSERT INTO \"Magazines\" (ID,Name,Category,EditorInChief,PublishingHouse) VALUES (1,'Good Housekeeping','Lifestyle','Alice Johnson','Hearst Communications'),(2,'Time','News & Current Affairs','Bob Williams','Time Inc.');\nINSERT INTO \"Subscriptions\" (ID,Magazine,Subscription_Fees,NumberOfSubscribers,Type) VALUES (1,'Good Housekeeping',9.99,27000,'Monthly'),(2,'National Geographic',6.99,20000,'Bi-monthly');\n",
      "question": "Show all the advertising types and also show the subscriptions types but just for Good Housekeeping magazine. Show them in one table.",
      "gold_queries": [
        "SELECT Advertising.Type\r\nFROM Advertising\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_news_industry_economics/attachment_2tab_val_news_industry_economics.sqlite",
      "db_dump": "CREATE TABLE \"Advertising\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Advertising_Revenue REAL ,\n    Subscribers INT,\n    Country TEXT, `Type` TEXT);\nCREATE TABLE Articles(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    PublishDate Date,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(ID));\nCREATE TABLE Authors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    Birthdate Date,\n    Nationality Text);\nCREATE TABLE Issues(\n    IssueNumber INT PRIMARY KEY,\n    MagazineID INTEGER,\n    ReleaseDate Date,\n    FOREIGN KEY(MagazineID) REFERENCES Magazines(ID));\nCREATE TABLE Magazines(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Category TEXT,\n    EditorInChief TEXT,\n    PublishingHouse TEXT);\nCREATE TABLE \"Subscriptions\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Subscription_Fees REAL ,\n    NumberOfSubscribers INT,\n    \"Type\" TEXT);\n\nINSERT INTO \"Advertising\" (ID,Magazine,Advertising_Revenue,Subscribers,Country,Type) VALUES (1,'Good Housekeeping',1000000.0,30000,'USA','Social Media Ads'),(2,'Time',800000.0,25000,'UK','Flyers');\nINSERT INTO \"Articles\" (ID,Title,Content,AuthorID,PublishDate) VALUES (1,'The Rise of AI','...',1,'2021-01-01'),(2,'Climate Change Effects','...',2,'2021-02-02');\nINSERT INTO \"Authors\" (ID,Name,Email,Birthdate,Nationality) VALUES (1,'John Doe','john@example.com','1990-01-01','USA'),(2,'Jane Smith','jane@example.com','1985-02-02','Canada');\nINSERT INTO \"Issues\" (IssueNumber,MagazineID,ReleaseDate) VALUES (1,1,'2021-01-01'),(2,1,'2021-02-01');\nINSERT INTO \"Magazines\" (ID,Name,Category,EditorInChief,PublishingHouse) VALUES (1,'Good Housekeeping','Lifestyle','Alice Johnson','Hearst Communications'),(2,'Time','News & Current Affairs','Bob Williams','Time Inc.');\nINSERT INTO \"Subscriptions\" (ID,Magazine,Subscription_Fees,NumberOfSubscribers,Type) VALUES (1,'Good Housekeeping',9.99,27000,'Monthly'),(2,'National Geographic',6.99,20000,'Bi-monthly');\n",
      "question": "Show all types of advertising and subscriptions for Good Housekeeping magazine. Show them in one table.",
      "gold_queries": [
        "SELECT Advertising.Type\r\nFROM Advertising\r\nWHERE Advertising.Magazine = \"Good Housekeeping\"\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\"",
        "SELECT Advertising.Type\r\nFROM Advertising\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine the data of advertising types and subscription types for Good Housekeeping magazine into a single display.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Advertising.Type AS Advertising_Type, Subscriptions.Type AS Subscription_Type\nFROM Advertising\nJOIN Subscriptions ON Advertising.Magazine = Subscriptions.Magazine\nWHERE Advertising.Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "List all advertising and subscription types for Good Housekeeping magazine in one comprehensive table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Advertising' AS Source, Type FROM Advertising WHERE Magazine = 'Good Housekeeping'\nUNION\nSELECT 'Subscriptions' AS Source, Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Show types of advertising and subscription fees for Good Housekeeping magazine in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Type AS Advertising_Type, T2.Subscription_Fees\nFROM Advertising AS T1\nJOIN Subscriptions AS T2 ON T1.Magazine = T2.Magazine\nWHERE T1.Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Display a single table containing advertising and subscription details for Good Housekeeping magazine.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.Advertising_Revenue, A.Subscribers, A.Country, A.Type, S.Subscription_Fees, S.NumberOfSubscribers, S.Type\nFROM Advertising A\nJOIN Subscriptions S ON A.Magazine = S.Magazine\nWHERE A.Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Present a unified table that includes both advertising and subscription types for Good Housekeeping magazine.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Magazine, Type, Advertising_Revenue AS Revenue, Subscribers \nFROM Advertising \nWHERE Magazine = 'Good Housekeeping'\nUNION\nSELECT Magazine, Type, Subscription_Fees AS Revenue, NumberOfSubscribers AS Subscribers \nFROM Subscriptions \nWHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Highlight different advertising types for Good Housekeeping magazine and list them along with their corresponding subscriptions in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Type, Subscribers\nFROM Advertising\nWHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Show all types of advertising and subscriptions related to Good Housekeeping magazine in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Type AS Advertising_Type, Advertising_Revenue FROM Advertising WHERE Magazine = 'Good Housekeeping' \nUNION \nSELECT Type AS Subscription_Type, Subscription_Fees FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Show advertising types for Good Housekeeping magazine and their revenue in one table, separately from subscriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Type, Advertising_Revenue FROM Advertising WHERE Magazine = 'Good Housekeeping'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.125,
        "f1_score": 0.2,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY,\n    companyId INTEGER,\n    departmentName TEXT,\n    FOREIGN KEY (companyId) REFERENCES Company(id));\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    hireDate DATE,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    gender TEXT,\n    FOREIGN KEY (departmentId) REFERENCES Department(id));\nCREATE TABLE LabPosition(\n    id INTEGER PRIMARY KEY,\n    positionTypeId INTEGER,\n    labPosition TEXT,\n    gender TEXT,\n    minimumEducation TEXT,\n    experienceInYears INTEGER,\n    salaryRange TEXT,\n    FOREIGN KEY (positionTypeId) REFERENCES PositionType(id));\nCREATE TABLE PositionType(\n    id INTEGER PRIMARY KEY,\n    typeName TEXT);\n\nINSERT INTO \"Company\" (id,name) VALUES (1,'TechCorp'),(2,'HealthPlus'),(3,'GreenTech'),(4,'SoftWare'),(5,'MedicalPioneers');\nINSERT INTO \"Department\" (id,companyId,departmentName) VALUES (1,1,'Biotechnology'),(2,2,'Chemistry'),(3,3,'Physics'),(4,4,'Computer Science'),(5,5,'Mathematics');\nINSERT INTO \"Employee\" (id,firstName,lastName,dateOfBirth,email,phoneNumber,hireDate,jobTitle,departmentId,gender) VALUES (1,'John','Smith','1990-01-15','johnsmith@email.com','+1 (234) 567-8910','2021-06-01','Research Scientist',1,'Male'),(2,'Jane','Doe','1988-03-20','janedoe@email.com','+1 (123) 456-7890','2021-07-01','Laboratory Technician',2,'Female'),(3,'Tom','Hanks','1985-09-05','thomhanks@email.com','+1 (345) 678-9012','2021-08-01','Engineer',3,'Male'),(4,'Alice','Williams','1992-11-10','alicewilliams@email.com','+1 (456) 789-0123','2021-09-01','Analyst',4,'Female'),(5,'Chris','Evans','1989-06-25','chrisevans@email.com','+1 (567) 890-1234','2021-10-01','Manager',5,'Male');\nINSERT INTO \"LabPosition\" (id,positionTypeId,labPosition,gender,minimumEducation,experienceInYears,salaryRange) VALUES (1,1,'Research Scientist','Female','PhD',5,'60k - 90k'),(2,1,'Research Scientist','Male','PhD',7,'80k - 110k'),(3,2,'Laboratory Technician','Female','BSc',3,'40k - 60k'),(4,2,'Laboratory Technician','Male','BSc',4,'50k - 70k'),(5,3,'Data Analyst','Non-binary','MS',2,'60k - 80k');\nINSERT INTO \"PositionType\" (id,typeName) VALUES (1,'Full Time'),(2,'Part Time'),(3,'Contractual'),(4,'Internship'),(5,'Volunteering');\n",
      "question": "What is the salary range of female research scientists and laboratory technicians of the same gender? Show them in one table.",
      "gold_queries": [
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE (LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\") AND LabPosition.gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What is the salary range for female research scientists and female laboratory technicians working in the same gender and department? Display the results in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT labPosition, salaryRange \nFROM LabPosition \nWHERE (gender = 'Female' AND labPosition = 'Research Scientist') \nUNION \nSELECT labPosition, salaryRange \nFROM LabPosition \nWHERE (gender = 'Female' AND labPosition = 'Laboratory Technician')"
          ]
        },
        {
          "interpretation": "What is the salary range for female research scientists and female laboratory technicians working under the same manager? Present the results in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT LP.salaryRange\nFROM LabPosition LP\nWHERE (LP.gender = 'Female' AND LP.labPosition = 'Research Scientist')\n   OR (LP.gender = 'Female' AND LP.labPosition = 'Laboratory Technician')"
          ]
        },
        {
          "interpretation": "What is the salary range for female research scientists and female laboratory technicians working in TechCorp? Display the results in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LP.salaryRange\nFROM LabPosition LP\nJOIN PositionType PT ON LP.positionTypeId = PT.id\nJOIN Employee E ON LP.gender = E.gender AND LP.labPosition = E.jobTitle\nJOIN Department D ON E.departmentId = D.id\nJOIN Company C ON D.companyId = C.id\nWHERE LP.gender = 'Female' \n  AND LP.labPosition IN ('Research Scientist', 'Laboratory Technician')\n  AND C.name = 'TechCorp'"
          ]
        },
        {
          "interpretation": "What is the salary range for female research scientists and female laboratory technicians working in the same department or company gender-wise? Display the results in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT gender, salaryRange \nFROM LabPosition \nWHERE (labPosition = 'Research Scientist' AND gender = 'Female') \n   OR (labPosition = 'Laboratory Technician' AND gender = 'Female')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY,\n    companyId INTEGER,\n    departmentName TEXT,\n    FOREIGN KEY (companyId) REFERENCES Company(id));\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    hireDate DATE,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    gender TEXT,\n    FOREIGN KEY (departmentId) REFERENCES Department(id));\nCREATE TABLE LabPosition(\n    id INTEGER PRIMARY KEY,\n    positionTypeId INTEGER,\n    labPosition TEXT,\n    gender TEXT,\n    minimumEducation TEXT,\n    experienceInYears INTEGER,\n    salaryRange TEXT,\n    FOREIGN KEY (positionTypeId) REFERENCES PositionType(id));\nCREATE TABLE PositionType(\n    id INTEGER PRIMARY KEY,\n    typeName TEXT);\n\nINSERT INTO \"Company\" (id,name) VALUES (1,'TechCorp'),(2,'HealthPlus'),(3,'GreenTech'),(4,'SoftWare'),(5,'MedicalPioneers');\nINSERT INTO \"Department\" (id,companyId,departmentName) VALUES (1,1,'Biotechnology'),(2,2,'Chemistry'),(3,3,'Physics'),(4,4,'Computer Science'),(5,5,'Mathematics');\nINSERT INTO \"Employee\" (id,firstName,lastName,dateOfBirth,email,phoneNumber,hireDate,jobTitle,departmentId,gender) VALUES (1,'John','Smith','1990-01-15','johnsmith@email.com','+1 (234) 567-8910','2021-06-01','Research Scientist',1,'Male'),(2,'Jane','Doe','1988-03-20','janedoe@email.com','+1 (123) 456-7890','2021-07-01','Laboratory Technician',2,'Female'),(3,'Tom','Hanks','1985-09-05','thomhanks@email.com','+1 (345) 678-9012','2021-08-01','Engineer',3,'Male'),(4,'Alice','Williams','1992-11-10','alicewilliams@email.com','+1 (456) 789-0123','2021-09-01','Analyst',4,'Female'),(5,'Chris','Evans','1989-06-25','chrisevans@email.com','+1 (567) 890-1234','2021-10-01','Manager',5,'Male');\nINSERT INTO \"LabPosition\" (id,positionTypeId,labPosition,gender,minimumEducation,experienceInYears,salaryRange) VALUES (1,1,'Research Scientist','Female','PhD',5,'60k - 90k'),(2,1,'Research Scientist','Male','PhD',7,'80k - 110k'),(3,2,'Laboratory Technician','Female','BSc',3,'40k - 60k'),(4,2,'Laboratory Technician','Male','BSc',4,'50k - 70k'),(5,3,'Data Analyst','Non-binary','MS',2,'60k - 80k');\nINSERT INTO \"PositionType\" (id,typeName) VALUES (1,'Full Time'),(2,'Part Time'),(3,'Contractual'),(4,'Internship'),(5,'Volunteering');\n",
      "question": "What is the salary range for female laboratory technicians and research scientists? Show them in one table.",
      "gold_queries": [
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE (LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\") AND LabPosition.gender = \"Female\"",
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\" AND LabPosition.gender = \"Female\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What is the salary range for female employees holding the positions of Laboratory Technician and Research Scientist, as documented in the LabPosition table? Show them in one table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT salaryRange FROM LabPosition WHERE (labPosition = 'Research Scientist' AND gender = 'Female') OR (labPosition = 'Laboratory Technician' AND gender = 'Female')"
          ]
        },
        {
          "interpretation": "What is the salary range for female employees who work as Laboratory Technicians and Research Scientists, according to the LabPosition and Employee tables? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LabPosition.salaryRange \nFROM LabPosition \nJOIN Employee ON LabPosition.gender = Employee.gender AND LabPosition.labPosition = Employee.jobTitle \nWHERE Employee.gender = 'Female' AND Employee.jobTitle IN ('Laboratory Technician', 'Research Scientist')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY,\n    companyId INTEGER,\n    departmentName TEXT,\n    FOREIGN KEY (companyId) REFERENCES Company(id));\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    hireDate DATE,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    gender TEXT,\n    FOREIGN KEY (departmentId) REFERENCES Department(id));\nCREATE TABLE LabPosition(\n    id INTEGER PRIMARY KEY,\n    positionTypeId INTEGER,\n    labPosition TEXT,\n    gender TEXT,\n    minimumEducation TEXT,\n    experienceInYears INTEGER,\n    salaryRange TEXT,\n    FOREIGN KEY (positionTypeId) REFERENCES PositionType(id));\nCREATE TABLE PositionType(\n    id INTEGER PRIMARY KEY,\n    typeName TEXT);\n\nINSERT INTO \"Company\" (id,name) VALUES (1,'TechCorp'),(2,'HealthPlus'),(3,'GreenTech'),(4,'SoftWare'),(5,'MedicalPioneers');\nINSERT INTO \"Department\" (id,companyId,departmentName) VALUES (1,1,'Biotechnology'),(2,2,'Chemistry'),(3,3,'Physics'),(4,4,'Computer Science'),(5,5,'Mathematics');\nINSERT INTO \"Employee\" (id,firstName,lastName,dateOfBirth,email,phoneNumber,hireDate,jobTitle,departmentId,gender) VALUES (1,'John','Smith','1990-01-15','johnsmith@email.com','+1 (234) 567-8910','2021-06-01','Research Scientist',1,'Male'),(2,'Jane','Doe','1988-03-20','janedoe@email.com','+1 (123) 456-7890','2021-07-01','Laboratory Technician',2,'Female'),(3,'Tom','Hanks','1985-09-05','thomhanks@email.com','+1 (345) 678-9012','2021-08-01','Engineer',3,'Male'),(4,'Alice','Williams','1992-11-10','alicewilliams@email.com','+1 (456) 789-0123','2021-09-01','Analyst',4,'Female'),(5,'Chris','Evans','1989-06-25','chrisevans@email.com','+1 (567) 890-1234','2021-10-01','Manager',5,'Male');\nINSERT INTO \"LabPosition\" (id,positionTypeId,labPosition,gender,minimumEducation,experienceInYears,salaryRange) VALUES (1,1,'Research Scientist','Female','PhD',5,'60k - 90k'),(2,1,'Research Scientist','Male','PhD',7,'80k - 110k'),(3,2,'Laboratory Technician','Female','BSc',3,'40k - 60k'),(4,2,'Laboratory Technician','Male','BSc',4,'50k - 70k'),(5,3,'Data Analyst','Non-binary','MS',2,'60k - 80k');\nINSERT INTO \"PositionType\" (id,typeName) VALUES (1,'Full Time'),(2,'Part Time'),(3,'Contractual'),(4,'Internship'),(5,'Volunteering');\n",
      "question": "List the salary range of all research scientists as well as the salary range of female laboratory technicians. Show them in one table.",
      "gold_queries": [
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\" AND LabPosition.gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    ApplicantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE);\nCREATE TABLE ApplicationJobs(\n    ApplicationID INTEGER PRIMARY KEY,\n    ApplicantID INTEGER,\n    JobID INTEGER,\n    SubmissionDate DATE,\n    Status TEXT DEFAULT 'Pending',\n    FOREIGN KEY (ApplicantID) REFERENCES Applicants(ApplicantID),\n    FOREIGN KEY (JobID) REFERENCES Jobs(JobID));\nCREATE TABLE Companies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE DataTypes(\n    DataTypeID INTEGER PRIMARY KEY,\n    DataTypeName TEXT);\nCREATE TABLE Jobs(\n    JobID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    PostedDate DATE,\n    CompanyID INTEGER,\n    ROLEID INTEGER,\n    DATAID INTEGER,\n    FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID),\n    FOREIGN KEY (ROLEID) REFERENCES Roles(RoleID),\n    FOREIGN KEY (DATAID) REFERENCES DataTypes(DataTypeID));\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY,\n    RoleName TEXT);\n\nINSERT INTO \"Applicants\" (ApplicantID,FirstName,LastName,Email) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com');\nINSERT INTO \"ApplicationJobs\" (ApplicationID,ApplicantID,JobID,SubmissionDate,Status) VALUES (1,1,1,'2023-01-01','Pending'),(2,2,2,'2023-01-02','Pending');\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'ABC Corp.','New York'),(2,'XYZ Inc.','San Francisco');\nINSERT INTO \"DataTypes\" (DataTypeID,DataTypeName) VALUES (1,'Demographics'),(2,'Financial Analysis');\nINSERT INTO \"Jobs\" (JobID,Title,Description,PostedDate,CompanyID,ROLEID,DATAID) VALUES (1,'Economic Analyst','Analyze economic data...','2023-01-01',1,1,1),(2,'Senior Economic Analyst','Analyze economic data...','2023-01-02',2,1,2),(3,'Statistical Analyst','Analyze statistical data...','2023-01-01',1,2,1),(4,'Senior Statistical Analyst','Analyze statistical data...','2023-01-02',2,2,2);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Economist'),(2,'Statistician');\n",
      "question": "Show both economist positions  that require financial analysis and statistician positions that require the same. Show them in one table.",
      "gold_queries": [
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE (Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\") AND DataTypes.DataTypeName = \"Financial Analysis\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Merge and show in one table both the economists and statisticians needing financial analysis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.JobID, J.Title, J.Description FROM Jobs J \nJOIN Roles R ON J.RoleID = R.RoleID \nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID \nWHERE R.RoleName IN ('Economist', 'Statistician') AND DT.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Display in one table both the economist and statistician roles that require financial analysis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Roles.RoleName \nFROM Jobs \nJOIN Roles ON Jobs.ROLEID = Roles.RoleID \nJOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID \nWHERE Roles.RoleName IN ('Economist', 'Statistician') AND DataTypes.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Show positions for economists and statisticians that need financial analysis in one result set",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT J.Title\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Present one table including positions for both economists and statisticians that need financial analysis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description \nFROM Jobs J \nJOIN Roles R ON J.ROLEID = R.RoleID \nJOIN DataTypes D ON J.DATAID = D.DataTypeID \nWHERE R.RoleName IN ('Economist', 'Statistician') \nAND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Combine and display in one table the economist and statistician positions that need financial analysis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.JobID, J.Title, J.Description, J.PostedDate, C.Name AS CompanyName, R.RoleName, D.DataTypeName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Show a single tabular result of economist and statistician positions that involve financial analysis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, R.RoleName, DT.DataTypeName\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND DT.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Combine and display economist and statistician positions that require financial analysis in a single result set",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, J.PostedDate, C.Name, R.RoleName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND DT.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Display in one table the economist and statistician positions that require financial analysis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Roles.RoleName, Jobs.Title\nFROM Jobs\nJOIN Roles ON Jobs.ROLEID = Roles.RoleID\nJOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\nWHERE Roles.RoleName IN ('Economist', 'Statistician') AND DataTypes.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Provide a table listing both economist and statistician positions needing financial analysis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, J.PostedDate, C.Name AS CompanyName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Combine the results to show both economist and statistician positions that require financial analysis in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Jobs.Title, Jobs.Description, Companies.Name\nFROM Jobs\nJOIN Roles ON Jobs.ROLEID = Roles.RoleID\nJOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\nJOIN Companies ON Jobs.CompanyID = Companies.CompanyID\nWHERE Roles.RoleName IN ('Economist', 'Statistician') AND DataTypes.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Show in a single table both economist and statistician positions that require financial analysis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.Title, j.Description, j.PostedDate, c.Name, r.RoleName, dt.DataTypeName\nFROM Jobs j\nJOIN Companies c ON j.CompanyID = c.CompanyID\nJOIN Roles r ON j.ROLEID = r.RoleID\nJOIN DataTypes dt ON j.DATAID = dt.DataTypeID\nWHERE (r.RoleName = 'Economist' OR r.RoleName = 'Statistician')\nAND dt.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Merge the results of economist and statistician positions requiring financial analysis into one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Jobs WHERE ROLEID IN (SELECT RoleID FROM Roles WHERE RoleName IN ('Economist', 'Statistician')) AND DATAID = (SELECT DataTypeID FROM DataTypes WHERE DataTypeName = 'Financial Analysis')"
          ]
        },
        {
          "interpretation": "List both positions where the_role is 'Economist' and _data is 'Financial Analysis' in the same table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Jobs.Title \nFROM Jobs \nJOIN Roles ON Jobs.ROLEID = Roles.RoleID \nJOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID \nWHERE Roles.RoleName = 'Economist' AND DataTypes.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Merge both economist and statistician positions that require financial analysis into one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.JobID, j.Title, j.Description, j.PostedDate, c.Name AS CompanyName\nFROM Jobs j\nJOIN Companies c ON j.CompanyID = c.CompanyID\nJOIN Roles r ON j.ROLEID = r.RoleID\nJOIN DataTypes dt ON j.DATAID = dt.DataTypeID\nWHERE r.RoleName IN ('Economist', 'Statistician') AND dt.DataTypeName = 'Financial Analysis'"
          ]
        }
      ],
      "num_unique_execution_results": 14,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.07142857142857142,
        "f1_score": 0.13333333333333333,
        "num_queries": 14,
        "num_unique_queries": 14,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    ApplicantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE);\nCREATE TABLE ApplicationJobs(\n    ApplicationID INTEGER PRIMARY KEY,\n    ApplicantID INTEGER,\n    JobID INTEGER,\n    SubmissionDate DATE,\n    Status TEXT DEFAULT 'Pending',\n    FOREIGN KEY (ApplicantID) REFERENCES Applicants(ApplicantID),\n    FOREIGN KEY (JobID) REFERENCES Jobs(JobID));\nCREATE TABLE Companies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE DataTypes(\n    DataTypeID INTEGER PRIMARY KEY,\n    DataTypeName TEXT);\nCREATE TABLE Jobs(\n    JobID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    PostedDate DATE,\n    CompanyID INTEGER,\n    ROLEID INTEGER,\n    DATAID INTEGER,\n    FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID),\n    FOREIGN KEY (ROLEID) REFERENCES Roles(RoleID),\n    FOREIGN KEY (DATAID) REFERENCES DataTypes(DataTypeID));\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY,\n    RoleName TEXT);\n\nINSERT INTO \"Applicants\" (ApplicantID,FirstName,LastName,Email) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com');\nINSERT INTO \"ApplicationJobs\" (ApplicationID,ApplicantID,JobID,SubmissionDate,Status) VALUES (1,1,1,'2023-01-01','Pending'),(2,2,2,'2023-01-02','Pending');\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'ABC Corp.','New York'),(2,'XYZ Inc.','San Francisco');\nINSERT INTO \"DataTypes\" (DataTypeID,DataTypeName) VALUES (1,'Demographics'),(2,'Financial Analysis');\nINSERT INTO \"Jobs\" (JobID,Title,Description,PostedDate,CompanyID,ROLEID,DATAID) VALUES (1,'Economic Analyst','Analyze economic data...','2023-01-01',1,1,1),(2,'Senior Economic Analyst','Analyze economic data...','2023-01-02',2,1,2),(3,'Statistical Analyst','Analyze statistical data...','2023-01-01',1,2,1),(4,'Senior Statistical Analyst','Analyze statistical data...','2023-01-02',2,2,2);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Economist'),(2,'Statistician');\n",
      "question": "List economist positions and statistician positions that require financial analysis. Show them in one table.",
      "gold_queries": [
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE (Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\") AND DataTypes.DataTypeName = \"Financial Analysis\"",
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\" AND DataTypes.DataTypeName = \"Financial Analysis\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show job titles and descriptions for positions that need financial analysis and are either for Economists or Statisticians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description \nFROM Jobs J \nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID \nJOIN Roles R ON J.ROLEID = R.RoleID \nWHERE DT.DataTypeName = 'Financial Analysis' \nAND (R.RoleName = 'Economist' OR R.RoleName = 'Statistician')"
          ]
        },
        {
          "interpretation": "List the job positions that require financial analysis and are designated for either Economists or Statisticians, including the job details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, J.PostedDate, C.Name AS CompanyName, R.RoleName, DT.DataTypeName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE DT.DataTypeName = 'Financial Analysis' AND R.RoleName IN ('Economist', 'Statistician')"
          ]
        },
        {
          "interpretation": "List the details of job positions that need financial analysis and involve either an Economist or Statistician role.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, J.PostedDate, C.Name AS CompanyName, R.RoleName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE D.DataTypeName = 'Financial Analysis' AND R.RoleName IN ('Economist', 'Statistician')"
          ]
        },
        {
          "interpretation": "List the positions that require financial analysis and specify that the role is either Economist or Statistician, including the job details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.JobID, J.Title, J.Description, J.PostedDate, J.CompanyID, J.RoleID, J.DATAID \nFROM Jobs J \nJOIN DataTypes D ON J.DATAID = D.DataTypeID \nJOIN Roles R ON J.ROLEID = R.RoleID \nWHERE D.DataTypeName = 'Financial Analysis' AND R.RoleName IN ('Economist', 'Statistician')"
          ]
        },
        {
          "interpretation": "List the job positions that require financial analysis and are either for Economists or Statisticians, detailing the roles and job descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, R.RoleName \nFROM Jobs J \nJOIN Roles R ON J.ROLEID = R.RoleID \nJOIN DataTypes D ON J.DATAID = D.DataTypeID \nWHERE D.DataTypeName = 'Financial Analysis' AND R.RoleName IN ('Economist', 'Statistician')"
          ]
        },
        {
          "interpretation": "Show the job positions where financial analysis is a requirement and the role is either an Economist or a Statistician.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title \nFROM Jobs J \nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID \nJOIN Roles R ON J.ROLEID = R.RoleID \nWHERE DT.DataTypeName = 'Financial Analysis' AND R.RoleName IN ('Economist', 'Statistician')"
          ]
        },
        {
          "interpretation": "List the job positions that need financial analysis and are either for Economists or Statisticians, showing their role and job details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.RoleName, J.Title, J.Description, J.PostedDate, J.CompanyID \nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE DT.DataTypeName = 'Financial Analysis' AND R.RoleName IN ('Economist', 'Statistician')"
          ]
        },
        {
          "interpretation": "Provide a list of job positions that are for either Economists or Statisticians and require financial analysis, including the job details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Jobs.Title, Jobs.Description, Jobs.PostedDate, Companies.Name, Companies.Location\nFROM Jobs\nJOIN Companies ON Jobs.CompanyID = Companies.CompanyID\nJOIN Roles ON Jobs.ROLEID = Roles.RoleID\nJOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\nWHERE Roles.RoleName IN ('Economist', 'Statistician') AND DataTypes.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Display the job positions requiring financial analysis and specify if they are for Economists or Statisticians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, R.RoleName\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List the job positions that require financial analysis and are either for Economists or Statisticians, with detailed job information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.JobID, J.Title, J.Description, J.PostedDate, C.Name AS CompanyName, R.RoleName, DT.DataTypeName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE DT.DataTypeName = 'Financial Analysis' AND R.RoleName IN ('Economist', 'Statistician')"
          ]
        },
        {
          "interpretation": "Display the job positions that require financial analysis and are either for Economists or Statisticians, along with the job details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Jobs.Title, Jobs.Description, Jobs.PostedDate, Roles.RoleName\nFROM Jobs\nJOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\nJOIN Roles ON Jobs.ROLEID = Roles.RoleID\nWHERE DataTypes.DataTypeName = 'Financial Analysis' AND Roles.RoleName IN ('Economist', 'Statistician')"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.09090909090909091,
        "f1_score": 0.15384615384615385,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    ApplicantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE);\nCREATE TABLE ApplicationJobs(\n    ApplicationID INTEGER PRIMARY KEY,\n    ApplicantID INTEGER,\n    JobID INTEGER,\n    SubmissionDate DATE,\n    Status TEXT DEFAULT 'Pending',\n    FOREIGN KEY (ApplicantID) REFERENCES Applicants(ApplicantID),\n    FOREIGN KEY (JobID) REFERENCES Jobs(JobID));\nCREATE TABLE Companies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE DataTypes(\n    DataTypeID INTEGER PRIMARY KEY,\n    DataTypeName TEXT);\nCREATE TABLE Jobs(\n    JobID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    PostedDate DATE,\n    CompanyID INTEGER,\n    ROLEID INTEGER,\n    DATAID INTEGER,\n    FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID),\n    FOREIGN KEY (ROLEID) REFERENCES Roles(RoleID),\n    FOREIGN KEY (DATAID) REFERENCES DataTypes(DataTypeID));\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY,\n    RoleName TEXT);\n\nINSERT INTO \"Applicants\" (ApplicantID,FirstName,LastName,Email) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com');\nINSERT INTO \"ApplicationJobs\" (ApplicationID,ApplicantID,JobID,SubmissionDate,Status) VALUES (1,1,1,'2023-01-01','Pending'),(2,2,2,'2023-01-02','Pending');\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'ABC Corp.','New York'),(2,'XYZ Inc.','San Francisco');\nINSERT INTO \"DataTypes\" (DataTypeID,DataTypeName) VALUES (1,'Demographics'),(2,'Financial Analysis');\nINSERT INTO \"Jobs\" (JobID,Title,Description,PostedDate,CompanyID,ROLEID,DATAID) VALUES (1,'Economic Analyst','Analyze economic data...','2023-01-01',1,1,1),(2,'Senior Economic Analyst','Analyze economic data...','2023-01-02',2,1,2),(3,'Statistical Analyst','Analyze statistical data...','2023-01-01',1,2,1),(4,'Senior Statistical Analyst','Analyze statistical data...','2023-01-02',2,2,2);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Economist'),(2,'Statistician');\n",
      "question": "Show all economist positions and also show statistician positions that require financial analysis. Show them in one table.",
      "gold_queries": [
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\" AND DataTypes.DataTypeName = \"Financial Analysis\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display 'Economist' positions and 'Statistician' jobs requiring 'Financial Analysis' together in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title \nFROM Jobs J \nJOIN Roles R ON J.ROLEID = R.RoleID \nJOIN DataTypes D ON J.DATAID = D.DataTypeID \nWHERE R.RoleName = 'Economist' AND D.DataTypeName = 'Financial Analysis' \nUNION \nSELECT J.Title \nFROM Jobs J \nJOIN Roles R ON J.ROLEID = R.RoleID \nJOIN DataTypes D ON J.DATAID = D.DataTypeID \nWHERE R.RoleName = 'Statistician' AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Aggregate 'Economist' positions and 'Statistician' positions that require 'Financial Analysis' data type into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.JobID, J.Title, J.Description, J.PostedDate, C.Name AS CompanyName, R.RoleName, D.DataTypeName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Incude all entries for 'Economist' positions and 'Statistician' positions needing 'Financial Analysis' data, in one result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.*\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName = 'Economist'\nOR (R.RoleName = 'Statistician' AND D.DataTypeName = 'Financial Analysis')"
          ]
        },
        {
          "interpretation": "List 'Economist' and 'Statistician' positions, including 'Statistician' roles that have 'Financial Analysis' data type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, C.Name \nFROM Jobs J \nJOIN Roles R ON J.ROLEID = R.RoleID \nJOIN Companies C ON J.CompanyID = C.CompanyID \nWHERE R.RoleName = 'Economist' \nUNION \nSELECT J.Title, J.Description, C.Name \nFROM Jobs J \nJOIN Roles R ON J.ROLEID = R.RoleID \nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID \nJOIN Companies C ON J.CompanyID = C.CompanyID \nWHERE R.RoleName = 'Statistician' AND DT.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Output 'Economist' and 'Statistician' roles, including those 'Statistician' positions that specify 'Financial Analysis' data type, in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT R.RoleName\nFROM Roles R\nJOIN Jobs J ON R.RoleID = J.ROLEID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician')\n   OR (R.RoleName = 'Statistician' AND D.DataTypeName = 'Financial Analysis')"
          ]
        },
        {
          "interpretation": "Meld 'Economist' and 'Statistician' positions, particularly those needing 'Financial Analysis', into one result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.Title, j.Description, j.PostedDate, c.Name AS CompanyName\nFROM Jobs j\nJOIN Companies c ON j.CompanyID = c.CompanyID\nJOIN Roles r ON j.ROLEID = r.RoleID\nJOIN DataTypes dt ON j.DATAID = dt.DataTypeID\nWHERE (r.RoleName = 'Economist' OR r.RoleName = 'Statistician')\nAND dt.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Show all 'Economist' roles and 'Statistician' roles that involve 'Financial Analysis', in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, J.PostedDate, C.Name, R.RoleName, DT.DataTypeName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND DT.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Output all positions of 'Economist' and 'Statistician' roles, specifically highlighting 'Statistician' roles that involve 'Financial Analysis'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName = 'Economist'\nUNION\nSELECT J.Title, J.Description\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName = 'Statistician' AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Show 'Economist' positions and 'Statistician' roles requiring 'Financial Analysis' together in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, R.RoleName, DT.DataTypeName\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND DT.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List all 'Economist' positions and 'Statistician' positions that involve 'Financial Analysis' data type, in one result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE (R.RoleName = 'Economist' OR R.RoleName = 'Statistician') AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Display all jobs with RoleName as 'Economist' and additionally, display all jobs with RoleName as 'Statistician' and associated with DataTypeName 'Financial Analysis' in one result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, J.PostedDate\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nWHERE R.RoleName = 'Economist'\nUNION\nSELECT J.Title, J.PostedDate, J.PostedDate\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE R.RoleName = 'Statistician' AND DT.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Show all positions where the RoleName is 'Economist' and also show positions where the RoleName is 'Statistician' and the DATAID is 2 in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, J.PostedDate, C.Name AS CompanyName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nWHERE R.RoleName = 'Economist'\nUNION\nSELECT J.Title, J.Description, J.PostedDate, C.Name AS CompanyName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nWHERE R.RoleName = 'Statistician' AND J.DATAID = 2"
          ]
        },
        {
          "interpretation": "Include 'Economist' positions and 'Statistician' positions that need 'Financial Analysis' data, in one result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, C.Name, R.RoleName, D.DataTypeName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List all the 'Economist' roles and include 'Statistician' roles that involve 'Financial Analysis' in the same output.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.Title, j.Description, j.PostedDate, c.Name, r.RoleName, dt.DataTypeName\nFROM Jobs j\nJOIN Roles r ON j.ROLEID = r.RoleID\nJOIN Companies c ON j.CompanyID = c.CompanyID\nJOIN DataTypes dt ON j.DATAID = dt.DataTypeID\nWHERE r.RoleName = 'Economist' OR (r.RoleName = 'Statistician' AND dt.DataTypeName = 'Financial Analysis')"
          ]
        },
        {
          "interpretation": "Combine 'Economist' positions and 'Statistician' positions associated with 'Financial Analysis' data type in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.JobID, J.Title, J.Description, C.Name AS CompanyName, R.RoleName, DT.DataTypeName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND DT.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Show 'Economist' and 'Statistician' positions, with special consideration to 'Statistician' roles requiring 'Financial Analysis' data type, in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.RoleName, T.DataTypeName\nFROM Roles R\nJOIN DataTypes T ON R.RoleID = CASE WHEN R.RoleName = 'Statistician' THEN T.DataTypeID ELSE R.RoleID END\nWHERE R.RoleName IN ('Economist', 'Statistician')\nAND (R.RoleName = 'Economist' OR (R.RoleName = 'Statistician' AND T.DataTypeName = 'Financial Analysis'))"
          ]
        }
      ],
      "num_unique_execution_results": 16,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 16,
        "num_unique_queries": 16,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT);\nCREATE TABLE Departments (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE EarthSciencesJobs (\n    id INTEGER PRIMARY KEY,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    companyId INTEGER,\n    FOREIGN KEY(departmentId) REFERENCES Departments(id),\n    FOREIGN KEY(companyId) REFERENCES Companies(id));\nCREATE TABLE Education (\n    employeeId INTEGER,\n    degree TEXT,\n    major TEXT,\n    institution TEXT,\n    yearGraduated INTEGER,\n    FOREIGN KEY(employeeId) REFERENCES Employees(id));\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    university TEXT, FullName TEXT);\n\nINSERT INTO \"Companies\" (id,name,address) VALUES (1,'Company A','123 Main St'),(2,'Company B','456 Elm St'),(3,'Company C','789 Oak St'),(4,'Company D','098 Maple Ave'),(5,'Company E','543 Pine St');\nINSERT INTO \"Departments\" (id,name) VALUES (1,'Department of Geosciences'),(2,'Department of Chemistry'),(3,'Department of Biology'),(4,'Department of Physics'),(5,'Department of Mathematics');\nINSERT INTO \"EarthSciencesJobs\" (id,jobTitle,departmentId,companyId) VALUES (1,'Research Scientist',1,1),(2,'Laboratory Technician',1,2),(3,'Field Geologist',2,3),(4,'Teaching Assistant',3,4),(5,'Data Analyst',4,5);\nINSERT INTO \"Education\" (employeeId,degree,major,institution,yearGraduated) VALUES (NULL,'PhD','Chemistry','Harvard',2008),(NULL,'MS','Physics','Yale',2010),(NULL,'BS','Biology','Princeton',2012),(NULL,'BA','Mathematics','Columbia',2014),(NULL,'MA','Computational Science','Berkeley',2016);\nINSERT INTO \"Employees\" (id,title,startDate,endDate,university,FullName) VALUES (1,'Chemist','2010-01-01',NULL,'MIT','John Doe'),(2,'Chemist','2015-01-01',NULL,'UCLA','Jane Smith'),(3,'Geoscientist','2010-01-01',NULL,'MIT','Michael Brown'),(4,'Geoscientist','2015-01-01',NULL,'Stanford','Emily White'),(5,'Engineer','2010-01-01',NULL,'Caltech','David Black');\n",
      "question": "Show all chemists from MIT, also show all the geoscientists from the same university. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE (Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\") AND Employees.university = \"MIT\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all chemists from MIT, also show all the geoscientists from the same university as a subset of chemists. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, university, title \nFROM Employees \nWHERE (title = 'Chemist' AND university = 'MIT') \n   OR (title = 'Geoscientist' AND university = (SELECT university FROM Employees WHERE title = 'Chemist' AND university = 'MIT'))"
          ]
        },
        {
          "interpretation": "Show all chemists from MIT, also show all the geoscientists from Berkeley. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE title = 'Chemist' AND university = 'MIT' UNION SELECT FullName FROM Employees WHERE title = 'Geoscientist' AND university = 'Berkeley'"
          ]
        },
        {
          "interpretation": "Show all chemists from MIT, also show all the geoscientists from the same department. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employees WHERE (title = 'Chemist' AND university = 'MIT') OR (title = 'Geoscientist' AND university = 'MIT')"
          ]
        },
        {
          "interpretation": "Show all chemists from MIT, also show all the geoscientists from Princeton. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, university FROM Employees WHERE (title = 'Chemist' AND university = 'MIT') OR (title = 'Geoscientist' AND university = 'Princeton')"
          ]
        },
        {
          "interpretation": "Show all chemists from MIT, also show all the geoscientists from Columbia. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employees WHERE (title = 'Chemist' AND university = 'MIT') OR (title = 'Geoscientist' AND university = 'Columbia')"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT);\nCREATE TABLE Departments (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE EarthSciencesJobs (\n    id INTEGER PRIMARY KEY,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    companyId INTEGER,\n    FOREIGN KEY(departmentId) REFERENCES Departments(id),\n    FOREIGN KEY(companyId) REFERENCES Companies(id));\nCREATE TABLE Education (\n    employeeId INTEGER,\n    degree TEXT,\n    major TEXT,\n    institution TEXT,\n    yearGraduated INTEGER,\n    FOREIGN KEY(employeeId) REFERENCES Employees(id));\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    university TEXT, FullName TEXT);\n\nINSERT INTO \"Companies\" (id,name,address) VALUES (1,'Company A','123 Main St'),(2,'Company B','456 Elm St'),(3,'Company C','789 Oak St'),(4,'Company D','098 Maple Ave'),(5,'Company E','543 Pine St');\nINSERT INTO \"Departments\" (id,name) VALUES (1,'Department of Geosciences'),(2,'Department of Chemistry'),(3,'Department of Biology'),(4,'Department of Physics'),(5,'Department of Mathematics');\nINSERT INTO \"EarthSciencesJobs\" (id,jobTitle,departmentId,companyId) VALUES (1,'Research Scientist',1,1),(2,'Laboratory Technician',1,2),(3,'Field Geologist',2,3),(4,'Teaching Assistant',3,4),(5,'Data Analyst',4,5);\nINSERT INTO \"Education\" (employeeId,degree,major,institution,yearGraduated) VALUES (NULL,'PhD','Chemistry','Harvard',2008),(NULL,'MS','Physics','Yale',2010),(NULL,'BS','Biology','Princeton',2012),(NULL,'BA','Mathematics','Columbia',2014),(NULL,'MA','Computational Science','Berkeley',2016);\nINSERT INTO \"Employees\" (id,title,startDate,endDate,university,FullName) VALUES (1,'Chemist','2010-01-01',NULL,'MIT','John Doe'),(2,'Chemist','2015-01-01',NULL,'UCLA','Jane Smith'),(3,'Geoscientist','2010-01-01',NULL,'MIT','Michael Brown'),(4,'Geoscientist','2015-01-01',NULL,'Stanford','Emily White'),(5,'Engineer','2010-01-01',NULL,'Caltech','David Black');\n",
      "question": "List all chemists and geoscientists from MIT. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE (Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\") AND Employees.university = \"MIT\"",
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\" AND Employees.university = \"MIT\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all employees whose education includes a major in Chemistry or Geology from MIT.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName\nFROM Employees E\nJOIN Education ED ON E.id = ED.employeeId\nWHERE (ED.major = 'Chemistry' OR ED.major = 'Geology') AND E.university = 'MIT'"
          ]
        },
        {
          "interpretation": "List all employees with the title 'Chemist' or 'Geoscientist' from MIT.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE title IN ('Chemist', 'Geoscientist') AND university = 'MIT'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT);\nCREATE TABLE Departments (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE EarthSciencesJobs (\n    id INTEGER PRIMARY KEY,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    companyId INTEGER,\n    FOREIGN KEY(departmentId) REFERENCES Departments(id),\n    FOREIGN KEY(companyId) REFERENCES Companies(id));\nCREATE TABLE Education (\n    employeeId INTEGER,\n    degree TEXT,\n    major TEXT,\n    institution TEXT,\n    yearGraduated INTEGER,\n    FOREIGN KEY(employeeId) REFERENCES Employees(id));\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    university TEXT, FullName TEXT);\n\nINSERT INTO \"Companies\" (id,name,address) VALUES (1,'Company A','123 Main St'),(2,'Company B','456 Elm St'),(3,'Company C','789 Oak St'),(4,'Company D','098 Maple Ave'),(5,'Company E','543 Pine St');\nINSERT INTO \"Departments\" (id,name) VALUES (1,'Department of Geosciences'),(2,'Department of Chemistry'),(3,'Department of Biology'),(4,'Department of Physics'),(5,'Department of Mathematics');\nINSERT INTO \"EarthSciencesJobs\" (id,jobTitle,departmentId,companyId) VALUES (1,'Research Scientist',1,1),(2,'Laboratory Technician',1,2),(3,'Field Geologist',2,3),(4,'Teaching Assistant',3,4),(5,'Data Analyst',4,5);\nINSERT INTO \"Education\" (employeeId,degree,major,institution,yearGraduated) VALUES (NULL,'PhD','Chemistry','Harvard',2008),(NULL,'MS','Physics','Yale',2010),(NULL,'BS','Biology','Princeton',2012),(NULL,'BA','Mathematics','Columbia',2014),(NULL,'MA','Computational Science','Berkeley',2016);\nINSERT INTO \"Employees\" (id,title,startDate,endDate,university,FullName) VALUES (1,'Chemist','2010-01-01',NULL,'MIT','John Doe'),(2,'Chemist','2015-01-01',NULL,'UCLA','Jane Smith'),(3,'Geoscientist','2010-01-01',NULL,'MIT','Michael Brown'),(4,'Geoscientist','2015-01-01',NULL,'Stanford','Emily White'),(5,'Engineer','2010-01-01',NULL,'Caltech','David Black');\n",
      "question": "List all of the chemists, in addition show just the geoscientists from MIT. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\" AND Employees.university = \"MIT\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all Chemists and Geoscientists who attended MIT in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE title IN ('Chemist', 'Geoscientist') AND university = 'MIT'"
          ]
        },
        {
          "interpretation": "List all Chemists and Geoscientists along with their education at MIT in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, ED.degree, ED.major, ED.institution, ED.yearGraduated\nFROM Employees E\nJOIN Education ED ON E.id = ED.employeeId\nWHERE E.title IN ('Chemist', 'Geoscientist') AND E.university = 'MIT'"
          ]
        },
        {
          "interpretation": "List all Chemists and employees who studied at MIT in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, FullName FROM Employees WHERE title = 'Chemist' UNION SELECT title, FullName FROM Employees WHERE university = 'MIT'"
          ]
        },
        {
          "interpretation": "List all Chemists and Geoscientists from MIT in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employees WHERE university = 'MIT' AND (title = 'Chemist' OR title = 'Geoscientist')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_lab_positions/attachment_2tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    qualification TEXT,\n    years_in_industry INTEGER,\n    gender TEXT \n);\nCREATE TABLE Data_Analysts(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    specialization TEXT,\n    education TEXT,\n    gender TEXT \n);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    employment_duration INTEGER,\n    gender TEXT \n);\nCREATE TABLE Laboratory_Technicians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    experience INTEGER,\n    Gender TEXT \n);\nCREATE TABLE Research_Scientists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    salary REAL,\n    Gender TEXT \n);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    skills TEXT,\n    years_experience INTEGER,\n    gender TEXT \n);\n\nINSERT INTO \"Accountants\" (id,name,qualification,years_in_industry,gender) VALUES (1,'Anna Johnson','CPA',6,'Female'),(2,'William Anderson','CA',8,'Male');\nINSERT INTO \"Data_Analysts\" (id,name,specialization,education,gender) VALUES (1,'Eva Red','Data Science','Master of Computer Applications','Female'),(2,'Steve Black','Business Analytics','MBA','Male');\nINSERT INTO \"HR_Specialists\" (id,name,department,employment_duration,gender) VALUES (1,'Carol White','HR',7,'Female'),(2,'Robert Green','HR',10,'Male');\nINSERT INTO \"Laboratory_Technicians\" (id,name,age,experience,Gender) VALUES (1,'Emma Brown',27,3,'Female'),(2,'Tom Green',32,6,'Male');\nINSERT INTO \"Research_Scientists\" (id,name,age,salary,Gender) VALUES (1,'Jane Doe',30,85000.0,'Female'),(2,'John Smith',35,90000.0,'Male');\nINSERT INTO \"Software_Engineers\" (id,name,skills,years_experience,gender) VALUES (1,'Alice Blue','Python, Java',4,'Female'),(2,'Bob White','C++, Python',5,'Male');\n",
      "question": "List all research scientists and also display female laboratory technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all Research Scientists and female Laboratory Technicians in one table but separate the data by using different row groups.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Research Scientist' AS Category, name, age, salary, Gender \nFROM Research_Scientists\nUNION ALL\nSELECT 'Laboratory Technician' AS Category, name, age, experience, Gender \nFROM Laboratory_Technicians\nWHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List all Research Scientists and join them with female Laboratory Technicians based on a common attribute in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RS.name AS Research_Scientist_Name, LT.name AS Laboratory_Technician_Name\nFROM Research_Scientists RS\nJOIN Laboratory_Technicians LT ON RS.Gender = LT.Gender\nWHERE LT.Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List all Research Scientists and display a separate row for each female Laboratory Technician in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, salary, Gender FROM Research_Scientists\nUNION\nSELECT name, age, experience AS salary, Gender FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List all Research Scientists and include female Laboratory Technicians as a subcategory in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, salary, 'Research Scientist' AS category FROM Research_Scientists\nUNION\nSELECT name, age, NULL AS salary, 'Female Laboratory Technician' AS category FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List all Research Scientists and female Laboratory Technicians in two separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, salary, Gender FROM Research_Scientists",
            "SELECT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List all Research Scientists and female Laboratory Technicians in two separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, salary, Gender FROM Research_Scientists",
            "SELECT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List all Research Scientists and female Laboratory Technicians side-by-side in one table using different columns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Research_Scientists.name AS RS_Name, Research_Scientists.age AS RS_Age, Research_Scientists.salary AS RS_Salary, Laboratory_Technicians.name AS LT_Name, Laboratory_Technicians.age AS LT_Age, Laboratory_Technicians.experience AS LT_Experience\nFROM Research_Scientists\nJOIN Laboratory_Technicians ON Research_Scientists.id = Laboratory_Technicians.id\nWHERE Research_Scientists.Gender = 'Female' AND Laboratory_Technicians.Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List all Research Scientists and female Laboratory Technicians in one table with two sections, one for each group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Research Scientist' AS Group_Type, name, age, salary, Gender FROM Research_Scientists\nUNION ALL\nSELECT 'Female Laboratory Technician' AS Group_Type, name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List all Research Scientists and female Laboratory Technicians in separate columns of the same table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT rs.name AS Research_Scientist, lt.name AS Laboratory_Technician\nFROM Research_Scientists rs, Laboratory_Technicians lt\nWHERE lt.Gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_lab_positions/attachment_2tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    qualification TEXT,\n    years_in_industry INTEGER,\n    gender TEXT \n);\nCREATE TABLE Data_Analysts(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    specialization TEXT,\n    education TEXT,\n    gender TEXT \n);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    employment_duration INTEGER,\n    gender TEXT \n);\nCREATE TABLE Laboratory_Technicians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    experience INTEGER,\n    Gender TEXT \n);\nCREATE TABLE Research_Scientists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    salary REAL,\n    Gender TEXT \n);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    skills TEXT,\n    years_experience INTEGER,\n    gender TEXT \n);\n\nINSERT INTO \"Accountants\" (id,name,qualification,years_in_industry,gender) VALUES (1,'Anna Johnson','CPA',6,'Female'),(2,'William Anderson','CA',8,'Male');\nINSERT INTO \"Data_Analysts\" (id,name,specialization,education,gender) VALUES (1,'Eva Red','Data Science','Master of Computer Applications','Female'),(2,'Steve Black','Business Analytics','MBA','Male');\nINSERT INTO \"HR_Specialists\" (id,name,department,employment_duration,gender) VALUES (1,'Carol White','HR',7,'Female'),(2,'Robert Green','HR',10,'Male');\nINSERT INTO \"Laboratory_Technicians\" (id,name,age,experience,Gender) VALUES (1,'Emma Brown',27,3,'Female'),(2,'Tom Green',32,6,'Male');\nINSERT INTO \"Research_Scientists\" (id,name,age,salary,Gender) VALUES (1,'Jane Doe',30,85000.0,'Female'),(2,'John Smith',35,90000.0,'Male');\nINSERT INTO \"Software_Engineers\" (id,name,skills,years_experience,gender) VALUES (1,'Alice Blue','Python, Java',4,'Female'),(2,'Bob White','C++, Python',5,'Male');\n",
      "question": "Can you show female research scientists and female laboratory technicians? Show them in one table.",
      "gold_queries": [
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nWHERE Research_Scientists.Gender = \"Female\"\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Can you present a single table with the names and gender of female research scientists and female laboratory technicians?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, Gender FROM Research_Scientists WHERE Gender = 'Female'\nUNION\nSELECT name, Gender FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_lab_positions/attachment_2tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    qualification TEXT,\n    years_in_industry INTEGER,\n    gender TEXT \n);\nCREATE TABLE Data_Analysts(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    specialization TEXT,\n    education TEXT,\n    gender TEXT \n);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    employment_duration INTEGER,\n    gender TEXT \n);\nCREATE TABLE Laboratory_Technicians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    experience INTEGER,\n    Gender TEXT \n);\nCREATE TABLE Research_Scientists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    salary REAL,\n    Gender TEXT \n);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    skills TEXT,\n    years_experience INTEGER,\n    gender TEXT \n);\n\nINSERT INTO \"Accountants\" (id,name,qualification,years_in_industry,gender) VALUES (1,'Anna Johnson','CPA',6,'Female'),(2,'William Anderson','CA',8,'Male');\nINSERT INTO \"Data_Analysts\" (id,name,specialization,education,gender) VALUES (1,'Eva Red','Data Science','Master of Computer Applications','Female'),(2,'Steve Black','Business Analytics','MBA','Male');\nINSERT INTO \"HR_Specialists\" (id,name,department,employment_duration,gender) VALUES (1,'Carol White','HR',7,'Female'),(2,'Robert Green','HR',10,'Male');\nINSERT INTO \"Laboratory_Technicians\" (id,name,age,experience,Gender) VALUES (1,'Emma Brown',27,3,'Female'),(2,'Tom Green',32,6,'Male');\nINSERT INTO \"Research_Scientists\" (id,name,age,salary,Gender) VALUES (1,'Jane Doe',30,85000.0,'Female'),(2,'John Smith',35,90000.0,'Male');\nINSERT INTO \"Software_Engineers\" (id,name,skills,years_experience,gender) VALUES (1,'Alice Blue','Python, Java',4,'Female'),(2,'Bob White','C++, Python',5,'Male');\n",
      "question": "Display female laboratory technicians and research scientists. Show them in one table.",
      "gold_queries": [
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nWHERE Research_Scientists.Gender = \"Female\"\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\"",
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Give a unified list of female Laboratory_Technicians and Research_Scientists in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, Gender FROM Laboratory_Technicians WHERE Gender = 'Female' UNION SELECT name, age, Gender FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Show the details of female Laboratory_Technicians and Research_Scientists combined into one result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Laboratory_Technicians WHERE Gender = 'Female' UNION SELECT * FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List female members from both Laboratory_Technicians and Research_Scientists tables in one result.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female' UNION SELECT name FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Combine the results of female Laboratory_Technicians and Research_Scientists into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female' UNION SELECT name, age, NULL AS experience, Gender FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Display Laboratory_Technicians and Research_Scientists who are female in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, experience, 'Laboratory_Technicians' AS profession FROM Laboratory_Technicians WHERE Gender = 'Female'\nUNION\nSELECT name, age, NULL AS experience, 'Research_Scientists' AS profession FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Merge the data of female Laboratory_Technicians and Research_Scientists into a unified table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, 'Laboratory_Technician' AS profession FROM Laboratory_Technicians WHERE Gender = 'Female'\nUNION\nSELECT name, age, 'Research_Scientist' AS profession FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Include female Laboratory_Technicians alongside Research_Scientists in a single output table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, Gender FROM Laboratory_Technicians WHERE Gender = 'Female' UNION SELECT name, age, Gender FROM Research_Scientists"
          ]
        },
        {
          "interpretation": "_fetch females from the Laboratory_Technicians table and Research_Scientists table and present them together.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female' UNION SELECT name, age, salary, Gender FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.125,
        "f1_score": 0.2,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
      "db_dump": "CREATE TABLE ArticleAuthors(\n    articleId INTEGER REFERENCES Articles(id),\n    journalistId INTEGER REFERENCES Journalists(id),\n    PRIMARY KEY (articleId, journalistId)\n);\nCREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishDate DATE,\n    editorId INTEGER REFERENCES Editors(id),\n    FOREIGN KEY (editorId) REFERENCES Editors(id)\n);\nCREATE TABLE Editors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Journalists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Publications(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    publicationDate DATE\n);\nCREATE TABLE Subscriptions(\n    id INTEGER PRIMARY KEY,\n    subscriberEmail TEXT,\n    subscriptionType TEXT \n);\n\nINSERT INTO \"ArticleAuthors\" (articleId,journalistId) VALUES (1,1),(2,2);\nINSERT INTO \"Articles\" (id,title,content,publishDate,editorId) VALUES (1,'Article 1','Content of Article 1','2021-01-01',1),(2,'Article 2','Content of Article 2','2021-01-15',2);\nINSERT INTO \"Editors\" (id,name,email,phoneNumber,languages) VALUES (1,'Michael Johnson','michael@example.com','+0987654321','English and Spanish'),(2,'Emily Davis','emily@example.com','+1234567890','Italian and Portuguese');\nINSERT INTO \"Journalists\" (id,name,email,phoneNumber,languages) VALUES (1,'John Doe','john@example.com','+1234567890','English and Spanish'),(2,'Jane Smith','jane@example.com','+9876543210','German and French');\nINSERT INTO \"Publications\" (id,title,publicationDate) VALUES (1,'The Daily News','2021-01-01'),(2,'Weekly Times','2021-01-15');\nINSERT INTO \"Subscriptions\" (id,subscriberEmail,subscriptionType) VALUES (1,'subscription1@example.com','Premium'),(2,'subscription2@example.com','Standard');\n",
      "question": "Show journalists and editors who speak English and Spanish. Show them in one table.",
      "gold_queries": [
        "SELECT Journalists.name\r\nFROM Journalists\r\nWHERE Journalists.languages = \"English and Spanish\"\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\"",
        "SELECT Journalists.name\r\nFROM Journalists\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
      "db_dump": "CREATE TABLE ArticleAuthors(\n    articleId INTEGER REFERENCES Articles(id),\n    journalistId INTEGER REFERENCES Journalists(id),\n    PRIMARY KEY (articleId, journalistId)\n);\nCREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishDate DATE,\n    editorId INTEGER REFERENCES Editors(id),\n    FOREIGN KEY (editorId) REFERENCES Editors(id)\n);\nCREATE TABLE Editors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Journalists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Publications(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    publicationDate DATE\n);\nCREATE TABLE Subscriptions(\n    id INTEGER PRIMARY KEY,\n    subscriberEmail TEXT,\n    subscriptionType TEXT \n);\n\nINSERT INTO \"ArticleAuthors\" (articleId,journalistId) VALUES (1,1),(2,2);\nINSERT INTO \"Articles\" (id,title,content,publishDate,editorId) VALUES (1,'Article 1','Content of Article 1','2021-01-01',1),(2,'Article 2','Content of Article 2','2021-01-15',2);\nINSERT INTO \"Editors\" (id,name,email,phoneNumber,languages) VALUES (1,'Michael Johnson','michael@example.com','+0987654321','English and Spanish'),(2,'Emily Davis','emily@example.com','+1234567890','Italian and Portuguese');\nINSERT INTO \"Journalists\" (id,name,email,phoneNumber,languages) VALUES (1,'John Doe','john@example.com','+1234567890','English and Spanish'),(2,'Jane Smith','jane@example.com','+9876543210','German and French');\nINSERT INTO \"Publications\" (id,title,publicationDate) VALUES (1,'The Daily News','2021-01-01'),(2,'Weekly Times','2021-01-15');\nINSERT INTO \"Subscriptions\" (id,subscriberEmail,subscriptionType) VALUES (1,'subscription1@example.com','Premium'),(2,'subscription2@example.com','Standard');\n",
      "question": "Provide a list of all journalists and also provide a list of editors that speak English and Spanish. Show them in one table.",
      "gold_queries": [
        "SELECT Journalists.name\r\nFROM Journalists\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Journalists and Editors who fluently speak English and Spanish in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Journalists WHERE languages = 'English and Spanish' UNION SELECT name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "List of Journalists and Editors who are bilingual in English and Spanish in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber, languages \nFROM Journalists \nWHERE languages = 'English and Spanish'\nUNION \nSELECT name, email, phoneNumber, languages \nFROM Editors \nWHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Journalists and Editors that include English and Spanish speaking skills in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email FROM Journalists WHERE languages = 'English and Spanish'\nUNION\nSELECT name, email FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Journalists and Editors who include English and Spanish as a language in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber FROM Journalists WHERE languages = 'English and Spanish'\nUNION\nSELECT name, email, phoneNumber FROM Editors WHERE languages = 'English and Spanish'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
      "db_dump": "CREATE TABLE ArticleAuthors(\n    articleId INTEGER REFERENCES Articles(id),\n    journalistId INTEGER REFERENCES Journalists(id),\n    PRIMARY KEY (articleId, journalistId)\n);\nCREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishDate DATE,\n    editorId INTEGER REFERENCES Editors(id),\n    FOREIGN KEY (editorId) REFERENCES Editors(id)\n);\nCREATE TABLE Editors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Journalists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Publications(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    publicationDate DATE\n);\nCREATE TABLE Subscriptions(\n    id INTEGER PRIMARY KEY,\n    subscriberEmail TEXT,\n    subscriptionType TEXT \n);\n\nINSERT INTO \"ArticleAuthors\" (articleId,journalistId) VALUES (1,1),(2,2);\nINSERT INTO \"Articles\" (id,title,content,publishDate,editorId) VALUES (1,'Article 1','Content of Article 1','2021-01-01',1),(2,'Article 2','Content of Article 2','2021-01-15',2);\nINSERT INTO \"Editors\" (id,name,email,phoneNumber,languages) VALUES (1,'Michael Johnson','michael@example.com','+0987654321','English and Spanish'),(2,'Emily Davis','emily@example.com','+1234567890','Italian and Portuguese');\nINSERT INTO \"Journalists\" (id,name,email,phoneNumber,languages) VALUES (1,'John Doe','john@example.com','+1234567890','English and Spanish'),(2,'Jane Smith','jane@example.com','+9876543210','German and French');\nINSERT INTO \"Publications\" (id,title,publicationDate) VALUES (1,'The Daily News','2021-01-01'),(2,'Weekly Times','2021-01-15');\nINSERT INTO \"Subscriptions\" (id,subscriberEmail,subscriptionType) VALUES (1,'subscription1@example.com','Premium'),(2,'subscription2@example.com','Standard');\n",
      "question": "What journalists speak English and Spanish and what editors also speak those languages? Show them in one table.",
      "gold_queries": [
        "SELECT Journalists.name\r\nFROM Journalists\r\nWHERE Journalists.languages = \"English and Spanish\"\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Journalists and Editors who have specified English and Spanish as languages known",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Journalists WHERE languages = 'English and Spanish' UNION SELECT name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Information on Journalists and Editors who speak both English and Spanish",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber, languages \nFROM Journalists \nWHERE languages = 'English and Spanish'\nUNION\nSELECT name, email, phoneNumber, languages \nFROM Editors \nWHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Journalists and Editors who have listed English and Spanish as their languages",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber\nFROM Journalists\nWHERE languages = 'English and Spanish'\nUNION\nSELECT name, email, phoneNumber\nFROM Editors\nWHERE languages = 'English and Spanish'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_organization/attachment_1tab_val_organization.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Currencies(\n    CurrencyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Symbol TEXT\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    Organization TEXT,\n    Year_of_establishment INT\n, FullName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    CurrencyID INTEGER,\n    Date DATETIME,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CurrencyID) REFERENCES Currencies(CurrencyID)\n);\n\nINSERT INTO \"Currencies\" (CurrencyID,Name,Symbol) VALUES (1,'USD','$'),(2,'EUR','\u20ac'),(3,'GBP','\u00a3'),(4,'AUD','$');\nINSERT INTO \"Customers\" (CustomerID,Organization,Year_of_establishment,FullName) VALUES (1,'Currency Exchange Service',2000,'John Doe'),(2,'Currency Exchange Service',1998,'Jane Smith'),(3,'Commodity Trading Firm',2000,'Michael Brown'),(4,'Commodity Trading Firm',1996,'Emma White');\n",
      "question": "Show all customers of either the currency exchange services founded in 2000 or the commodity trading firms that were founded at the same time. Show them in one table.",
      "gold_queries": [
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE (Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\") AND Customers.Year_of_establishment = 2000"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show a single table with all customers connected to either currency exchange services or commodity trading firms that were established in the year 2000.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, Organization, Year_of_establishment\nFROM Customers\nWHERE (Organization = 'Currency Exchange Service' OR Organization = 'Commodity Trading Firm')\nAND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Show all customers of the currency exchange services founded in 2000 and the commodity trading firms founded in 2000 in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName FROM Customers WHERE (Organization = 'Currency Exchange Service' AND Year_of_establishment = 2000) OR (Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000)"
          ]
        },
        {
          "interpretation": "Provide a unified table containing all customers from currency exchange services and commodity trading firms that were set up in the year 2000.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Customers WHERE (Organization = 'Currency Exchange Service' OR Organization = 'Commodity Trading Firm') AND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Show all customers of the currency exchange services and commodity trading firms that were established in 2000 in a single table format.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, Organization FROM Customers WHERE Organization IN ('Currency Exchange Service', 'Commodity Trading Firm') AND Year_of_establishment = 2000"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_organization/attachment_1tab_val_organization.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Currencies(\n    CurrencyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Symbol TEXT\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    Organization TEXT,\n    Year_of_establishment INT\n, FullName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    CurrencyID INTEGER,\n    Date DATETIME,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CurrencyID) REFERENCES Currencies(CurrencyID)\n);\n\nINSERT INTO \"Currencies\" (CurrencyID,Name,Symbol) VALUES (1,'USD','$'),(2,'EUR','\u20ac'),(3,'GBP','\u00a3'),(4,'AUD','$');\nINSERT INTO \"Customers\" (CustomerID,Organization,Year_of_establishment,FullName) VALUES (1,'Currency Exchange Service',2000,'John Doe'),(2,'Currency Exchange Service',1998,'Jane Smith'),(3,'Commodity Trading Firm',2000,'Michael Brown'),(4,'Commodity Trading Firm',1996,'Emma White');\n",
      "question": "Show the commodity trading firm customers from firms formed in 2000 and also show all the currency exchange service customers. Show them in one table.",
      "gold_queries": [
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\" AND Customers.Year_of_establishment = 2000"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the customers from firms formed in 2000 and categorized as commodity trading firms, and include the currency exchange service customers in one view.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName \nFROM Customers \nWHERE Year_of_establishment = 2000 AND (Organization = 'Commodity Trading Firm' OR Organization = 'Currency Exchange Service')"
          ]
        },
        {
          "interpretation": "Show the customers of firms formed in 2000 that are in the commodity trading firm category and also show the customers of the currency exchange service in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Organization, Year_of_establishment, FullName\nFROM Customers\nWHERE (Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000)\nOR Organization = 'Currency Exchange Service'"
          ]
        },
        {
          "interpretation": "Display the customers from firms that were established in 2000, categorized as commodity trading firms, and include the customers of multiple currency exchange services in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName\nFROM Customers\nWHERE Year_of_establishment = 2000 AND Organization = 'Commodity Trading Firm'\nUNION\nSELECT FullName\nFROM Customers\nWHERE Organization = 'Currency Exchange Service'"
          ]
        },
        {
          "interpretation": "Unite the customers from firms established in 2000 and categorized as commodity trading firms with the customers of all currency exchange services in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Customers WHERE Year_of_establishment = 2000 AND Organization = 'Commodity Trading Firm' UNION SELECT * FROM Customers WHERE Organization = 'Currency Exchange Service'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_organization/attachment_1tab_val_organization.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Currencies(\n    CurrencyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Symbol TEXT\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    Organization TEXT,\n    Year_of_establishment INT\n, FullName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    CurrencyID INTEGER,\n    Date DATETIME,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CurrencyID) REFERENCES Currencies(CurrencyID)\n);\n\nINSERT INTO \"Currencies\" (CurrencyID,Name,Symbol) VALUES (1,'USD','$'),(2,'EUR','\u20ac'),(3,'GBP','\u00a3'),(4,'AUD','$');\nINSERT INTO \"Customers\" (CustomerID,Organization,Year_of_establishment,FullName) VALUES (1,'Currency Exchange Service',2000,'John Doe'),(2,'Currency Exchange Service',1998,'Jane Smith'),(3,'Commodity Trading Firm',2000,'Michael Brown'),(4,'Commodity Trading Firm',1996,'Emma White');\n",
      "question": "Show all currency exchange service customers and commodity trading firm customers where the organisation was formed in 2000. Show them in one table.",
      "gold_queries": [
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE (Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\") AND Customers.Year_of_establishment = 2000",
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\" AND Customers.Year_of_establishment = 2000"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all customers belonging to the Currency Exchange Service or Commodity Trading Firm that were formed in 2000. Display the information in a unified table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName \nFROM Customers \nWHERE Organization IN ('Currency Exchange Service', 'Commodity Trading Firm') \nAND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Provide a table with the names and details of all Currency Exchange Service and Commodity Trading Firm customers that were created in 2000.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, Organization, Year_of_establishment \nFROM Customers \nWHERE Organization IN ('Currency Exchange Service', 'Commodity Trading Firm') AND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Show the details of all customers from the Currency Exchange Service and Commodity Trading Firm that were established in the year 2000. Display the results in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Customers WHERE Organization IN ('Currency Exchange Service', 'Commodity Trading Firm') AND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Merge the Customer records of Currency Exchange Service and Commodity Trading Firm customers into one table and filter those established in 2000.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, Year_of_establishment \nFROM Customers \nWHERE (Organization = 'Currency Exchange Service' OR Organization = 'Commodity Trading Firm') \nAND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Show in a single table the Customer details (including full name and organization) of Currency Exchange Service and Commodity Trading Firm customers who were established in 2000.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, Organization\nFROM Customers\nWHERE (Organization = 'Currency Exchange Service' OR Organization = 'Commodity Trading Firm')\n  AND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Show a single table containing the CustomerID, Organization, and Year_of_establishment of all Currency Exchange Service and Commodity Trading Firm customers formed in 2000.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CustomerID, Organization, Year_of_establishment FROM Customers WHERE (Organization = 'Currency Exchange Service' OR Organization = 'Commodity Trading Firm') AND Year_of_establishment = 2000"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_revenue_streams/attachment_2tab_ref_revenue_streams.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Product TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Fees(\n    FeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    CardFee REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE InterestRates(\n    RateID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    MonthlyInterestRate REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    MonthlyInterestRate REAL ,\n    CardFee REAL \n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL ,\n    Type TEXT, -- e.g., 'Deposit', 'Withdrawal'\n    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,Product,Balance) VALUES (1,1,'Checking',1000.0),(2,2,'Savings',500.0),(3,3,'Money Market',2500.0),(4,4,'Premium Checking',5000.0),(5,5,'Certificates of Deposit',10000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2000-01-01'),(2,'Jane','Smith','1985-06-30'),(3,'Michael','Johnson','1992-07-15'),(4,'Emma','Williams','1997-08-20'),(5,'David','Martin','1990-09-25');\nINSERT INTO \"Fees\" (FeeID,AccountID,CardFee) VALUES (1,1,5.0),(2,2,3.0),(3,3,10.0),(4,4,20.0),(5,5,15.0);\nINSERT INTO \"InterestRates\" (RateID,AccountID,MonthlyInterestRate) VALUES (1,1,0.01),(2,2,0.02),(3,3,0.03),(4,4,0.04),(5,5,0.05);\nINSERT INTO \"Products\" (ProductID,Name,Description,MonthlyInterestRate,CardFee) VALUES (1,'Premium Credit Card','A high interest credit card.',0.02,5.0),(2,'Regular Credit Card','A standard credit card.',0.01,3.0),(3,'Business Loan','For business use only.',0.03,10.0),(4,'Personal Loan','Low interest personal loan.',0.04,20.0),(5,'Student Loan','For students only.',0.05,15.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Amount,Type,TransactionDate) VALUES (1,1,500.0,'Deposit','2024-03-13 20:52:19'),(2,2,-100.0,'Withdrawal','2024-03-13 20:52:19'),(3,3,200.0,'Deposit','2024-03-13 20:52:19'),(4,4,-300.0,'Withdrawal','2024-03-13 20:52:19'),(5,5,2500.0,'Deposit','2024-03-13 20:52:19');\n",
      "question": "What is the fee of accounts where the product is called checking and what is the interest rate of the accounts with the same product name. Show them in one table.",
      "gold_queries": [
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nWHERE Accounts.Product = \"Checking\"\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_revenue_streams/attachment_2tab_ref_revenue_streams.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Product TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Fees(\n    FeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    CardFee REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE InterestRates(\n    RateID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    MonthlyInterestRate REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    MonthlyInterestRate REAL ,\n    CardFee REAL \n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL ,\n    Type TEXT, -- e.g., 'Deposit', 'Withdrawal'\n    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,Product,Balance) VALUES (1,1,'Checking',1000.0),(2,2,'Savings',500.0),(3,3,'Money Market',2500.0),(4,4,'Premium Checking',5000.0),(5,5,'Certificates of Deposit',10000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2000-01-01'),(2,'Jane','Smith','1985-06-30'),(3,'Michael','Johnson','1992-07-15'),(4,'Emma','Williams','1997-08-20'),(5,'David','Martin','1990-09-25');\nINSERT INTO \"Fees\" (FeeID,AccountID,CardFee) VALUES (1,1,5.0),(2,2,3.0),(3,3,10.0),(4,4,20.0),(5,5,15.0);\nINSERT INTO \"InterestRates\" (RateID,AccountID,MonthlyInterestRate) VALUES (1,1,0.01),(2,2,0.02),(3,3,0.03),(4,4,0.04),(5,5,0.05);\nINSERT INTO \"Products\" (ProductID,Name,Description,MonthlyInterestRate,CardFee) VALUES (1,'Premium Credit Card','A high interest credit card.',0.02,5.0),(2,'Regular Credit Card','A standard credit card.',0.01,3.0),(3,'Business Loan','For business use only.',0.03,10.0),(4,'Personal Loan','Low interest personal loan.',0.04,20.0),(5,'Student Loan','For students only.',0.05,15.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Amount,Type,TransactionDate) VALUES (1,1,500.0,'Deposit','2024-03-13 20:52:19'),(2,2,-100.0,'Withdrawal','2024-03-13 20:52:19'),(3,3,200.0,'Deposit','2024-03-13 20:52:19'),(4,4,-300.0,'Withdrawal','2024-03-13 20:52:19'),(5,5,2500.0,'Deposit','2024-03-13 20:52:19');\n",
      "question": "Give me all fees and interest rates for the account's product called checking. Show them in one table.",
      "gold_queries": [
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nWHERE Accounts.Product = \"Checking\"\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\"",
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate AS AMOUNT\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Fees and interest rates specific to the \"Checking\" product across accounts consolidated in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.AccountID, f.CardFee, ir.MonthlyInterestRate\nFROM Accounts a\nJOIN Fees f ON a.AccountID = f.AccountID\nJOIN InterestRates ir ON a.AccountID = ir.AccountID\nWHERE a.Product = 'Checking'"
          ]
        },
        {
          "interpretation": "All fees and interest rates associated with the product named \"Checking\" displayed in a single table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.CardFee, i.MonthlyInterestRate\nFROM Fees f\nJOIN Accounts a ON f.AccountID = a.AccountID\nJOIN InterestRates i ON a.AccountID = i.AccountID\nJOIN Products p ON a.Product = p.Name\nWHERE p.Name = 'Checking'"
          ]
        },
        {
          "interpretation": "Fees and interest rates for products named \"Checking\" along with account details presented in one table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.AccountID, A.Product, F.CardFee, IR.MonthlyInterestRate\nFROM Accounts A\nJOIN Fees F ON A.AccountID = F.AccountID\nJOIN InterestRates IR ON A.AccountID = IR.AccountID\nWHERE A.Product = 'Checking'"
          ]
        },
        {
          "interpretation": "All card fees and monthly interest rates for accounts with the \"Checking\" product listed in one table",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.CardFee, I.MonthlyInterestRate \nFROM Fees F \nJOIN InterestRates I ON F.AccountID = I.AccountID \nJOIN Accounts A ON F.AccountID = A.AccountID \nWHERE A.Product = 'Checking'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_revenue_streams/attachment_2tab_ref_revenue_streams.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Product TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Fees(\n    FeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    CardFee REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE InterestRates(\n    RateID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    MonthlyInterestRate REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    MonthlyInterestRate REAL ,\n    CardFee REAL \n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL ,\n    Type TEXT, -- e.g., 'Deposit', 'Withdrawal'\n    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,Product,Balance) VALUES (1,1,'Checking',1000.0),(2,2,'Savings',500.0),(3,3,'Money Market',2500.0),(4,4,'Premium Checking',5000.0),(5,5,'Certificates of Deposit',10000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2000-01-01'),(2,'Jane','Smith','1985-06-30'),(3,'Michael','Johnson','1992-07-15'),(4,'Emma','Williams','1997-08-20'),(5,'David','Martin','1990-09-25');\nINSERT INTO \"Fees\" (FeeID,AccountID,CardFee) VALUES (1,1,5.0),(2,2,3.0),(3,3,10.0),(4,4,20.0),(5,5,15.0);\nINSERT INTO \"InterestRates\" (RateID,AccountID,MonthlyInterestRate) VALUES (1,1,0.01),(2,2,0.02),(3,3,0.03),(4,4,0.04),(5,5,0.05);\nINSERT INTO \"Products\" (ProductID,Name,Description,MonthlyInterestRate,CardFee) VALUES (1,'Premium Credit Card','A high interest credit card.',0.02,5.0),(2,'Regular Credit Card','A standard credit card.',0.01,3.0),(3,'Business Loan','For business use only.',0.03,10.0),(4,'Personal Loan','Low interest personal loan.',0.04,20.0),(5,'Student Loan','For students only.',0.05,15.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Amount,Type,TransactionDate) VALUES (1,1,500.0,'Deposit','2024-03-13 20:52:19'),(2,2,-100.0,'Withdrawal','2024-03-13 20:52:19'),(3,3,200.0,'Deposit','2024-03-13 20:52:19'),(4,4,-300.0,'Withdrawal','2024-03-13 20:52:19'),(5,5,2500.0,'Deposit','2024-03-13 20:52:19');\n",
      "question": "Provide a list of all account fees and also provide a list of all account interest rates where the product is called checking. Show them in one table.",
      "gold_queries": [
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate AS AMOUNT\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    accountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerID INTEGER,\n    balance REAL ,\n    FOREIGN KEY(customerID) REFERENCES Customers(customerID));\nCREATE TABLE Customers(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    address TEXT);\nCREATE TABLE Mortgages(\n    mortgageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    loanType TEXT ,\n    principalAmount REAL ,\n    annualInterestRate DECIMAL(5,2) ,\n    repaymentPeriod TEXT,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\nCREATE TABLE SavingsAccounts(\n    savingsID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    interestRate DECIMAL(5,2) ,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\n\nINSERT INTO \"Accounts\" (accountID,customerID,balance) VALUES (1,1,1000.0),(2,2,-500.0),(3,3,2000.0),(4,4,-300.0),(5,5,500.0);\nINSERT INTO \"Customers\" (customerID,firstName,lastName,dateOfBirth,address) VALUES (1,'John','Doe','1987-06-12','New York'),(2,'Jane','Smith','1990-05-15','Los Angeles'),(3,'Tom','Nelson','1975-08-18','Chicago'),(4,'Alice','Williams','1985-09-20','Houston'),(5,'Bob','Jackson','1992-11-22','Seattle');\nINSERT INTO \"Mortgages\" (mortgageID,accountID,loanType,principalAmount,annualInterestRate,repaymentPeriod) VALUES (1,1,'Mortgage',100000.0,0.05,'30'),(2,2,'Mortgage',200000.0,0.06,'25'),(3,3,'Home Equity Loan',50000.0,0.04,'20'),(4,4,'Home Equity Loan',30000.0,0.05,'30'),(5,5,'Mortgage',150000.0,0.07,'15');\nINSERT INTO \"SavingsAccounts\" (savingsID,accountID,interestRate) VALUES (1,1,0.03),(2,2,0.04),(3,3,0.02),(4,4,0.05),(5,5,0.03);\n",
      "question": "Give me the mortgage amounts and home equity loan amounts with 30 years of repayment. Show them in one table.",
      "gold_queries": [
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE (Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\") AND Mortgages.repaymentPeriod = \"30\"",
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\" AND Mortgages.repaymentPeriod = \"30\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "30-year mortgage and 30-year home equity loan amounts in a unified table format.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT principalAmount \nFROM Mortgages \nWHERE repaymentPeriod = '30' AND (loanType = 'Mortgage' OR loanType = 'Home Equity Loan')"
          ]
        },
        {
          "interpretation": "30-year mortgage and home equity loan principal amounts from the Mortgages and Mortgages table respectively displayed in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT loanType, principalAmount\nFROM Mortgages\nWHERE loanType IN ('Mortgage', 'Home Equity Loan') AND repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "Mortgage and 30-year home equity loan principal amounts shown in a single output.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages WHERE loanType = 'Mortgage' OR (loanType = 'Home Equity Loan' AND repaymentPeriod = '30')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Insurance(\n    InsuranceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    InsuranceType TEXT,\n    PaymentFrequency TEXT ,\n    PremiumAmount REAL,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Payments(\n    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    PaymentDate DATE,\n    PaymentAmount REAL,\n    CheckNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,500.0),(2,2,1000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1980-06-17','john.doe@gmail.com'),(2,'Jane','Smith','1985-03-19','jane.smith@yahoo.com');\nINSERT INTO \"Insurance\" (InsuranceID,CustomerID,InsuranceType,PaymentFrequency,PremiumAmount,StartDate,EndDate) VALUES (1,1,'Pet Insurance','Monthly',15.0,'2021-01-01','2021-12-31'),(2,1,'Pet Insurance','Quarterly',45.0,'2021-01-01','2021-12-31'),(3,2,'Disability Insurance','Monthly',20.0,'2021-01-01','2021-12-31'),(4,2,'Disability Insurance','Annually',200.0,'2021-01-01','2022-12-31');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,20000,0.05,5),(2,2,15000,0.04,3);\nINSERT INTO \"Payments\" (PaymentID,AccountNumber,PaymentDate,PaymentAmount,CheckNumber) VALUES (1,1,'2021-01-15',1000.0,12345),(2,1,'2021-02-15',1500.0,67890),(3,2,'2021-01-15',500.0,123456),(4,2,'2021-02-15',500.0,67890);\n",
      "question": "Show all the premium amount, for both pet and disability insurance plans, with monthly payments. Show them in one table.",
      "gold_queries": [
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE (Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\") AND Insurance.PaymentFrequency = \"Monthly\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all the premium amounts for pet insurance plans with monthly payments in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Provide a summary of premium amounts for all pet and disability insurance plans with monthly payment frequencies in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT InsuranceType, SUM(PremiumAmount) AS TotalPremium\nFROM Insurance\nWHERE InsuranceType IN ('Pet Insurance', 'Disability Insurance') AND PaymentFrequency = 'Monthly'\nGROUP BY InsuranceType"
          ]
        },
        {
          "interpretation": "Display individual premium amounts for pet and disability insurance plans with monthly payment frequencies in separate columns of the same row.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT \n    MAX(CASE WHEN InsuranceType = 'Pet Insurance' THEN PremiumAmount END) AS PetInsurancePremium,\n    MAX(CASE WHEN InsuranceType = 'Disability Insurance' THEN PremiumAmount END) AS DisabilityInsurancePremium\nFROM \n    Insurance\nWHERE \n    PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "List all premium amounts for insurance plans that are either pet or disability and have monthly payment frequencies in a single row per plan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(PremiumAmount) AS TotalPremium\nFROM Insurance\nWHERE InsuranceType IN ('Pet Insurance', 'Disability Insurance')\nAND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Show all the premium amounts for disability insurance plans with monthly payments in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Insurance(\n    InsuranceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    InsuranceType TEXT,\n    PaymentFrequency TEXT ,\n    PremiumAmount REAL,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Payments(\n    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    PaymentDate DATE,\n    PaymentAmount REAL,\n    CheckNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,500.0),(2,2,1000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1980-06-17','john.doe@gmail.com'),(2,'Jane','Smith','1985-03-19','jane.smith@yahoo.com');\nINSERT INTO \"Insurance\" (InsuranceID,CustomerID,InsuranceType,PaymentFrequency,PremiumAmount,StartDate,EndDate) VALUES (1,1,'Pet Insurance','Monthly',15.0,'2021-01-01','2021-12-31'),(2,1,'Pet Insurance','Quarterly',45.0,'2021-01-01','2021-12-31'),(3,2,'Disability Insurance','Monthly',20.0,'2021-01-01','2021-12-31'),(4,2,'Disability Insurance','Annually',200.0,'2021-01-01','2022-12-31');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,20000,0.05,5),(2,2,15000,0.04,3);\nINSERT INTO \"Payments\" (PaymentID,AccountNumber,PaymentDate,PaymentAmount,CheckNumber) VALUES (1,1,'2021-01-15',1000.0,12345),(2,1,'2021-02-15',1500.0,67890),(3,2,'2021-01-15',500.0,123456),(4,2,'2021-02-15',500.0,67890);\n",
      "question": "What is the amount of all the pet insurance and disability insurance which are charged monthly? Show them in one table.",
      "gold_queries": [
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE (Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\") AND Insurance.PaymentFrequency = \"Monthly\"",
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\" AND Insurance.PaymentFrequency = \"Monthly\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Insurance(\n    InsuranceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    InsuranceType TEXT,\n    PaymentFrequency TEXT ,\n    PremiumAmount REAL,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Payments(\n    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    PaymentDate DATE,\n    PaymentAmount REAL,\n    CheckNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,500.0),(2,2,1000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1980-06-17','john.doe@gmail.com'),(2,'Jane','Smith','1985-03-19','jane.smith@yahoo.com');\nINSERT INTO \"Insurance\" (InsuranceID,CustomerID,InsuranceType,PaymentFrequency,PremiumAmount,StartDate,EndDate) VALUES (1,1,'Pet Insurance','Monthly',15.0,'2021-01-01','2021-12-31'),(2,1,'Pet Insurance','Quarterly',45.0,'2021-01-01','2021-12-31'),(3,2,'Disability Insurance','Monthly',20.0,'2021-01-01','2021-12-31'),(4,2,'Disability Insurance','Annually',200.0,'2021-01-01','2022-12-31');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,20000,0.05,5),(2,2,15000,0.04,3);\nINSERT INTO \"Payments\" (PaymentID,AccountNumber,PaymentDate,PaymentAmount,CheckNumber) VALUES (1,1,'2021-01-15',1000.0,12345),(2,1,'2021-02-15',1500.0,67890),(3,2,'2021-01-15',500.0,123456),(4,2,'2021-02-15',500.0,67890);\n",
      "question": "Show all the pet insurance premium amounts, also show the monthly disability insurance amounts. Show them in one table.",
      "gold_queries": [
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\" AND Insurance.PaymentFrequency = \"Monthly\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Include the pet insurance premium amounts and the disability insurance amounts (monthly payments only) in a single table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance' UNION SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Show all the pet insurance premium amounts and the corresponding monthly disability insurance amounts in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    (SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly') AS PetInsuranceMonthly,\n    (SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly') AS DisabilityInsuranceMonthly"
          ]
        },
        {
          "interpretation": "Present a combined table that includes both the pet insurance premiums and the monthly disability insurance amounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT InsuranceType, PaymentFrequency, PremiumAmount\nFROM Insurance\nWHERE InsuranceType = 'Pet Insurance'\nUNION ALL\nSELECT InsuranceType, PaymentFrequency, PremiumAmount\nFROM Insurance\nWHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Show the results of pet insurance premium amounts and disability insurance amounts that are paid on a monthly basis in the same table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT InsuranceType, PremiumAmount \nFROM Insurance \nWHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly'\nUNION\nSELECT InsuranceType, PremiumAmount \nFROM Insurance \nWHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Compile the data of pet insurance premiums and disability insurance with monthly payments into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CustomerID, InsuranceType, PaymentFrequency, PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly' UNION SELECT CustomerID, InsuranceType, PaymentFrequency, PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    accountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerID INTEGER,\n    balance REAL ,\n    FOREIGN KEY(customerID) REFERENCES Customers(customerID));\nCREATE TABLE Customers(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    address TEXT);\nCREATE TABLE Mortgages(\n    mortgageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    loanType TEXT ,\n    principalAmount REAL ,\n    annualInterestRate DECIMAL(5,2) ,\n    repaymentPeriod TEXT,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\nCREATE TABLE SavingsAccounts(\n    savingsID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    interestRate DECIMAL(5,2) ,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\n\nINSERT INTO \"Accounts\" (accountID,customerID,balance) VALUES (1,1,1000.0),(2,2,-500.0),(3,3,2000.0),(4,4,-300.0),(5,5,500.0);\nINSERT INTO \"Customers\" (customerID,firstName,lastName,dateOfBirth,address) VALUES (1,'John','Doe','1987-06-12','New York'),(2,'Jane','Smith','1990-05-15','Los Angeles'),(3,'Tom','Nelson','1975-08-18','Chicago'),(4,'Alice','Williams','1985-09-20','Houston'),(5,'Bob','Jackson','1992-11-22','Seattle');\nINSERT INTO \"Mortgages\" (mortgageID,accountID,loanType,principalAmount,annualInterestRate,repaymentPeriod) VALUES (1,1,'Mortgage',100000.0,0.05,'30'),(2,2,'Mortgage',200000.0,0.06,'25'),(3,3,'Home Equity Loan',50000.0,0.04,'20'),(4,4,'Home Equity Loan',30000.0,0.05,'30'),(5,5,'Mortgage',150000.0,0.07,'15');\nINSERT INTO \"SavingsAccounts\" (savingsID,accountID,interestRate) VALUES (1,1,0.03),(2,2,0.04),(3,3,0.02),(4,4,0.05),(5,5,0.03);\n",
      "question": "Provide a list of all mortgage principal amounts combined with a list of principal amounts of home equity loans with 30 years of repayment. Show them in one table.",
      "gold_queries": [
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\" AND Mortgages.repaymentPeriod = \"30\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a single table listing mortgage principal amounts alongside home equity loan principal amounts, with the condition that the home equity loans have a 30-year repayment period.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT mortgageID, principalAmount AS mortgagePrincipal\nFROM Mortgages\nWHERE loanType = 'Mortgage'\nUNION\nSELECT mortgageID, principalAmount AS homeEquityLoanPrincipal\nFROM Mortgages\nWHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "List all mortgage and home equity loan principal amounts together in a table where mortgages are paired with home equity loans that both have a 30-year repayment period.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m1.principalAmount AS MortgagePrincipal, m2.principalAmount AS HomeEquityPrincipal\nFROM Mortgages m1\nJOIN Mortgages m2\nON m1.repaymentPeriod = 30 AND m2.repaymentPeriod = 30\nAND m1.loanType = 'Mortgage' AND m2.loanType = 'Home Equity Loan'"
          ]
        },
        {
          "interpretation": "Present a single table with the principal amounts of both mortgage and home equity loans, where the home equity loans have a repayment period of exactly 30 years.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages WHERE loanType = 'Mortgage' UNION SELECT principalAmount FROM Mortgages WHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    accountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerID INTEGER,\n    balance REAL ,\n    FOREIGN KEY(customerID) REFERENCES Customers(customerID));\nCREATE TABLE Customers(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    address TEXT);\nCREATE TABLE Mortgages(\n    mortgageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    loanType TEXT ,\n    principalAmount REAL ,\n    annualInterestRate DECIMAL(5,2) ,\n    repaymentPeriod TEXT,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\nCREATE TABLE SavingsAccounts(\n    savingsID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    interestRate DECIMAL(5,2) ,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\n\nINSERT INTO \"Accounts\" (accountID,customerID,balance) VALUES (1,1,1000.0),(2,2,-500.0),(3,3,2000.0),(4,4,-300.0),(5,5,500.0);\nINSERT INTO \"Customers\" (customerID,firstName,lastName,dateOfBirth,address) VALUES (1,'John','Doe','1987-06-12','New York'),(2,'Jane','Smith','1990-05-15','Los Angeles'),(3,'Tom','Nelson','1975-08-18','Chicago'),(4,'Alice','Williams','1985-09-20','Houston'),(5,'Bob','Jackson','1992-11-22','Seattle');\nINSERT INTO \"Mortgages\" (mortgageID,accountID,loanType,principalAmount,annualInterestRate,repaymentPeriod) VALUES (1,1,'Mortgage',100000.0,0.05,'30'),(2,2,'Mortgage',200000.0,0.06,'25'),(3,3,'Home Equity Loan',50000.0,0.04,'20'),(4,4,'Home Equity Loan',30000.0,0.05,'30'),(5,5,'Mortgage',150000.0,0.07,'15');\nINSERT INTO \"SavingsAccounts\" (savingsID,accountID,interestRate) VALUES (1,1,0.03),(2,2,0.04),(3,3,0.02),(4,4,0.05),(5,5,0.03);\n",
      "question": "What is the principal amount of a mortgage with 30 years of repayment and what is the principal amount of a home equity loan with the same repayment period? Show them in one table.",
      "gold_queries": [
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE (Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\") AND Mortgages.repaymentPeriod = \"30\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What is the maximum principal amount of mortgages with a 30-year repayment period and what is the maximum principal amount of home equity loans with the same repayment period? Provide these values in a single table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT \n    MAX(CASE WHEN loanType = 'Mortgage' THEN principalAmount END) AS MaxMortgagePrincipal,\n    MAX(CASE WHEN loanType = 'Home Equity Loan' THEN principalAmount END) AS MaxHomeEquityPrincipal\nFROM Mortgages\nWHERE repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "What is the individual principal amount of all mortgages that have a 30-year repayment period and what is the individual principal amount of all home equity loans that have the same repayment period? Show this information in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT principalAmount, loanType FROM Mortgages WHERE repaymentPeriod = '30' AND loanType IN ('Mortgage', 'Home Equity Loan')"
          ]
        },
        {
          "interpretation": "What is the minimum principal amount of mortgages with a 30-year repayment period and what is the minimum principal amount of home equity loans with the same repayment period? Show these values in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    MIN(principalAmount) AS minMortgagePrincipal,\n    MIN(CASE WHEN loanType = 'Home Equity Loan' THEN principalAmount END) AS minHomeEquityPrincipal\nFROM Mortgages\nWHERE repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "What is the total principal amount of all mortgages with a repayment period of 30 years and what is the total principal amount of all home equity loans with the same repayment period? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(principalAmount) AS TotalMortgagePrincipal, \n       SUM(CASE WHEN loanType = 'Home Equity Loan' THEN principalAmount ELSE 0 END) AS TotalHomeEquityPrincipal\nFROM Mortgages\nWHERE repaymentPeriod = '30'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_product/attachment_2tab_val_product.sqlite",
      "db_dump": "CREATE TABLE \"Checking_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, `AccountNumber` INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    OverdraftLimit REAL DEFAULT -500.0,\n    Interest_Rate TEXT);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    StartDate DATE,\n    EndDate DATE,\n    Rate DECIMAL(8,2),\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE \"Savings_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, \"AccountNumber\" INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    Interest_Rate TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountID INTEGER,\n    Type TEXT ,\n    Amount REAL,\n    DateAndTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(AccountID) REFERENCES Savings_Accounts(AccountID),\n    FOREIGN KEY(AccountID) REFERENCES Checking_Accounts(AccountID));\n\nINSERT INTO \"Checking_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,OverdraftLimit,Interest_Rate) VALUES (1,123,'John Doe','2023-01-01',500.0,250.0,'1%'),(2,345,'Jane Smith','2023-01-01',750.0,350.0,'2%');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1990-01-01','john.doe@example.com'),(2,'Jane','Smith','1992-01-01','jane.smith@example.com');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,StartDate,EndDate,Rate) VALUES (1,1,5000,'2023-01-01','2026-01-01',4.5),(2,2,10000,'2023-01-01','2028-01-01',4.75);\nINSERT INTO \"Savings_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,Interest_Rate) VALUES (1,567,'John Doe','2023-01-01',1000.0,'1%'),(2,789,'Jane Smith','2023-01-01',2000.0,'2%');\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,DateAndTime) VALUES (1,1,'Deposit',500.0,'2023-01-01 12:00:00'),(2,2,'Withdrawal',250.0,'2023-01-01 13:00:00');\n",
      "question": "Provide a list of all saving accounts combined with a list of checking accounts with an interest rate of 1%. Show them in one table.",
      "gold_queries": [
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_product/attachment_2tab_val_product.sqlite",
      "db_dump": "CREATE TABLE \"Checking_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, `AccountNumber` INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    OverdraftLimit REAL DEFAULT -500.0,\n    Interest_Rate TEXT);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    StartDate DATE,\n    EndDate DATE,\n    Rate DECIMAL(8,2),\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE \"Savings_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, \"AccountNumber\" INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    Interest_Rate TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountID INTEGER,\n    Type TEXT ,\n    Amount REAL,\n    DateAndTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(AccountID) REFERENCES Savings_Accounts(AccountID),\n    FOREIGN KEY(AccountID) REFERENCES Checking_Accounts(AccountID));\n\nINSERT INTO \"Checking_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,OverdraftLimit,Interest_Rate) VALUES (1,123,'John Doe','2023-01-01',500.0,250.0,'1%'),(2,345,'Jane Smith','2023-01-01',750.0,350.0,'2%');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1990-01-01','john.doe@example.com'),(2,'Jane','Smith','1992-01-01','jane.smith@example.com');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,StartDate,EndDate,Rate) VALUES (1,1,5000,'2023-01-01','2026-01-01',4.5),(2,2,10000,'2023-01-01','2028-01-01',4.75);\nINSERT INTO \"Savings_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,Interest_Rate) VALUES (1,567,'John Doe','2023-01-01',1000.0,'1%'),(2,789,'Jane Smith','2023-01-01',2000.0,'2%');\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,DateAndTime) VALUES (1,1,'Deposit',500.0,'2023-01-01 12:00:00'),(2,2,'Withdrawal',250.0,'2023-01-01 13:00:00');\n",
      "question": "Which saving accounts have an interest rate of 1% and which checking accounts have the same interest rate? Show them in one table.",
      "gold_queries": [
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nWHERE Savings_Accounts.Interest_Rate = \"1%\"\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Output a table that displays the savings and checking accounts with a 1% interest rate alongside those with different rates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate\nFROM Savings_Accounts\nWHERE Interest_Rate = '1%'\nUNION\nSELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate\nFROM Checking_Accounts\nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Provide a unified table of all savings and checking accounts with and without a 1% interest rate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%'\nUNION\nSELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Which savings accounts have an interest rate of 1% and which checking accounts have the same interest rate? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountID, AccountNumber, CustomerName, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Combine the savings and checking accounts with a 1% interest rate and those with a different rate in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate != '1%' UNION SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate != '1%'"
          ]
        },
        {
          "interpretation": "Merge the savings and checking accounts with and without a 1% interest rate into a single table for display.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, OpenDate, Balance \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%' \nUNION \nSELECT AccountNumber, CustomerName, OpenDate, Balance \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Combine the savings and checking accounts with and without a 1% interest rate into a single output table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountNumber, CustomerName, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Provide a single table showing the savings and checking accounts with a 1% interest rate, and those that do not have this rate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Savings' AS AccountType, AccountNumber, CustomerName, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' UNION ALL SELECT 'Savings' AS AccountType, AccountNumber, CustomerName, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate != '1%' UNION ALL SELECT 'Checking' AS AccountType, AccountNumber, CustomerName, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%' UNION ALL SELECT 'Checking' AS AccountType, AccountNumber, CustomerName, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate != '1%'"
          ]
        },
        {
          "interpretation": "Show the savings and checking accounts that have a 1% interest rate, as well as any other accounts with a different rate in one listing.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountNumber, CustomerName, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountNumber, CustomerName, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate != '1%' UNION SELECT AccountNumber, CustomerName, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate != '1%'"
          ]
        },
        {
          "interpretation": "Which accounts (savings or checking) have an interest rate of 1% and which other accounts have the same interest rate? Show in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Savings' AS AccountType, AccountID, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' \nUNION \nSELECT 'Checking' AS AccountType, AccountID, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "List all savings and checking accounts, distinguishing those with a 1% interest rate and those with a different rate in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CustomerName, AccountNumber, Interest_Rate, \n       CASE WHEN Interest_Rate = '1%' THEN 'Yes' ELSE 'No' END AS Is1PercentRate\nFROM Savings_Accounts\nUNION\nSELECT CustomerName, AccountNumber, Interest_Rate, \n       CASE WHEN Interest_Rate = '1%' THEN 'Yes' ELSE 'No' END AS Is1PercentRate\nFROM Checking_Accounts"
          ]
        },
        {
          "interpretation": "Show the savings and checking accounts with a 1% interest rate and those without a 1% interest rate in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' \nUNION \nSELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%' \nUNION \nSELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate != '1%' \nUNION \nSELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate != '1%'"
          ]
        },
        {
          "interpretation": "Which savings and checking accounts have a 1% interest rate and which do not? Provide a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, Interest_Rate \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%'\nUNION\nSELECT AccountID, AccountNumber, CustomerName, Interest_Rate \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%'\nUNION\nSELECT AccountID, AccountNumber, CustomerName, Interest_Rate \nFROM Savings_Accounts \nWHERE Interest_Rate != '1%'\nUNION\nSELECT AccountID, AccountNumber, CustomerName, Interest_Rate \nFROM Checking_Accounts \nWHERE Interest_Rate != '1%'"
          ]
        },
        {
          "interpretation": "What are the savings and checking accounts that have an interest rate of 1%, and which accounts have a different interest rate? Display in a single output.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Savings' AS AccountType, AccountNumber, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%'\nUNION\nSELECT 'Checking' AS AccountType, AccountNumber, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%'\nUNION\nSELECT 'Savings' AS AccountType, AccountNumber, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate <> '1%'\nUNION\nSELECT 'Checking' AS AccountType, AccountNumber, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate <> '1%'"
          ]
        },
        {
          "interpretation": "Provide a table that includes the savings and checking accounts with and without a 1% interest rate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%'\nUNION\nSELECT AccountID, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Provide a table that includes both savings and checking accounts with a 1% interest rate and those with different rates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountNumber, CustomerName, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountNumber, CustomerName, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate != '1%' UNION SELECT AccountNumber, CustomerName, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate != '1%'"
          ]
        },
        {
          "interpretation": "Combine the results of savings and checking accounts with and without a 1% interest rate into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CustomerName, Balance, Interest_Rate \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%' \nUNION \nSELECT CustomerName, Balance, Interest_Rate \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Display the overlap and distinction between savings and checking accounts with a 1% interest rate and those without in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Savings' AS AccountType, CustomerName, Balance, Interest_Rate\nFROM Savings_Accounts\nWHERE Interest_Rate = '1%'\nUNION ALL\nSELECT 'Savings' AS AccountType, CustomerName, Balance, Interest_Rate\nFROM Savings_Accounts\nWHERE Interest_Rate != '1%'\nUNION ALL\nSELECT 'Checking' AS AccountType, CustomerName, Balance, Interest_Rate\nFROM Checking_Accounts\nWHERE Interest_Rate = '1%'\nUNION ALL\nSELECT 'Checking' AS AccountType, CustomerName, Balance, Interest_Rate\nFROM Checking_Accounts\nWHERE Interest_Rate != '1%'"
          ]
        }
      ],
      "num_unique_execution_results": 17,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 17,
        "num_unique_queries": 17,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_product/attachment_2tab_val_product.sqlite",
      "db_dump": "CREATE TABLE \"Checking_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, `AccountNumber` INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    OverdraftLimit REAL DEFAULT -500.0,\n    Interest_Rate TEXT);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    StartDate DATE,\n    EndDate DATE,\n    Rate DECIMAL(8,2),\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE \"Savings_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, \"AccountNumber\" INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    Interest_Rate TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountID INTEGER,\n    Type TEXT ,\n    Amount REAL,\n    DateAndTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(AccountID) REFERENCES Savings_Accounts(AccountID),\n    FOREIGN KEY(AccountID) REFERENCES Checking_Accounts(AccountID));\n\nINSERT INTO \"Checking_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,OverdraftLimit,Interest_Rate) VALUES (1,123,'John Doe','2023-01-01',500.0,250.0,'1%'),(2,345,'Jane Smith','2023-01-01',750.0,350.0,'2%');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1990-01-01','john.doe@example.com'),(2,'Jane','Smith','1992-01-01','jane.smith@example.com');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,StartDate,EndDate,Rate) VALUES (1,1,5000,'2023-01-01','2026-01-01',4.5),(2,2,10000,'2023-01-01','2028-01-01',4.75);\nINSERT INTO \"Savings_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,Interest_Rate) VALUES (1,567,'John Doe','2023-01-01',1000.0,'1%'),(2,789,'Jane Smith','2023-01-01',2000.0,'2%');\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,DateAndTime) VALUES (1,1,'Deposit',500.0,'2023-01-01 12:00:00'),(2,2,'Withdrawal',250.0,'2023-01-01 13:00:00');\n",
      "question": "List saving accounts and checking accounts with an interest rate of 1%. Show them in one table.",
      "gold_queries": [
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nWHERE Savings_Accounts.Interest_Rate = \"1%\"\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\"",
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
      "db_dump": "CREATE TABLE Airlines(\n    id INTEGER PRIMARY KEY,\n    airline_name TEXT,\n    type_of_alliance TEXT ,\n    home_airport_id INTEGER,\n    FOREIGN KEY(home_airport_id) REFERENCES Airports(id));\nCREATE TABLE Airports(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    city TEXT,\n    country TEXT,\n    latitude REAL,\n    longitude REAL);\nCREATE TABLE Assignments(\n    assignment_id INTEGER PRIMARY KEY,\n    flight_number INTEGER,\n    pilot_license_number INTEGER,\n    FOREIGN KEY(flight_number) REFERENCES Flights(flight_number),\n    FOREIGN KEY(pilot_license_number) REFERENCES Pilots(pilot_license_number) );\nCREATE TABLE Flights(\n    flight_number INTEGER PRIMARY KEY,\n    departure_time DATETIME,\n    arrival_time DATETIME,\n    airline_id INTEGER,\n    aircraft_model TEXT,\n    source_airport_id INTEGER,\n    destination_airport_id INTEGER,\n    FOREIGN KEY(airline_id) REFERENCES Airlines(id),\n    FOREIGN KEY(source_airport_id) REFERENCES Airports(id),\n    FOREIGN KEY(destination_airport_id) REFERENCES Airports(id));\nCREATE TABLE Pilots(\n    pilot_license_number INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    date_of_birth DATE,\n    rating_level TEXT  );\n\nINSERT INTO \"Airlines\" (id,airline_name,type_of_alliance,home_airport_id) VALUES (1,'Alliance Airways','Airline Alliance',1),(2,'Budget Airlines','Airline Alliance',2),(3,'Fly High Independent','Independent Carrier',3),(4,'Global Travellers','Independent Carrier',4),(5,'Oceanic Flyers','No Alliance',5);\nINSERT INTO \"Airports\" (id,name,city,country,latitude,longitude) VALUES (1,'John F Kennedy International','New York City','USA',40.641987,-73.778604),(2,'Los Angeles International','Los Angeles','USA',33.944826,-118.405889),(3,'Heathrow Airport','London','UK',51.477025,-0.461866),(4,'Dubai International','Dubai','UAE',25.259648,55.285619),(5,'Tokyo Haneda','Tokyo','Japan',35.601194,139.737522);\nINSERT INTO \"Assignments\" (assignment_id,flight_number,pilot_license_number) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,1);\nINSERT INTO \"Flights\" (flight_number,departure_time,arrival_time,airline_id,aircraft_model,source_airport_id,destination_airport_id) VALUES (1,'2022-01-01 10:00:00','2022-01-01 14:00:00',1,'Airbus A320',1,2),(2,'2022-01-01 12:00:00','2022-01-01 17:00:00',2,'Boeing B737',3,4),(3,'2022-01-02 08:00:00','2022-01-02 12:00:00',3,'Airbus A320',4,5),(4,'2022-01-02 10:00:00','2022-01-02 15:00:00',4,'Boeing B787',5,1),(5,'2022-01-03 11:00:00','2022-01-03 16:00:00',5,'Airbus A320',2,3);\nINSERT INTO \"Pilots\" (pilot_license_number,first_name,last_name,date_of_birth,rating_level) VALUES (1,'John','Smith','1990-01-01','A'),(2,'Jane','Doe','1985-05-05','A'),(3,'Alice','Wright','1989-02-12','B'),(4,'Bob','Johnson','1992-03-13','C');\n",
      "question": "Show all the alliance airlines and also show the independent carriers but only with flights using the Airbus A320. Show them in one table.",
      "gold_queries": [
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\" AND Flights.aircraft_model = \"Airbus A320\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show a single table with both alliance and independent airlines, but only those that have flights operating Airbus A320.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT a.airline_name, a.type_of_alliance \nFROM Airlines a \nJOIN Flights f ON a.id = f.airline_id \nWHERE f.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Present a single table with alliance and independent airlines, but only include those that operate Airbus A320.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.type_of_alliance \nFROM Airlines AS T1 \nJOIN Flights AS T2 ON T1.id = T2.airline_id \nWHERE T2.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "List all alliance airlines and independent carriers with their Airbus A320 flights in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Airlines.airline_name, Airlines.type_of_alliance, Flights.flight_number \nFROM Airlines \nJOIN Flights ON Airlines.id = Flights.airline_id \nWHERE Flights.aircraft_model = 'Airbus A320' AND Airlines.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "Combine alliance and independent airlines, but only include those with Airbus A320 flights, in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.airline_name, a.type_of_alliance, f.flight_number\nFROM Airlines a\nJOIN Flights f ON a.id = f.airline_id\nWHERE f.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Show all the alliance airlines and independent carriers that have flights using Airbus A320, in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.airline_name, T1.type_of_alliance\nFROM Airlines AS T1\nJOIN Flights AS T2\nON T1.id = T2.airline_id\nWHERE T2.aircraft_model = 'Airbus A320' AND T1.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
      "db_dump": "CREATE TABLE Airlines(\n    id INTEGER PRIMARY KEY,\n    airline_name TEXT,\n    type_of_alliance TEXT ,\n    home_airport_id INTEGER,\n    FOREIGN KEY(home_airport_id) REFERENCES Airports(id));\nCREATE TABLE Airports(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    city TEXT,\n    country TEXT,\n    latitude REAL,\n    longitude REAL);\nCREATE TABLE Assignments(\n    assignment_id INTEGER PRIMARY KEY,\n    flight_number INTEGER,\n    pilot_license_number INTEGER,\n    FOREIGN KEY(flight_number) REFERENCES Flights(flight_number),\n    FOREIGN KEY(pilot_license_number) REFERENCES Pilots(pilot_license_number) );\nCREATE TABLE Flights(\n    flight_number INTEGER PRIMARY KEY,\n    departure_time DATETIME,\n    arrival_time DATETIME,\n    airline_id INTEGER,\n    aircraft_model TEXT,\n    source_airport_id INTEGER,\n    destination_airport_id INTEGER,\n    FOREIGN KEY(airline_id) REFERENCES Airlines(id),\n    FOREIGN KEY(source_airport_id) REFERENCES Airports(id),\n    FOREIGN KEY(destination_airport_id) REFERENCES Airports(id));\nCREATE TABLE Pilots(\n    pilot_license_number INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    date_of_birth DATE,\n    rating_level TEXT  );\n\nINSERT INTO \"Airlines\" (id,airline_name,type_of_alliance,home_airport_id) VALUES (1,'Alliance Airways','Airline Alliance',1),(2,'Budget Airlines','Airline Alliance',2),(3,'Fly High Independent','Independent Carrier',3),(4,'Global Travellers','Independent Carrier',4),(5,'Oceanic Flyers','No Alliance',5);\nINSERT INTO \"Airports\" (id,name,city,country,latitude,longitude) VALUES (1,'John F Kennedy International','New York City','USA',40.641987,-73.778604),(2,'Los Angeles International','Los Angeles','USA',33.944826,-118.405889),(3,'Heathrow Airport','London','UK',51.477025,-0.461866),(4,'Dubai International','Dubai','UAE',25.259648,55.285619),(5,'Tokyo Haneda','Tokyo','Japan',35.601194,139.737522);\nINSERT INTO \"Assignments\" (assignment_id,flight_number,pilot_license_number) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,1);\nINSERT INTO \"Flights\" (flight_number,departure_time,arrival_time,airline_id,aircraft_model,source_airport_id,destination_airport_id) VALUES (1,'2022-01-01 10:00:00','2022-01-01 14:00:00',1,'Airbus A320',1,2),(2,'2022-01-01 12:00:00','2022-01-01 17:00:00',2,'Boeing B737',3,4),(3,'2022-01-02 08:00:00','2022-01-02 12:00:00',3,'Airbus A320',4,5),(4,'2022-01-02 10:00:00','2022-01-02 15:00:00',4,'Boeing B787',5,1),(5,'2022-01-03 11:00:00','2022-01-03 16:00:00',5,'Airbus A320',2,3);\nINSERT INTO \"Pilots\" (pilot_license_number,first_name,last_name,date_of_birth,rating_level) VALUES (1,'John','Smith','1990-01-01','A'),(2,'Jane','Doe','1985-05-05','A'),(3,'Alice','Wright','1989-02-12','B'),(4,'Bob','Johnson','1992-03-13','C');\n",
      "question": "Show all the flights using an Airbus A320 for airlines that are either with the alliance airlines or are independent carriers. Show them in one table.",
      "gold_queries": [
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE (Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\") AND Flights.aircraft_model = \"Airbus A320\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all the flights that are operated by Airbus A320 and are part of either Airline Alliance or Independent Carrier in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.flight_number, F.departure_time, F.arrival_time, A.airline_name\nFROM Flights F\nJOIN Airlines A ON F.airline_id = A.id\nWHERE F.aircraft_model = 'Airbus A320' AND A.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "Create a table that consolidates all flights using Airbus A320 operated by either Airline Alliance members or Independent Carriers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.flight_number, f.departure_time, f.arrival_time, a.airline_name, a.type_of_alliance\nFROM Flights f\nJOIN Airlines a ON f.airline_id = a.id\nWHERE f.aircraft_model = 'Airbus A320'\nAND a.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "Provide a unified view of all flights using Airbus A320 for airlines that are associated with Airline Alliance or are Independent Carriers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.flight_number, F.departure_time, F.arrival_time, A.airline_name, F.aircraft_model\nFROM Flights F\nJOIN Airlines A ON F.airline_id = A.id\nWHERE F.aircraft_model = 'Airbus A320'\nAND (A.type_of_alliance = 'Airline Alliance' OR A.type_of_alliance = 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "List all the flights using Airbus A320 with the airline being Alliance Airways or Fly High Independent in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Flights.flight_number, Flights.departure_time, Flights.arrival_time, Airlines.airline_name, Flights.source_airport_id, Flights.destination_airport_id\nFROM Flights\nJOIN Airlines ON Flights.airline_id = Airlines.id\nWHERE Flights.aircraft_model = 'Airbus A320'\nAND (Airlines.airline_name = 'Alliance Airways' OR Airlines.airline_name = 'Fly High Independent')"
          ]
        },
        {
          "interpretation": "Show flights with Airbus A320 operated by Airlines that are either Alliance Airways or Independent Carriers within a single output.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Flights.flight_number, Flights.departure_time, Flights.arrival_time, Airports.name AS source_airport, Airports.name AS destination_airport\nFROM Flights\nJOIN Airlines ON Flights.airline_id = Airlines.id\nJOIN Airports ON Flights.source_airport_id = Airports.id AND Flights.destination_airport_id = Airports.id\nWHERE Flights.aircraft_model = 'Airbus A320'\nAND (Airlines.airline_name = 'Alliance Airways' OR Airlines.type_of_alliance = 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "Combine into one table all flights where the aircraft model is Airbus A320 and the airline is either Airline Alliance or Independent Carrier.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.flight_number, F.departure_time, F.arrival_time, F.airline_id, F.aircraft_model, F.source_airport_id, F.destination_airport_id\nFROM Flights F\nJOIN Airlines A ON F.airline_id = A.id\nWHERE F.aircraft_model = 'Airbus A320' AND A.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "Display a single table containing flights using Airbus A320 operated by Alliance Airways or Global Travellers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Flights.flight_number, Flights.departure_time, Flights.arrival_time\nFROM Flights\nJOIN Airlines ON Flights.airline_id = Airlines.id\nWHERE Flights.aircraft_model = 'Airbus A320' AND (Airlines.airline_name = 'Alliance Airways' OR Airlines.airline_name = 'Global Travellers')"
          ]
        },
        {
          "interpretation": "Show all flights using Airbus A320 operated by Airlines that belong to Airline Alliance or Independent Carrier in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.flight_number, f.departure_time, f.arrival_time, f.airline_id, f.aircraft_model \nFROM Flights f \nJOIN Airlines a ON f.airline_id = a.id \nWHERE f.aircraft_model = 'Airbus A320' AND a.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "Show in one table all the flights that use an Airbus A320 and are operated by Alliance Airways or Fly High Independent.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.flight_number, f.departure_time, f.arrival_time, f.aircraft_model\nFROM Flights f\nJOIN Airlines a ON f.airline_id = a.id\nWHERE f.aircraft_model = 'Airbus A320'\nAND a.airline_name IN ('Alliance Airways', 'Fly High Independent')"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
      "db_dump": "CREATE TABLE Airlines(\n    id INTEGER PRIMARY KEY,\n    airline_name TEXT,\n    type_of_alliance TEXT ,\n    home_airport_id INTEGER,\n    FOREIGN KEY(home_airport_id) REFERENCES Airports(id));\nCREATE TABLE Airports(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    city TEXT,\n    country TEXT,\n    latitude REAL,\n    longitude REAL);\nCREATE TABLE Assignments(\n    assignment_id INTEGER PRIMARY KEY,\n    flight_number INTEGER,\n    pilot_license_number INTEGER,\n    FOREIGN KEY(flight_number) REFERENCES Flights(flight_number),\n    FOREIGN KEY(pilot_license_number) REFERENCES Pilots(pilot_license_number) );\nCREATE TABLE Flights(\n    flight_number INTEGER PRIMARY KEY,\n    departure_time DATETIME,\n    arrival_time DATETIME,\n    airline_id INTEGER,\n    aircraft_model TEXT,\n    source_airport_id INTEGER,\n    destination_airport_id INTEGER,\n    FOREIGN KEY(airline_id) REFERENCES Airlines(id),\n    FOREIGN KEY(source_airport_id) REFERENCES Airports(id),\n    FOREIGN KEY(destination_airport_id) REFERENCES Airports(id));\nCREATE TABLE Pilots(\n    pilot_license_number INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    date_of_birth DATE,\n    rating_level TEXT  );\n\nINSERT INTO \"Airlines\" (id,airline_name,type_of_alliance,home_airport_id) VALUES (1,'Alliance Airways','Airline Alliance',1),(2,'Budget Airlines','Airline Alliance',2),(3,'Fly High Independent','Independent Carrier',3),(4,'Global Travellers','Independent Carrier',4),(5,'Oceanic Flyers','No Alliance',5);\nINSERT INTO \"Airports\" (id,name,city,country,latitude,longitude) VALUES (1,'John F Kennedy International','New York City','USA',40.641987,-73.778604),(2,'Los Angeles International','Los Angeles','USA',33.944826,-118.405889),(3,'Heathrow Airport','London','UK',51.477025,-0.461866),(4,'Dubai International','Dubai','UAE',25.259648,55.285619),(5,'Tokyo Haneda','Tokyo','Japan',35.601194,139.737522);\nINSERT INTO \"Assignments\" (assignment_id,flight_number,pilot_license_number) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,1);\nINSERT INTO \"Flights\" (flight_number,departure_time,arrival_time,airline_id,aircraft_model,source_airport_id,destination_airport_id) VALUES (1,'2022-01-01 10:00:00','2022-01-01 14:00:00',1,'Airbus A320',1,2),(2,'2022-01-01 12:00:00','2022-01-01 17:00:00',2,'Boeing B737',3,4),(3,'2022-01-02 08:00:00','2022-01-02 12:00:00',3,'Airbus A320',4,5),(4,'2022-01-02 10:00:00','2022-01-02 15:00:00',4,'Boeing B787',5,1),(5,'2022-01-03 11:00:00','2022-01-03 16:00:00',5,'Airbus A320',2,3);\nINSERT INTO \"Pilots\" (pilot_license_number,first_name,last_name,date_of_birth,rating_level) VALUES (1,'John','Smith','1990-01-01','A'),(2,'Jane','Doe','1985-05-05','A'),(3,'Alice','Wright','1989-02-12','B'),(4,'Bob','Johnson','1992-03-13','C');\n",
      "question": "Show me all alliance airlines and independent carriers with flights using the Airbus A320. Show them in one table.",
      "gold_queries": [
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE (Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\") AND Flights.aircraft_model = \"Airbus A320\"",
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\" AND Flights.aircraft_model = \"Airbus A320\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Airlines with flights to Los Angeles International with Airbus A320",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT A.airline_name\nFROM Airlines A\nJOIN Flights F ON A.id = F.airline_id\nJOIN Airports AP ON F.destination_airport_id = AP.id\nWHERE AP.name = 'Los Angeles International' AND F.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Airlines with type_of_alliance 'Airline Alliance' and type_of_alliance 'Independent Carrier' with flights using Airbus A320",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.airline_name \nFROM Airlines AS T1 \nJOIN Flights AS T2 \nON T1.id = T2.airline_id \nWHERE T1.type_of_alliance IN ('Airline Alliance', 'Independent Carrier') \nAND T2.aircraft_model = 'Airbus A320' \nGROUP BY T1.airline_name"
          ]
        },
        {
          "interpretation": "Alliance Airways and Fly High Independent with flights using Airbus A320",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.flight_number, a.airline_name\nFROM Flights f\nJOIN Airlines a ON f.airline_id = a.id\nWHERE a.airline_name IN ('Alliance Airways', 'Fly High Independent') AND f.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Airlines with flights to Los Angeles International and Heathrow Airport using Airbus A320",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT a.airline_name\nFROM Airlines a\nJOIN Flights f ON a.id = f.airline_id\nJOIN Airports ap ON f.destination_airport_id = ap.id\nWHERE f.aircraft_model = 'Airbus A320' AND (ap.name = 'Los Angeles International' OR ap.name = 'Heathrow Airport')"
          ]
        },
        {
          "interpretation": "Alliance Airways and Global Travellers with flights using Airbus A320",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.flight_number, A.airline_name, F.aircraft_model\nFROM Flights F\nJOIN Airlines A ON F.airline_id = A.id\nWHERE (A.airline_name = 'Alliance Airways' OR A.airline_name = 'Global Travellers')\nAND F.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Airlines with flights to Heathrow Airport with Airbus A320",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT A.airline_name\nFROM Airlines A\nJOIN Flights F ON A.id = F.airline_id\nJOIN Airports AP ON F.destination_airport_id = AP.id\nWHERE AP.name = 'Heathrow Airport' AND F.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Airlines with flights using Airbus A320 on January 2, 2022",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT A.airline_name\nFROM Airlines A\nJOIN Flights F ON A.id = F.airline_id\nWHERE F.aircraft_model = 'Airbus A320'\nAND DATE(F.departure_time) = '2022-01-02'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    AirlineID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Headquarters VARCHAR(50)\n);\nCREATE TABLE AssignPilotToFlight (\n    FlightID INTEGER,\n    PilotID INTEGER,\n    FOREIGN KEY (FlightID) REFERENCES Flights(FlightID),\n    FOREIGN KEY (PilotID) REFERENCES Pilots(PilotID),\n    PRIMARY KEY (FlightID, PilotID)\n);\nCREATE TABLE Flights (\n    FlightID INTEGER PRIMARY KEY,\n    DepartureTime DATETIME,\n    ArrivalTime DATETIME,\n    Origin VARCHAR(2),\n    Destination VARCHAR(2),\n    AircraftType VARCHAR(10),\n    SeatsAvailable INT\n);\nCREATE TABLE Hotels (\n    HotelID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Location VARCHAR(50),\n    Price DECIMAL(8, 2),\n    AccomodationType VARCHAR(20) \n);\nCREATE TABLE Pilots (\n    PilotID INTEGER PRIMARY KEY,\n    FirstName VARCHAR(20),\n    LastName VARCHAR(20),\n    LicenseNumber VARCHAR(15),\n    DateOfBirth DATE\n);\n\nINSERT INTO \"Airlines\" (AirlineID,Name,Headquarters) VALUES (1,'United Airlines','Chicago'),(2,'Delta Airlines','Atlanta'),(3,'Southwest Airlines','Dallas');\nINSERT INTO \"AssignPilotToFlight\" (FlightID,PilotID) VALUES (1,1),(2,2),(3,3);\nINSERT INTO \"Flights\" (FlightID,DepartureTime,ArrivalTime,Origin,Destination,AircraftType,SeatsAvailable) VALUES (1,'2023-07-01 10:00','2023-07-01 14:00','LA','SF','Boeing 737',100),(2,'2023-07-01 11:00','2023-07-01 15:00','SF','LA','Airbus A320',90),(3,'2023-07-02 08:00','2023-07-02 12:00','NY','MI','Embraer E175',100);\nINSERT INTO \"Hotels\" (HotelID,Name,Location,Price,AccomodationType) VALUES (1,'Airport Hotel','Inside the airport premises',150,'Hotel'),(2,'Sleep Pod','Outside the airport near terminal',150,'Pod'),(3,'Another Airport Hotel','Inside the airport premises',200,'Hotel'),(4,'Another Sleep Pod','Outside the airport near terminal',200,'Pod'),(5,'Grand Plaza','Close to the city center',250,'Resort'),(6,'Economy Inn','Far from the city center',50,'Motel');\nINSERT INTO \"Pilots\" (PilotID,FirstName,LastName,LicenseNumber,DateOfBirth) VALUES (1,'John','Doe','ABCD1234','1980-06-01'),(2,'Jane','Smith','EFGH5678','1990-05-01'),(3,'Alice','Wonderland','XYZL9876','1985-08-01');\n",
      "question": "Provide a list of all hotels and also provide a list of pods that cost 150. Show them in one table.",
      "gold_queries": [
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\" AND Hotels.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a list of all hotels and a list of pods that cost 150, maintaining them in one unified table with a distinction between hotels and pods.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, 'Hotel' AS Type, Price FROM Hotels WHERE Price = 150 AND AccomodationType = 'Hotel'\nUNION ALL\nSELECT Name, Location, 'Pod' AS Type, Price FROM Hotels WHERE Price = 150 AND AccomodationType = 'Pod'"
          ]
        },
        {
          "interpretation": "Provide a list of all hotels and a separate list of all pods that cost 150, showing them in two tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType = 'Hotel'",
            "SELECT Name, Location, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType = 'Pod'"
          ]
        },
        {
          "interpretation": "Provide a list of all hotels and a separate list of all pods that cost 150, showing them in two tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType = 'Hotel'",
            "SELECT Name, Location, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType = 'Pod'"
          ]
        },
        {
          "interpretation": "Provide a single table that lists all hotels and, in an additional column, lists only the pods that cost 150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType, CASE WHEN AccomodationType = 'Pod' AND Price = 150 THEN Name END AS Pod150\nFROM Hotels"
          ]
        },
        {
          "interpretation": "Provide a count of all hotels and the number of pods that cost 150, showing the results in a single table with two columns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) AS TotalHotels, COUNT(CASE WHEN AccomodationType = 'Pod' AND Price = 150 THEN 1 END) AS PodCount FROM Hotels"
          ]
        },
        {
          "interpretation": "Provide a table of all hotels and a separate section for pods that cost 150, but list all in the same table, distinguished by a row identifier.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Hotel' AS Type, Name, Location, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType = 'Hotel'\nUNION ALL\nSELECT 'Pod' AS Type, Name, Location, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType = 'Pod'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 8,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    AirlineID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Headquarters VARCHAR(50)\n);\nCREATE TABLE AssignPilotToFlight (\n    FlightID INTEGER,\n    PilotID INTEGER,\n    FOREIGN KEY (FlightID) REFERENCES Flights(FlightID),\n    FOREIGN KEY (PilotID) REFERENCES Pilots(PilotID),\n    PRIMARY KEY (FlightID, PilotID)\n);\nCREATE TABLE Flights (\n    FlightID INTEGER PRIMARY KEY,\n    DepartureTime DATETIME,\n    ArrivalTime DATETIME,\n    Origin VARCHAR(2),\n    Destination VARCHAR(2),\n    AircraftType VARCHAR(10),\n    SeatsAvailable INT\n);\nCREATE TABLE Hotels (\n    HotelID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Location VARCHAR(50),\n    Price DECIMAL(8, 2),\n    AccomodationType VARCHAR(20) \n);\nCREATE TABLE Pilots (\n    PilotID INTEGER PRIMARY KEY,\n    FirstName VARCHAR(20),\n    LastName VARCHAR(20),\n    LicenseNumber VARCHAR(15),\n    DateOfBirth DATE\n);\n\nINSERT INTO \"Airlines\" (AirlineID,Name,Headquarters) VALUES (1,'United Airlines','Chicago'),(2,'Delta Airlines','Atlanta'),(3,'Southwest Airlines','Dallas');\nINSERT INTO \"AssignPilotToFlight\" (FlightID,PilotID) VALUES (1,1),(2,2),(3,3);\nINSERT INTO \"Flights\" (FlightID,DepartureTime,ArrivalTime,Origin,Destination,AircraftType,SeatsAvailable) VALUES (1,'2023-07-01 10:00','2023-07-01 14:00','LA','SF','Boeing 737',100),(2,'2023-07-01 11:00','2023-07-01 15:00','SF','LA','Airbus A320',90),(3,'2023-07-02 08:00','2023-07-02 12:00','NY','MI','Embraer E175',100);\nINSERT INTO \"Hotels\" (HotelID,Name,Location,Price,AccomodationType) VALUES (1,'Airport Hotel','Inside the airport premises',150,'Hotel'),(2,'Sleep Pod','Outside the airport near terminal',150,'Pod'),(3,'Another Airport Hotel','Inside the airport premises',200,'Hotel'),(4,'Another Sleep Pod','Outside the airport near terminal',200,'Pod'),(5,'Grand Plaza','Close to the city center',250,'Resort'),(6,'Economy Inn','Far from the city center',50,'Motel');\nINSERT INTO \"Pilots\" (PilotID,FirstName,LastName,LicenseNumber,DateOfBirth) VALUES (1,'John','Doe','ABCD1234','1980-06-01'),(2,'Jane','Smith','EFGH5678','1990-05-01'),(3,'Alice','Wonderland','XYZL9876','1985-08-01');\n",
      "question": "List all hotels and pods that cost 150. Show them in one table.",
      "gold_queries": [
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE (Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\") AND Hotels.Price = 150",
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\" AND Hotels.Price = 150"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    AirlineID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Headquarters VARCHAR(50)\n);\nCREATE TABLE AssignPilotToFlight (\n    FlightID INTEGER,\n    PilotID INTEGER,\n    FOREIGN KEY (FlightID) REFERENCES Flights(FlightID),\n    FOREIGN KEY (PilotID) REFERENCES Pilots(PilotID),\n    PRIMARY KEY (FlightID, PilotID)\n);\nCREATE TABLE Flights (\n    FlightID INTEGER PRIMARY KEY,\n    DepartureTime DATETIME,\n    ArrivalTime DATETIME,\n    Origin VARCHAR(2),\n    Destination VARCHAR(2),\n    AircraftType VARCHAR(10),\n    SeatsAvailable INT\n);\nCREATE TABLE Hotels (\n    HotelID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Location VARCHAR(50),\n    Price DECIMAL(8, 2),\n    AccomodationType VARCHAR(20) \n);\nCREATE TABLE Pilots (\n    PilotID INTEGER PRIMARY KEY,\n    FirstName VARCHAR(20),\n    LastName VARCHAR(20),\n    LicenseNumber VARCHAR(15),\n    DateOfBirth DATE\n);\n\nINSERT INTO \"Airlines\" (AirlineID,Name,Headquarters) VALUES (1,'United Airlines','Chicago'),(2,'Delta Airlines','Atlanta'),(3,'Southwest Airlines','Dallas');\nINSERT INTO \"AssignPilotToFlight\" (FlightID,PilotID) VALUES (1,1),(2,2),(3,3);\nINSERT INTO \"Flights\" (FlightID,DepartureTime,ArrivalTime,Origin,Destination,AircraftType,SeatsAvailable) VALUES (1,'2023-07-01 10:00','2023-07-01 14:00','LA','SF','Boeing 737',100),(2,'2023-07-01 11:00','2023-07-01 15:00','SF','LA','Airbus A320',90),(3,'2023-07-02 08:00','2023-07-02 12:00','NY','MI','Embraer E175',100);\nINSERT INTO \"Hotels\" (HotelID,Name,Location,Price,AccomodationType) VALUES (1,'Airport Hotel','Inside the airport premises',150,'Hotel'),(2,'Sleep Pod','Outside the airport near terminal',150,'Pod'),(3,'Another Airport Hotel','Inside the airport premises',200,'Hotel'),(4,'Another Sleep Pod','Outside the airport near terminal',200,'Pod'),(5,'Grand Plaza','Close to the city center',250,'Resort'),(6,'Economy Inn','Far from the city center',50,'Motel');\nINSERT INTO \"Pilots\" (PilotID,FirstName,LastName,LicenseNumber,DateOfBirth) VALUES (1,'John','Doe','ABCD1234','1980-06-01'),(2,'Jane','Smith','EFGH5678','1990-05-01'),(3,'Alice','Wonderland','XYZL9876','1985-08-01');\n",
      "question": "Which hotels that cost 150 and which pods have the same price? Show them in one table.",
      "gold_queries": [
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE (Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\") AND Hotels.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show both 150-priced hotels and pods in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType FROM Hotels WHERE (Price = 150 AND AccomodationType = 'Hotel') OR (Price = 150 AND AccomodationType = 'Pod')"
          ]
        },
        {
          "interpretation": "Which kind of accommodations (hotels and pods) are priced at 150? Present these in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccomodationType FROM Hotels WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Which accommodations (hotels and pods) are 150 dollars and list them together in one table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, AccomodationType \nFROM Hotels \nWHERE Price = 150"
          ]
        },
        {
          "interpretation": "Hotels and pods that are 150, display their details in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Hotels WHERE Price = 150 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        },
        {
          "interpretation": "List hotels and pods that are 150 in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Hotels WHERE Price = 150"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
      "db_dump": "CREATE TABLE EpisodeGuests(\n    id INTEGER PRIMARY KEY,\n    episode_id INTEGER,\n    guest_id INTEGER,\n    role TEXT,\n    appearance_duration INTEGER,\n    FOREIGN KEY(episode_id) REFERENCES Episodes(id),\n    FOREIGN KEY(guest_id) REFERENCES Guests(id)\n);\nCREATE TABLE Episodes(\n    id INTEGER PRIMARY KEY,\n    show_id INTEGER,\n    episode_number INTEGER,\n    release_date DATE,\n    duration INTEGER,\n    description TEXT,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY,\n    full_name TEXT,\n    occupation TEXT,\n    guest_on INTEGER,\n    appearance_episode_number INTEGER,\n    FOREIGN KEY(guest_on) REFERENCES Shows(title)\n);\nCREATE TABLE Podcasters(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT,\n    years_experience INTEGER\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY,\n    reviewer_name TEXT,\n    rating INTEGER ,\n    comments TEXT,\n    show_id INTEGER,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Shows(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    genre TEXT,\n    network TEXT,\n    audio_format TEXT ,\n    host TEXT,\n    FOREIGN KEY(host) REFERENCES Podcasters(name)\n);\n\nINSERT INTO \"EpisodeGuests\" (id,episode_id,guest_id,role,appearance_duration) VALUES (1,1,1,'Interviewee',25),(2,1,2,'Panelist',25);\nINSERT INTO \"Episodes\" (id,show_id,episode_number,release_date,duration,description) VALUES (1,1,1,'2023-01-01',60,'Episode about comedy.'),(2,2,1,'2023-01-08',60,'Episode about coffee.');\nINSERT INTO \"Guests\" (id,full_name,occupation,guest_on,appearance_episode_number) VALUES (1,'John Smith','Actor','The Alex Johnson Show',1),(2,'Emily Davis','Author','Laughing Matters',1);\nINSERT INTO \"Podcasters\" (id,name,location,years_experience) VALUES (1,'Alex Johnson','New York',10),(2,'Jane Doe','Los Angeles',8);\nINSERT INTO \"Reviews\" (id,reviewer_name,rating,comments,show_id,review_date) VALUES (1,'Alice Brown',5,'Great podcast!',1,'2024-03-07 21:13:47'),(2,'Bob White',4,'Funny episodes.',2,'2024-03-07 21:13:47');\nINSERT INTO \"Shows\" (id,title,genre,network,audio_format,host) VALUES (1,'The Alex Johnson Show','Comedy','ABC','Podcast','Alex Johnson'),(2,'Laughing Matters','Comedy','NBC','Podcast','Jane Doe'),(3,'The Morning Rush','Talk Show','CBS Radio','Radio Show','Alex Johnson'),(4,'Morning Coffee','Talk Show','Fox Radio','Radio Show','Jane Doe');\n",
      "question": "Display podcasts and radio shows with hosts with 10 years of experience. Show them in one table.",
      "gold_queries": [
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE (Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show') AND Podcasters.years_experience = 10",
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show' AND Podcasters.years_experience = 10"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display podcasts and radio shows hosted by someone with 10 years of broadcasting experience. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format, S.host \nFROM Shows S \nJOIN Podcasters P ON S.host = P.name \nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Display podcasts and radio shows where the host has accumulated 10 years of experience. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Display podcasts and radio shows where the guest has 10 years of experience in the industry. Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.genre, s.network, s.audio_format\nFROM Shows s\nJOIN Episodes e ON s.id = e.show_id\nJOIN EpisodeGuests eg ON e.id = eg.episode_id\nJOIN Guests g ON eg.guest_id = g.id\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10\nGROUP BY s.title, s.genre, s.network, s.audio_format"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
      "db_dump": "CREATE TABLE EpisodeGuests(\n    id INTEGER PRIMARY KEY,\n    episode_id INTEGER,\n    guest_id INTEGER,\n    role TEXT,\n    appearance_duration INTEGER,\n    FOREIGN KEY(episode_id) REFERENCES Episodes(id),\n    FOREIGN KEY(guest_id) REFERENCES Guests(id)\n);\nCREATE TABLE Episodes(\n    id INTEGER PRIMARY KEY,\n    show_id INTEGER,\n    episode_number INTEGER,\n    release_date DATE,\n    duration INTEGER,\n    description TEXT,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY,\n    full_name TEXT,\n    occupation TEXT,\n    guest_on INTEGER,\n    appearance_episode_number INTEGER,\n    FOREIGN KEY(guest_on) REFERENCES Shows(title)\n);\nCREATE TABLE Podcasters(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT,\n    years_experience INTEGER\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY,\n    reviewer_name TEXT,\n    rating INTEGER ,\n    comments TEXT,\n    show_id INTEGER,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Shows(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    genre TEXT,\n    network TEXT,\n    audio_format TEXT ,\n    host TEXT,\n    FOREIGN KEY(host) REFERENCES Podcasters(name)\n);\n\nINSERT INTO \"EpisodeGuests\" (id,episode_id,guest_id,role,appearance_duration) VALUES (1,1,1,'Interviewee',25),(2,1,2,'Panelist',25);\nINSERT INTO \"Episodes\" (id,show_id,episode_number,release_date,duration,description) VALUES (1,1,1,'2023-01-01',60,'Episode about comedy.'),(2,2,1,'2023-01-08',60,'Episode about coffee.');\nINSERT INTO \"Guests\" (id,full_name,occupation,guest_on,appearance_episode_number) VALUES (1,'John Smith','Actor','The Alex Johnson Show',1),(2,'Emily Davis','Author','Laughing Matters',1);\nINSERT INTO \"Podcasters\" (id,name,location,years_experience) VALUES (1,'Alex Johnson','New York',10),(2,'Jane Doe','Los Angeles',8);\nINSERT INTO \"Reviews\" (id,reviewer_name,rating,comments,show_id,review_date) VALUES (1,'Alice Brown',5,'Great podcast!',1,'2024-03-07 21:13:47'),(2,'Bob White',4,'Funny episodes.',2,'2024-03-07 21:13:47');\nINSERT INTO \"Shows\" (id,title,genre,network,audio_format,host) VALUES (1,'The Alex Johnson Show','Comedy','ABC','Podcast','Alex Johnson'),(2,'Laughing Matters','Comedy','NBC','Podcast','Jane Doe'),(3,'The Morning Rush','Talk Show','CBS Radio','Radio Show','Alex Johnson'),(4,'Morning Coffee','Talk Show','Fox Radio','Radio Show','Jane Doe');\n",
      "question": "Show a list of all podcasts and also provide a list of radio shows with hosts with 10 years of experience. Show them in one table.",
      "gold_queries": [
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show' AND Podcasters.years_experience = 10"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a unified table that includes all podcasts and radio shows, but restrict the view to only those shows with a 10-year experienced host.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.id, T1.title, T1.genre, T1.network, T1.audio_format, T1.host\nFROM Shows AS T1\nJOIN Podcasters AS T2 ON T1.host = T2.name\nWHERE T2.years_experience = 10"
          ]
        },
        {
          "interpretation": "Display a consolidated table of all podcast and radio show entries, but only include hosts with 10 years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.genre, s.network, s.audio_format, s.host, p.years_experience\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10"
          ]
        },
        {
          "interpretation": "Show a single table of all podcast and radio show records but exclude any that do not have a host with 10 years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format, S.host\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
      "db_dump": "CREATE TABLE EpisodeGuests(\n    id INTEGER PRIMARY KEY,\n    episode_id INTEGER,\n    guest_id INTEGER,\n    role TEXT,\n    appearance_duration INTEGER,\n    FOREIGN KEY(episode_id) REFERENCES Episodes(id),\n    FOREIGN KEY(guest_id) REFERENCES Guests(id)\n);\nCREATE TABLE Episodes(\n    id INTEGER PRIMARY KEY,\n    show_id INTEGER,\n    episode_number INTEGER,\n    release_date DATE,\n    duration INTEGER,\n    description TEXT,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY,\n    full_name TEXT,\n    occupation TEXT,\n    guest_on INTEGER,\n    appearance_episode_number INTEGER,\n    FOREIGN KEY(guest_on) REFERENCES Shows(title)\n);\nCREATE TABLE Podcasters(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT,\n    years_experience INTEGER\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY,\n    reviewer_name TEXT,\n    rating INTEGER ,\n    comments TEXT,\n    show_id INTEGER,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Shows(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    genre TEXT,\n    network TEXT,\n    audio_format TEXT ,\n    host TEXT,\n    FOREIGN KEY(host) REFERENCES Podcasters(name)\n);\n\nINSERT INTO \"EpisodeGuests\" (id,episode_id,guest_id,role,appearance_duration) VALUES (1,1,1,'Interviewee',25),(2,1,2,'Panelist',25);\nINSERT INTO \"Episodes\" (id,show_id,episode_number,release_date,duration,description) VALUES (1,1,1,'2023-01-01',60,'Episode about comedy.'),(2,2,1,'2023-01-08',60,'Episode about coffee.');\nINSERT INTO \"Guests\" (id,full_name,occupation,guest_on,appearance_episode_number) VALUES (1,'John Smith','Actor','The Alex Johnson Show',1),(2,'Emily Davis','Author','Laughing Matters',1);\nINSERT INTO \"Podcasters\" (id,name,location,years_experience) VALUES (1,'Alex Johnson','New York',10),(2,'Jane Doe','Los Angeles',8);\nINSERT INTO \"Reviews\" (id,reviewer_name,rating,comments,show_id,review_date) VALUES (1,'Alice Brown',5,'Great podcast!',1,'2024-03-07 21:13:47'),(2,'Bob White',4,'Funny episodes.',2,'2024-03-07 21:13:47');\nINSERT INTO \"Shows\" (id,title,genre,network,audio_format,host) VALUES (1,'The Alex Johnson Show','Comedy','ABC','Podcast','Alex Johnson'),(2,'Laughing Matters','Comedy','NBC','Podcast','Jane Doe'),(3,'The Morning Rush','Talk Show','CBS Radio','Radio Show','Alex Johnson'),(4,'Morning Coffee','Talk Show','Fox Radio','Radio Show','Jane Doe');\n",
      "question": "Which podcasts are by podcasters with 10 years of experience and which radio shows are by hosts with the same years of experience? Show them in one table.",
      "gold_queries": [
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE (Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show') AND Podcasters.years_experience = 10"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Which podcasts are hosted by podcasters with 10 years of experience and which radio shows are hosted by hosts with the same years of experience? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Podcast titles and radio show titles that are hosted by individuals with 10 years of experience, shown in a single table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT title \nFROM Shows \nJOIN Podcasters ON Shows.host = Podcasters.name \nWHERE Podcasters.years_experience = 10"
          ]
        },
        {
          "interpretation": "Podcasts hosted by podcasters with 10 years of experience and radio shows hosted by hosts with the same years of experience displayed together in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.genre, s.network, s.audio_format, p.name, p.years_experience\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10\nAND (s.audio_format = 'Podcast' OR s.audio_format = 'Radio Show')"
          ]
        },
        {
          "interpretation": "Podcasts and radio shows hosted by people with 10 years of experience, presented in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.genre, s.network, s.audio_format, s.host\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10"
          ]
        },
        {
          "interpretation": "Podcast and radio show titles, along with the type (podcast or radio show), hosted by individuals with 10 years of experience, shown in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.audio_format AS type\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_higher_education_institutions/attachment_1tab_val_higher_education_institutions.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Department TEXT,\n    Credit Hours INTEGER );\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID));\nCREATE TABLE Professors (\n    ProfessorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Department TEXT,\n    OfficeNumber TEXT);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    DateOfBirth DATE,\n    HigherEducationInstitution TEXT,\n    AcademicProgram TEXT, FullName TEXT);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,Department,Credit) VALUES (1,'Calculus I','Introduction to calculus with an emphasis on limits, derivatives, and integrals.','Math',4),(2,'General Physics','This course covers classical mechanics, electricity and magnetism, optics, thermodynamics, and modern physics.','Physics',4),(3,'American Literature','An examination of American literature through various time periods and genres.','English',3),(4,'Human Biology','Exploration of human biology including cell structure and function, genetics, and physiological systems.','Biology',3),(5,'World History II','Continuation of World History I, covering events from the fall of Rome until today.','History',3);\nINSERT INTO \"Professors\" (ProfessorID,FirstName,LastName,Department,OfficeNumber) VALUES (1,'Dr.','White','Math','A101'),(2,'Dr.','Black','Physics','B101'),(3,'Dr.','Green','English','C101'),(4,'Dr.','Blue','Biology','D101'),(5,'Dr.','Red','History','E101');\nINSERT INTO \"Students\" (StudentID,DateOfBirth,HigherEducationInstitution,AcademicProgram,FullName) VALUES (1,'2000-09-15','University','Business Administration','John Doe'),(2,'1998-10-23','University','Computer Science','Jane Smith'),(3,'1996-11-27','College','Business Administration','Michael Johnson'),(4,'1995-12-11','College','Mathematics','Emily Williams'),(5,'1994-02-02','High School','Physics','David Brown');\n",
      "question": "Provide a list of all university students and also provide a list of college students studying Business Administration. Show them in one table.",
      "gold_queries": [
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\" AND Students.AcademicProgram = \"Business Administration\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a list of university students only and show all students studying Business Administration in a different table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University'",
            "SELECT FullName FROM Students WHERE AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Provide a list of all students, showing a count of university and college students in one column, and a count of Business Administration students in another column.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    SUM(CASE WHEN HigherEducationInstitution IN ('University', 'College') THEN 1 ELSE 0 END) AS University_College_Count,\n    SUM(CASE WHEN AcademicProgram = 'Business Administration' THEN 1 ELSE 0 END) AS Business_Administration_Count\nFROM Students"
          ]
        },
        {
          "interpretation": "Provide a list of all students, separating university students from college students in the table, and show separate columns for Business Administration students.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    (CASE WHEN HigherEducationInstitution = 'University' THEN FullName ELSE NULL END) AS UniversityStudents,\n    (CASE WHEN HigherEducationInstitution = 'College' THEN FullName ELSE NULL END) AS CollegeStudents,\n    (CASE WHEN AcademicProgram = 'Business Administration' THEN FullName ELSE NULL END) AS BusinessAdministrationStudents\nFROM Students"
          ]
        },
        {
          "interpretation": "Provide a list of all university students and a separate list of college students studying Business Administration in two separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'",
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University'"
          ]
        },
        {
          "interpretation": "Provide a list of university students only and show all students studying Business Administration in a different table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University'",
            "SELECT FullName FROM Students WHERE AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Provide a list of college students only and show all students studying Business Administration in a different table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, AcademicProgram, HigherEducationInstitution \nFROM Students \nWHERE AcademicProgram = 'Business Administration' AND HigherEducationInstitution = 'College'",
            "SELECT FullName, AcademicProgram, HigherEducationInstitution \nFROM Students \nWHERE HigherEducationInstitution = 'College'"
          ]
        },
        {
          "interpretation": "Provide a list of college students only and show all students studying Business Administration in a different table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, AcademicProgram, HigherEducationInstitution \nFROM Students \nWHERE AcademicProgram = 'Business Administration' AND HigherEducationInstitution = 'College'",
            "SELECT FullName, AcademicProgram, HigherEducationInstitution \nFROM Students \nWHERE HigherEducationInstitution = 'College'"
          ]
        },
        {
          "interpretation": "Provide a list of all university students and highlight the college students studying Business Administration in the same table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, HigherEducationInstitution, \n       CASE WHEN AcademicProgram = 'Business Administration' AND HigherEducationInstitution = 'College' THEN 'Highlight' ELSE '' END AS Highlight\nFROM Students"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 13,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_higher_education_institutions/attachment_1tab_val_higher_education_institutions.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Department TEXT,\n    Credit Hours INTEGER );\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID));\nCREATE TABLE Professors (\n    ProfessorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Department TEXT,\n    OfficeNumber TEXT);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    DateOfBirth DATE,\n    HigherEducationInstitution TEXT,\n    AcademicProgram TEXT, FullName TEXT);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,Department,Credit) VALUES (1,'Calculus I','Introduction to calculus with an emphasis on limits, derivatives, and integrals.','Math',4),(2,'General Physics','This course covers classical mechanics, electricity and magnetism, optics, thermodynamics, and modern physics.','Physics',4),(3,'American Literature','An examination of American literature through various time periods and genres.','English',3),(4,'Human Biology','Exploration of human biology including cell structure and function, genetics, and physiological systems.','Biology',3),(5,'World History II','Continuation of World History I, covering events from the fall of Rome until today.','History',3);\nINSERT INTO \"Professors\" (ProfessorID,FirstName,LastName,Department,OfficeNumber) VALUES (1,'Dr.','White','Math','A101'),(2,'Dr.','Black','Physics','B101'),(3,'Dr.','Green','English','C101'),(4,'Dr.','Blue','Biology','D101'),(5,'Dr.','Red','History','E101');\nINSERT INTO \"Students\" (StudentID,DateOfBirth,HigherEducationInstitution,AcademicProgram,FullName) VALUES (1,'2000-09-15','University','Business Administration','John Doe'),(2,'1998-10-23','University','Computer Science','Jane Smith'),(3,'1996-11-27','College','Business Administration','Michael Johnson'),(4,'1995-12-11','College','Mathematics','Emily Williams'),(5,'1994-02-02','High School','Physics','David Brown');\n",
      "question": "List all university students and college students studying Business Administration. Show them in one table.",
      "gold_queries": [
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE (Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\") AND Students.AcademicProgram = \"Business Administration\"",
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\" AND Students.AcademicProgram = \"Business Administration\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Produce a table that includes all Business Administration students from University and College in a unified output.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution IN ('University', 'College') AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Retrieve all students from University and College where the AcademicProgram is Business Administration and present them in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StudentID, DateOfBirth, HigherEducationInstitution, AcademicProgram, FullName \nFROM Students \nWHERE HigherEducationInstitution IN ('University', 'College') \nAND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "List all students studying Business Administration from both the University and College, and show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, AcademicProgram, HigherEducationInstitution \nFROM Students \nWHERE AcademicProgram = 'Business Administration'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_higher_education_institutions/attachment_1tab_val_higher_education_institutions.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Department TEXT,\n    Credit Hours INTEGER );\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID));\nCREATE TABLE Professors (\n    ProfessorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Department TEXT,\n    OfficeNumber TEXT);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    DateOfBirth DATE,\n    HigherEducationInstitution TEXT,\n    AcademicProgram TEXT, FullName TEXT);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,Department,Credit) VALUES (1,'Calculus I','Introduction to calculus with an emphasis on limits, derivatives, and integrals.','Math',4),(2,'General Physics','This course covers classical mechanics, electricity and magnetism, optics, thermodynamics, and modern physics.','Physics',4),(3,'American Literature','An examination of American literature through various time periods and genres.','English',3),(4,'Human Biology','Exploration of human biology including cell structure and function, genetics, and physiological systems.','Biology',3),(5,'World History II','Continuation of World History I, covering events from the fall of Rome until today.','History',3);\nINSERT INTO \"Professors\" (ProfessorID,FirstName,LastName,Department,OfficeNumber) VALUES (1,'Dr.','White','Math','A101'),(2,'Dr.','Black','Physics','B101'),(3,'Dr.','Green','English','C101'),(4,'Dr.','Blue','Biology','D101'),(5,'Dr.','Red','History','E101');\nINSERT INTO \"Students\" (StudentID,DateOfBirth,HigherEducationInstitution,AcademicProgram,FullName) VALUES (1,'2000-09-15','University','Business Administration','John Doe'),(2,'1998-10-23','University','Computer Science','Jane Smith'),(3,'1996-11-27','College','Business Administration','Michael Johnson'),(4,'1995-12-11','College','Mathematics','Emily Williams'),(5,'1994-02-02','High School','Physics','David Brown');\n",
      "question": "Which university students study Business Administration and which college students have the same academic program? Show them in one table.",
      "gold_queries": [
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE (Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\") AND Students.AcademicProgram = \"Business Administration\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Which college students are in Business Administration, and which college students share the same program? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT FullName \nFROM Students \nWHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Which university students study Business Administration, and which university students have the same academic program? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName \nFROM Students \nWHERE HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration' \nUNION\nSELECT FullName \nFROM Students \nWHERE HigherEducationInstitution = 'University' AND AcademicProgram = (SELECT AcademicProgram FROM Students WHERE FullName = 'John Doe')"
          ]
        },
        {
          "interpretation": "University students that study Business Administration and their counterparts in the same university program. Represent this data in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, AcademicProgram, HigherEducationInstitution \nFROM Students \nWHERE AcademicProgram = 'Business Administration' \nAND HigherEducationInstitution = 'University'"
          ]
        },
        {
          "interpretation": "Which university students are majoring in Business Administration, and which university students are majoring in the same field? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, AcademicProgram FROM Students WHERE HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Which university students are in Business Administration, and which university students share the same program? Show them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, HigherEducationInstitution \nFROM Students \nWHERE AcademicProgram = 'Business Administration' AND HigherEducationInstitution = 'University'"
          ]
        },
        {
          "interpretation": "College students that study Business Administration and their counterparts in the same college program. Represent this data in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "College students studying Business Administration and other college students in the same program. Represent this data in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, DateOfBirth, AcademicProgram FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    GradeLevel INT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE LearningActivities (\n    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ActivityType TEXT ,\n    Purpose TEXT,\n    Date DATE,\n    ClassID INTEGER,\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\n\nINSERT INTO \"Classes\" (ClassID,Name,GradeLevel,TeacherID) VALUES (1,'Algebra I',9,1),(2,'World History',10,2),(3,'American Literature',11,3),(4,'Physics',10,4),(5,'Advanced Art',12,5);\nINSERT INTO \"LearningActivities\" (ActivityID,ActivityType,Purpose,Date,ClassID) VALUES (1,'Field Trip','Real-world Application','2023-03-15',1),(2,'Field Trip','Team Building','2023-03-22',2),(3,'Study Group','Real-world Application','2023-03-18',3),(4,'Study Group','Preparation for Test','2023-03-25',4),(5,'Online Lecture','Review Material','2023-03-20',5);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-10-07'),(2,'Jane','Smith','2002-08-21'),(3,'Michael','Johnson','2005-06-29'),(4,'Emily','Williams','2004-09-15'),(5,'David','Brown','2006-07-23');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Math'),(2,'Ms.','Martin','History'),(3,'Mrs.','Wilson','English'),(4,'Mr.','Hall','Science'),(5,'Mrs.','Jackson','Art');\n",
      "question": "List all field trip and study group classes where either is for a real-world application. Show them in one table.",
      "gold_queries": [
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE (LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\") AND LearningActivities.Purpose = \"Real-world Application\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all classes that have either a field trip or a study group where the purpose is real-world application, presenting the activities in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Classes.Name, LearningActivities.ActivityType, LearningActivities.Purpose, LearningActivities.Date\nFROM LearningActivities\nJOIN Classes ON LearningActivities.ClassID = Classes.ClassID\nWHERE (LearningActivities.ActivityType = 'Field Trip' AND LearningActivities.Purpose = 'Real-world Application')\n   OR (LearningActivities.ActivityType = 'Study Group' AND LearningActivities.Purpose = 'Real-world Application')"
          ]
        },
        {
          "interpretation": "List all classes that have either a field trip or a study group activity with the purpose of real-world application, along with their respective activities, in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Name, LA.ActivityType, LA.Purpose\nFROM Classes C\nJOIN LearningActivities LA ON C.ClassID = LA.ClassID\nWHERE LA.ActivityType IN ('Field Trip', 'Study Group') AND LA.Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "List all field trips and study groups for classes with a real-world application purpose, consolidated in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityType, Purpose, Date, ClassID\nFROM LearningActivities\nWHERE Purpose = 'Real-world Application' AND (ActivityType = 'Field Trip' OR ActivityType = 'Study Group')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    GradeLevel INT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE LearningActivities (\n    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ActivityType TEXT ,\n    Purpose TEXT,\n    Date DATE,\n    ClassID INTEGER,\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\n\nINSERT INTO \"Classes\" (ClassID,Name,GradeLevel,TeacherID) VALUES (1,'Algebra I',9,1),(2,'World History',10,2),(3,'American Literature',11,3),(4,'Physics',10,4),(5,'Advanced Art',12,5);\nINSERT INTO \"LearningActivities\" (ActivityID,ActivityType,Purpose,Date,ClassID) VALUES (1,'Field Trip','Real-world Application','2023-03-15',1),(2,'Field Trip','Team Building','2023-03-22',2),(3,'Study Group','Real-world Application','2023-03-18',3),(4,'Study Group','Preparation for Test','2023-03-25',4),(5,'Online Lecture','Review Material','2023-03-20',5);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-10-07'),(2,'Jane','Smith','2002-08-21'),(3,'Michael','Johnson','2005-06-29'),(4,'Emily','Williams','2004-09-15'),(5,'David','Brown','2006-07-23');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Math'),(2,'Ms.','Martin','History'),(3,'Mrs.','Wilson','English'),(4,'Mr.','Hall','Science'),(5,'Mrs.','Jackson','Art');\n",
      "question": "List all field trip classes and study group classes that are for real-world applications. Show them in one table.",
      "gold_queries": [
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE (LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\") AND LearningActivities.Purpose = \"Real-world Application\"",
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\" AND LearningActivities.Purpose = \"Real-world Application\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Merge the results of Field Trip classes and Study Group classes with 'Real-world Application' purpose into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM LearningActivities WHERE ActivityType = 'Field Trip' AND Purpose = 'Real-world Application'\nUNION\nSELECT * FROM LearningActivities WHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "List all classes that have either a Field Trip with a Purpose of 'Real-world Application' or a Study Group with a Purpose of 'Real-world Application'.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Classes.Name\nFROM Classes\nJOIN LearningActivities ON Classes.ClassID = LearningActivities.ClassID\nWHERE (LearningActivities.ActivityType = 'Field Trip' AND LearningActivities.Purpose = 'Real-world Application')\n   OR (LearningActivities.ActivityType = 'Study Group' AND LearningActivities.Purpose = 'Real-world Application')"
          ]
        },
        {
          "interpretation": "Generate a single table that includes both Field Trip and Study Group classes where the activity's Purpose is 'Real-world Application'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Classes.Name, LearningActivities.ActivityType, LearningActivities.Purpose, LearningActivities.Date\nFROM Classes\nJOIN LearningActivities ON Classes.ClassID = LearningActivities.ClassID\nWHERE LearningActivities.Purpose = 'Real-world Application'\nAND LearningActivities.ActivityType IN ('Field Trip', 'Study Group')"
          ]
        },
        {
          "interpretation": "Display a single table containing all classes that hosted either a Field Trip or a Study Group with the educational objective of 'Real-world Application'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.*\nFROM Classes C\nJOIN LearningActivities LA ON C.ClassID = LA.ClassID\nWHERE (LA.ActivityType = 'Field Trip' OR LA.ActivityType = 'Study Group') AND LA.Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "Combine all Field Trip and Study Group classes where the Purpose is 'Real-world Application' into a single list.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityType, Purpose, Date, ClassID\nFROM LearningActivities\nWHERE (ActivityType = 'Field Trip' OR ActivityType = 'Study Group') AND Purpose = 'Real-world Application'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    GradeLevel INT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE LearningActivities (\n    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ActivityType TEXT ,\n    Purpose TEXT,\n    Date DATE,\n    ClassID INTEGER,\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\n\nINSERT INTO \"Classes\" (ClassID,Name,GradeLevel,TeacherID) VALUES (1,'Algebra I',9,1),(2,'World History',10,2),(3,'American Literature',11,3),(4,'Physics',10,4),(5,'Advanced Art',12,5);\nINSERT INTO \"LearningActivities\" (ActivityID,ActivityType,Purpose,Date,ClassID) VALUES (1,'Field Trip','Real-world Application','2023-03-15',1),(2,'Field Trip','Team Building','2023-03-22',2),(3,'Study Group','Real-world Application','2023-03-18',3),(4,'Study Group','Preparation for Test','2023-03-25',4),(5,'Online Lecture','Review Material','2023-03-20',5);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-10-07'),(2,'Jane','Smith','2002-08-21'),(3,'Michael','Johnson','2005-06-29'),(4,'Emily','Williams','2004-09-15'),(5,'David','Brown','2006-07-23');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Math'),(2,'Ms.','Martin','History'),(3,'Mrs.','Wilson','English'),(4,'Mr.','Hall','Science'),(5,'Mrs.','Jackson','Art');\n",
      "question": "Show all the field trips available, also show just those study group classes categorised as being for a real-world application. Show them in one table.",
      "gold_queries": [
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\" AND LearningActivities.Purpose = \"Real-world Application\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Merge field trips and study groups (with real-world application as a condition) in a single output table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityID, ActivityType, Purpose, Date, ClassID \nFROM LearningActivities \nWHERE (ActivityType = 'Field Trip') \nOR (ActivityType = 'Study Group' AND Purpose = 'Real-world Application')"
          ]
        },
        {
          "interpretation": "Provide a consolidation of field trips with an additional column listing study groups only if their purpose is real-world application.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityID, ActivityType, Purpose, Date, \n       (SELECT ActivityID \n        FROM LearningActivities \n        WHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application' AND Date = LA.Date) AS RealWorldStudyGroup\nFROM LearningActivities LA\nWHERE ActivityType = 'Field Trip'"
          ]
        },
        {
          "interpretation": "Show all the field trips available and list only those study group classes that are categorized as being for a real-world application in separate columns of the same table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    CASE WHEN ActivityType = 'Field Trip' THEN Purpose END AS FieldTripPurpose,\n    CASE WHEN ActivityType = 'Study Group' AND Purpose = 'Real-world Application' THEN Purpose END AS StudyGroupForRealWorld\nFROM \n    LearningActivities"
          ]
        },
        {
          "interpretation": "Show all field trips and only include study groups that have the purpose of real-world application in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityType, Purpose, Date\nFROM LearningActivities\nWHERE ActivityType = 'Field Trip'\nUNION\nSELECT ActivityType, Purpose, Date\nFROM LearningActivities\nWHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "Unite field trips with study groups that have a real-world application purpose in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM LearningActivities WHERE (ActivityType = 'Field Trip' OR ActivityType = 'Study Group') AND Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "Show field trips and mark study groups specifically for real-world application in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityType, Purpose\nFROM LearningActivities\nWHERE ActivityType = 'Field Trip' OR (ActivityType = 'Study Group' AND Purpose = 'Real-world Application')"
          ]
        },
        {
          "interpretation": "Pair field trips with study groups that have a real-world application purpose and display them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FieldTrip.ActivityID AS FieldTripID, FieldTrip.Date AS FieldTripDate, StudyGroup.ActivityID AS StudyGroupID, StudyGroup.Date AS StudyGroupDate \nFROM LearningActivities FieldTrip \nJOIN LearningActivities StudyGroup \nON FieldTrip.Date < StudyGroup.Date \nWHERE FieldTrip.ActivityType = 'Field Trip' AND FieldTrip.Purpose = 'Real-world Application' \nAND StudyGroup.ActivityType = 'Study Group' AND StudyGroup.Purpose = 'Real-world Application'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music/attachment_1tab_ref_music.sqlite",
      "db_dump": "CREATE TABLE \"Album\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Instrument (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\nCREATE TABLE \"Music\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length TIME,\n    MUSIC_TYPE TEXT ,\n    INSTRUMENT_id INTEGER,\n    ALBUM_id INTEGER,\n    SINGER_id INTEGER,\n    FOREIGN KEY (ALBUM_id) REFERENCES Album (id),\n    FOREIGN KEY (SINGER_id) REFERENCES Singer (id),\n    FOREIGN KEY (INSTRUMENT_id) REFERENCES Instrument (id)\n);\nCREATE TABLE Singer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    death_date DATE\n);\n\nINSERT INTO \"Album\" (id,title,release_date) VALUES (1,NULL,'2000-01-01'),(2,NULL,'2001-06-01'),(3,NULL,'2002-11-01'),(4,NULL,'2003-05-01'),(5,NULL,'2004-10-01');\nINSERT INTO \"Instrument\" (id,type) VALUES (1,'Guitar'),(2,'Piano'),(3,'Drums'),(4,'Violin');\nINSERT INTO \"Music\" (id,title,length,MUSIC_TYPE,INSTRUMENT_id,ALBUM_id,SINGER_id) VALUES (1,'Blues Song','03:00','Single',1,1,1),(2,'Blues Song','03:00','Single',2,2,2),(3,'Folk Song','03:00','Single',3,3,1),(4,'Folk Song','03:00','Single',4,4,3),(5,'Country','03:00','Single',5,5,4);\nINSERT INTO \"Singer\" (id,first_name,last_name,birth_date,death_date) VALUES (1,'John','Hurt','1923-06-08','2007-01-27'),(2,'Bob','Smith','1960-07-01',NULL),(3,'Alice','Johnson','1975-01-10',NULL),(4,'Tom','White','1980-02-05',NULL),(5,'Emily','Green','1992-03-15',NULL);\n",
      "question": "Give me the blues songs and folk songs where the singer's first name is John. Show them in one table.",
      "gold_queries": [
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE (Music.title = \"Blues Song\" OR Music.title = \"Folk Song\") AND Singer.first_name = \"John\"",
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE Music.title = \"Blues Song\" OR Music.title = \"Folk Song\" AND Singer.first_name = \"John\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the titles and lengths of all blues and folk songs sung by a singer with the first name John, along with the release date of the album they are from.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.title, M.length, A.release_date\nFROM Music M\nJOIN Album A ON M.ALBUM_id = A.id\nJOIN Singer S ON M.SINGER_id = S.id\nWHERE (M.MUSIC_TYPE = 'Blues' OR M.MUSIC_TYPE = 'Folk') AND S.first_name = 'John'"
          ]
        },
        {
          "interpretation": "Provide a list of songs titled \"Blues Song\" and \"Folk Song\" performed by the singer named John. Include the album release date along with song details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title, m.length, a.release_date\nFROM Music m\nJOIN Singer s ON m.SINGER_id = s.id\nJOIN Album a ON m.ALBUM_id = a.id\nWHERE s.first_name = 'John' AND m.title IN ('Blues Song', 'Folk Song')"
          ]
        },
        {
          "interpretation": "Display the songs titled \"Blues Song\" and \"Folk Song\" performed by John, along with the album release date of each song.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.title, Album.release_date\nFROM Music\nJOIN Singer ON Music.SINGER_id = Singer.id\nJOIN Album ON Music.ALBUM_id = Album.id\nWHERE (Music.title = 'Blues Song' OR Music.title = 'Folk Song') AND Singer.first_name = 'John'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music/attachment_1tab_ref_music.sqlite",
      "db_dump": "CREATE TABLE \"Album\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Instrument (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\nCREATE TABLE \"Music\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length TIME,\n    MUSIC_TYPE TEXT ,\n    INSTRUMENT_id INTEGER,\n    ALBUM_id INTEGER,\n    SINGER_id INTEGER,\n    FOREIGN KEY (ALBUM_id) REFERENCES Album (id),\n    FOREIGN KEY (SINGER_id) REFERENCES Singer (id),\n    FOREIGN KEY (INSTRUMENT_id) REFERENCES Instrument (id)\n);\nCREATE TABLE Singer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    death_date DATE\n);\n\nINSERT INTO \"Album\" (id,title,release_date) VALUES (1,NULL,'2000-01-01'),(2,NULL,'2001-06-01'),(3,NULL,'2002-11-01'),(4,NULL,'2003-05-01'),(5,NULL,'2004-10-01');\nINSERT INTO \"Instrument\" (id,type) VALUES (1,'Guitar'),(2,'Piano'),(3,'Drums'),(4,'Violin');\nINSERT INTO \"Music\" (id,title,length,MUSIC_TYPE,INSTRUMENT_id,ALBUM_id,SINGER_id) VALUES (1,'Blues Song','03:00','Single',1,1,1),(2,'Blues Song','03:00','Single',2,2,2),(3,'Folk Song','03:00','Single',3,3,1),(4,'Folk Song','03:00','Single',4,4,3),(5,'Country','03:00','Single',5,5,4);\nINSERT INTO \"Singer\" (id,first_name,last_name,birth_date,death_date) VALUES (1,'John','Hurt','1923-06-08','2007-01-27'),(2,'Bob','Smith','1960-07-01',NULL),(3,'Alice','Johnson','1975-01-10',NULL),(4,'Tom','White','1980-02-05',NULL),(5,'Emily','Green','1992-03-15',NULL);\n",
      "question": "Show all of the blues songs, also show the folk songs, but just those by singers named John. Show them in one table.",
      "gold_queries": [
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE Music.title = \"Blues Song\" OR Music.title = \"Folk Song\" AND Singer.first_name = \"John\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all blues songs and folk songs sung by a singer with the first name \"John\" in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.title \nFROM Music M \nJOIN Singer S ON M.SINGER_id = S.id \nWHERE S.first_name = 'John' AND M.title IN ('Blues Song', 'Folk Song')"
          ]
        },
        {
          "interpretation": "Display a combined list of blues and folk songs performed by the singer \"John\" in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.title, Music.length, Music.MUSIC_TYPE\nFROM Music\nJOIN Singer ON Music.SINGER_id = Singer.id\nWHERE (Music.MUSIC_TYPE = 'Blues' OR Music.MUSIC_TYPE = 'Folk') AND Singer.first_name = 'John' AND Singer.last_name = 'Hurt'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music/attachment_1tab_ref_music.sqlite",
      "db_dump": "CREATE TABLE \"Album\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Instrument (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\nCREATE TABLE \"Music\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length TIME,\n    MUSIC_TYPE TEXT ,\n    INSTRUMENT_id INTEGER,\n    ALBUM_id INTEGER,\n    SINGER_id INTEGER,\n    FOREIGN KEY (ALBUM_id) REFERENCES Album (id),\n    FOREIGN KEY (SINGER_id) REFERENCES Singer (id),\n    FOREIGN KEY (INSTRUMENT_id) REFERENCES Instrument (id)\n);\nCREATE TABLE Singer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    death_date DATE\n);\n\nINSERT INTO \"Album\" (id,title,release_date) VALUES (1,NULL,'2000-01-01'),(2,NULL,'2001-06-01'),(3,NULL,'2002-11-01'),(4,NULL,'2003-05-01'),(5,NULL,'2004-10-01');\nINSERT INTO \"Instrument\" (id,type) VALUES (1,'Guitar'),(2,'Piano'),(3,'Drums'),(4,'Violin');\nINSERT INTO \"Music\" (id,title,length,MUSIC_TYPE,INSTRUMENT_id,ALBUM_id,SINGER_id) VALUES (1,'Blues Song','03:00','Single',1,1,1),(2,'Blues Song','03:00','Single',2,2,2),(3,'Folk Song','03:00','Single',3,3,1),(4,'Folk Song','03:00','Single',4,4,3),(5,'Country','03:00','Single',5,5,4);\nINSERT INTO \"Singer\" (id,first_name,last_name,birth_date,death_date) VALUES (1,'John','Hurt','1923-06-08','2007-01-27'),(2,'Bob','Smith','1960-07-01',NULL),(3,'Alice','Johnson','1975-01-10',NULL),(4,'Tom','White','1980-02-05',NULL),(5,'Emily','Green','1992-03-15',NULL);\n",
      "question": "Show me both blues and folks songs by singers called John. Show them in one table.",
      "gold_queries": [
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE (Music.title = \"Blues Song\" OR Music.title = \"Folk Song\") AND Singer.first_name = \"John\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve blues and folk songs performed by singers with the first name \"John\" and display them in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.title, Music.MUSIC_TYPE \nFROM Music \nJOIN Singer ON Music.SINGER_id = Singer.id \nWHERE Singer.first_name = 'John' AND Music.MUSIC_TYPE IN ('Blues', 'Folk')"
          ]
        },
        {
          "interpretation": "Include both Blues Song and Folk Song entries by the artist named John in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.title, Music.length, Music.MUSIC_TYPE\nFROM Music\nJOIN Singer ON Music.SINGER_id = Singer.id\nWHERE Singer.first_name = 'John' AND Music.title IN ('Blues Song', 'Folk Song')"
          ]
        },
        {
          "interpretation": "Present songs categorized as Blues Song and Folk Song by the artist John in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Music.title \nFROM Music \nJOIN Singer ON Music.SINGER_id = Singer.id \nWHERE Singer.first_name = 'John' \nAND Music.title IN ('Blues Song', 'Folk Song')"
          ]
        },
        {
          "interpretation": "Combine Blues Song and Folk Song results by the singer John into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title, m.length, a.title AS album_title\nFROM Music m\nJOIN Album a ON m.ALBUM_id = a.id\nJOIN Singer s ON m.SINGER_id = s.id\nWHERE s.first_name = 'John' AND (m.title = 'Blues Song' OR m.title = 'Folk Song')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
      "db_dump": "CREATE TABLE Albums(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    release_date DATE,\n    artist_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Artists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Concerts(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    venue TEXT,\n    date TIMESTAMP\n);\nCREATE TABLE Music_Genres(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE \n);\nCREATE TABLE Songs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    artist_id INTEGER,\n    album_id INTEGER,\n    concert_id INTEGER,\n    music_genre_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Performers(id),\n    FOREIGN KEY (album_id) REFERENCES Albums(id),\n    FOREIGN KEY (concert_id) REFERENCES Concerts(id),\n    FOREIGN KEY (music_genre_id) REFERENCES Music_Genres(id)\n);\n\nINSERT INTO \"Albums\" (id,release_date,artist_id) VALUES (1,'2021-01-01',1),(2,'2021-02-01',2),(3,'2021-03-01',3),(4,'2021-04-01',4),(5,'2021-05-01',5);\nINSERT INTO \"Artists\" (id,name) VALUES (1,'Artist1'),(2,'Artist2'),(3,'Artist3'),(4,'Artist4'),(5,'Artist5');\nINSERT INTO \"Concerts\" (id,venue,date) VALUES (1,'Madison Square Garden','2021-06-01 18:00:00'),(2,'Carnegie Hall','2021-07-01 19:00:00'),(3,'The Hollywood Bowl','2021-08-01 20:00:00'),(4,'Wembley Stadium','2021-09-01 21:00:00'),(5,'Stadium Australia','2021-10-01 22:00:00');\nINSERT INTO \"Music_Genres\" (id,name) VALUES (1,'Pop Song'),(2,'Hip Hop Song');\nINSERT INTO \"Songs\" (id,title,artist_id,album_id,concert_id,music_genre_id) VALUES (1,'Tune1',1,1,1,1),(2,'Tune2',2,2,3,1),(3,'Rap1',3,3,1,2),(4,'Rap2',4,4,5,2);\n",
      "question": "Show all pop songs and only those hip hop songs which were performed at Madison Square Garden. Show them in one table.",
      "gold_queries": [
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\" AND Concerts.venue = \"Madison Square Garden\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display all pop songs along with hip hop songs that have only been performed at Madison Square Garden. List the combined results in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title \nFROM Songs \nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id \nJOIN Concerts ON Songs.concert_id = Concerts.id \nWHERE (Music_Genres.name = 'Pop Song' OR Music_Genres.name = 'Hip Hop Song') \nAND Concerts.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Present a single table with all pop songs and hip hop songs that were performed exclusively at Madison Square Garden.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, mg.name\nFROM Songs s\nJOIN Music_Genres mg ON s.music_genre_id = mg.id\nJOIN Concerts c ON s.concert_id = c.id\nWHERE mg.name IN ('Pop Song', 'Hip Hop Song')\n  AND c.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Show all pop songs and only those hip hop songs that were performed at Madison Square Garden. Present them in a single table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.title \nFROM Songs s \nJOIN Music_Genres mg ON s.music_genre_id = mg.id \nWHERE mg.name = 'Pop Song' \nUNION \nSELECT s.title \nFROM Songs s \nJOIN Music_Genres mg ON s.music_genre_id = mg.id \nJOIN Concerts c ON s.concert_id = c.id \nWHERE mg.name = 'Hip Hop Song' AND c.venue = 'Madison Square Garden'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
      "db_dump": "CREATE TABLE Albums(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    release_date DATE,\n    artist_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Artists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Concerts(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    venue TEXT,\n    date TIMESTAMP\n);\nCREATE TABLE Music_Genres(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE \n);\nCREATE TABLE Songs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    artist_id INTEGER,\n    album_id INTEGER,\n    concert_id INTEGER,\n    music_genre_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Performers(id),\n    FOREIGN KEY (album_id) REFERENCES Albums(id),\n    FOREIGN KEY (concert_id) REFERENCES Concerts(id),\n    FOREIGN KEY (music_genre_id) REFERENCES Music_Genres(id)\n);\n\nINSERT INTO \"Albums\" (id,release_date,artist_id) VALUES (1,'2021-01-01',1),(2,'2021-02-01',2),(3,'2021-03-01',3),(4,'2021-04-01',4),(5,'2021-05-01',5);\nINSERT INTO \"Artists\" (id,name) VALUES (1,'Artist1'),(2,'Artist2'),(3,'Artist3'),(4,'Artist4'),(5,'Artist5');\nINSERT INTO \"Concerts\" (id,venue,date) VALUES (1,'Madison Square Garden','2021-06-01 18:00:00'),(2,'Carnegie Hall','2021-07-01 19:00:00'),(3,'The Hollywood Bowl','2021-08-01 20:00:00'),(4,'Wembley Stadium','2021-09-01 21:00:00'),(5,'Stadium Australia','2021-10-01 22:00:00');\nINSERT INTO \"Music_Genres\" (id,name) VALUES (1,'Pop Song'),(2,'Hip Hop Song');\nINSERT INTO \"Songs\" (id,title,artist_id,album_id,concert_id,music_genre_id) VALUES (1,'Tune1',1,1,1,1),(2,'Tune2',2,2,3,1),(3,'Rap1',3,3,1,2),(4,'Rap2',4,4,5,2);\n",
      "question": "Show pop songs and hip hop songs performed at Madison Square Garden. Show them in one table.",
      "gold_queries": [
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE (Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\") AND Concerts.venue = \"Madison Square Garden\"",
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\" AND Concerts.venue = \"Madison Square Garden\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show the venues, not the songs, where pop songs or hip hop songs were performed, in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.venue \nFROM Concerts C \nJOIN Songs S ON C.id = S.concert_id \nJOIN Music_Genres MG ON S.music_genre_id = MG.id \nWHERE MG.name IN ('Pop Song', 'Hip Hop Song')"
          ]
        },
        {
          "interpretation": "Show the number of pop songs and hip hop songs performed at Madison Square Garden, but not the songs themselves, in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name, COUNT(*) \nFROM Songs AS T1 \nJOIN Music_Genres AS T2 ON T1.music_genre_id = T2.id \nJOIN Concerts AS T3 ON T1.concert_id = T3.id \nWHERE T3.venue = 'Madison Square Garden' AND T2.name IN ('Pop Song', 'Hip Hop Song') \nGROUP BY T2.name"
          ]
        },
        {
          "interpretation": "Show the top three most frequently performed music genres at Madison Square Garden, in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT mg.name\nFROM Songs s\nJOIN Music_Genres mg ON s.music_genre_id = mg.id\nJOIN Concerts c ON s.concert_id = c.id\nWHERE c.venue = 'Madison Square Garden'\nGROUP BY mg.name\nORDER BY COUNT(*) DESC\nLIMIT 3"
          ]
        },
        {
          "interpretation": "List all dates and times for concerts at Madison Square Garden where pop songs or hip hop songs were performed, but not the songs, in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.date \nFROM Concerts C \nJOIN Songs S ON C.id = S.concert_id \nJOIN Music_Genres MG ON S.music_genre_id = MG.id \nWHERE C.venue = 'Madison Square Garden' \nAND MG.name IN ('Pop Song', 'Hip Hop Song')"
          ]
        },
        {
          "interpretation": "Provide a combined list of all artists who performed at Madison Square Garden, including those who performed pop or hip hop songs, in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Artists.name \nFROM Artists \nJOIN Songs ON Songs.artist_id = Artists.id \nJOIN Concerts ON Songs.concert_id = Concerts.id \nWHERE Concerts.venue = 'Madison Square Garden' \nOR Songs.music_genre_id IN (1, 2)"
          ]
        },
        {
          "interpretation": "Show all songs, including those not categorizable as pop or hip hop, performed at Madison Square Garden in the table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title \nFROM Songs S \nJOIN Concerts C ON S.concert_id = C.id \nWHERE C.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Display the albums from which pop songs and hip hop songs were performed at Madison Square Garden, in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT A.id\nFROM Albums A\nJOIN Songs S ON A.id = S.album_id\nJOIN Music_Genres MG ON S.music_genre_id = MG.id\nJOIN Concerts C ON S.concert_id = C.id\nWHERE C.venue = 'Madison Square Garden'\nAND MG.name IN ('Pop Song', 'Hip Hop Song')"
          ]
        },
        {
          "interpretation": "Show the artists who performed pop songs and hip hop songs at Madison Square Garden, but not the songs themselves, in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Artists.name\nFROM Artists\nJOIN Songs ON Artists.id = Songs.artist_id\nJOIN Concerts ON Songs.concert_id = Concerts.id\nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id\nWHERE Concerts.venue = 'Madison Square Garden'\nAND Music_Genres.name IN ('Pop Song', 'Hip Hop Song')"
          ]
        },
        {
          "interpretation": "Show only hip hop songs performed at Madison Square Garden in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Songs.title \nFROM Songs \nJOIN Concerts ON Songs.concert_id = Concerts.id \nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id \nWHERE Music_Genres.name = 'Hip Hop Song' AND Concerts.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Show only pop songs performed at Madison Square Garden in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Songs.title \nFROM Songs \nJOIN Concerts ON Songs.concert_id = Concerts.id \nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id \nWHERE Music_Genres.name = 'Pop Song' AND Concerts.venue = 'Madison Square Garden'"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1,
        "f1_score": 0.16666666666666669,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
      "db_dump": "CREATE TABLE Albums(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    release_date DATE,\n    artist_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Artists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Concerts(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    venue TEXT,\n    date TIMESTAMP\n);\nCREATE TABLE Music_Genres(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE \n);\nCREATE TABLE Songs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    artist_id INTEGER,\n    album_id INTEGER,\n    concert_id INTEGER,\n    music_genre_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Performers(id),\n    FOREIGN KEY (album_id) REFERENCES Albums(id),\n    FOREIGN KEY (concert_id) REFERENCES Concerts(id),\n    FOREIGN KEY (music_genre_id) REFERENCES Music_Genres(id)\n);\n\nINSERT INTO \"Albums\" (id,release_date,artist_id) VALUES (1,'2021-01-01',1),(2,'2021-02-01',2),(3,'2021-03-01',3),(4,'2021-04-01',4),(5,'2021-05-01',5);\nINSERT INTO \"Artists\" (id,name) VALUES (1,'Artist1'),(2,'Artist2'),(3,'Artist3'),(4,'Artist4'),(5,'Artist5');\nINSERT INTO \"Concerts\" (id,venue,date) VALUES (1,'Madison Square Garden','2021-06-01 18:00:00'),(2,'Carnegie Hall','2021-07-01 19:00:00'),(3,'The Hollywood Bowl','2021-08-01 20:00:00'),(4,'Wembley Stadium','2021-09-01 21:00:00'),(5,'Stadium Australia','2021-10-01 22:00:00');\nINSERT INTO \"Music_Genres\" (id,name) VALUES (1,'Pop Song'),(2,'Hip Hop Song');\nINSERT INTO \"Songs\" (id,title,artist_id,album_id,concert_id,music_genre_id) VALUES (1,'Tune1',1,1,1,1),(2,'Tune2',2,2,3,1),(3,'Rap1',3,3,1,2),(4,'Rap2',4,4,5,2);\n",
      "question": "List both pop songs and hip hop songs where either were performed at Madison Square Garden. Show them in one table.",
      "gold_queries": [
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE (Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\") AND Concerts.venue = \"Madison Square Garden\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List songs, their genres identified, that were performed at the Madison Square Garden events.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Songs.title, Music_Genres.name \nFROM Songs \nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id \nJOIN Concerts ON Songs.concert_id = Concerts.id \nWHERE Concerts.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "List songs that are pop or hip hop and were played at the Madison Square Garden event.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.title \nFROM Songs s \nJOIN Music_Genres mg ON s.music_genre_id = mg.id \nJOIN Concerts c ON s.concert_id = c.id \nWHERE mg.name IN ('Pop Song', 'Hip Hop Song') \nAND c.venue = 'Madison Square Garden'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
      "db_dump": "CREATE TABLE ArtWork(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    publishDate DATE ,\n    publisherId INTEGER,\n    sequentialArtTypeId INTEGER,\n    FOREIGN KEY(publisherId) REFERENCES Publisher(id),\n    FOREIGN KEY(sequentialArtTypeId) REFERENCES SequentialArtType(id)\n);\nCREATE TABLE Artist(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    artWorkId INTEGER,\n    FOREIGN KEY(artWorkId) REFERENCES ArtWork(id)\n);\nCREATE TABLE Publisher(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE SequentialArtType(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\n\nINSERT INTO \"ArtWork\" (id,title,publishDate,publisherId,sequentialArtTypeId) VALUES (1,'X-Men #1','2023-01-01',1,1),(2,'Batman #1','2023-01-15',2,1),(3,'Spider-Man #1','2023-02-01',3,1),(4,'The Walking Dead #1','2023-02-15',4,1),(5,'Saga #1','2023-03-01',1,2);\nINSERT INTO \"Artist\" (id,firstName,lastName,artWorkId) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Alice','Johnson',3),(4,'Bob','Williams',4),(5,'Charlie','Brown',5);\nINSERT INTO \"Publisher\" (id,name) VALUES (1,'BOOM Studios'),(2,'Marvel Comics'),(3,'DC Comics'),(4,'IDW Publishing'),(5,'Image Comics');\nINSERT INTO \"SequentialArtType\" (id,type) VALUES (1,'Comic Book'),(2,'Graphic Novel'),(3,'Manga'),(4,'Webcomic'),(5,'Digital Comic');\n",
      "question": "Show all comic books and graphic novels published by BOOM Studios. Show them in one table.",
      "gold_queries": [
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE (SequentialArtType.type = \"Comic Book\" OR SequentialArtType.type = \"Graphic Novel\") AND Publisher.name = \"BOOM Studios\"",
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE SequentialArtType.type = \"\" OR SequentialArtType.type = \"Graphic Novel\" AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all comic books and graphic novels published by BOOM Studios ordered by publishDate in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AW.title, AW.publishDate, SAT.type\nFROM ArtWork AW\nJOIN SequentialArtType SAT ON AW.sequentialArtTypeId = SAT.id\nJOIN Publisher P ON AW.publisherId = P.id\nWHERE SAT.type IN ('Comic Book', 'Graphic Novel') AND P.name = 'BOOM Studios'\nORDER BY AW.publishDate"
          ]
        },
        {
          "interpretation": "Show all comic books and graphic novels published by BOOM Studios along with their publisherIds in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T1.publisherId FROM ArtWork AS T1 JOIN SequentialArtType AS T2 ON T1.sequentialArtTypeId = T2.id JOIN Publisher AS T3 ON T1.publisherId = T3.id WHERE T3.name = 'BOOM Studios' AND T2.type IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Show a list of all comic books and graphic novels published by BOOM Studios on separate lines in one table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title \nFROM ArtWork AS T1 \nJOIN Publisher AS T2 ON T1.publisherId = T2.id \nJOIN SequentialArtType AS T3 ON T1.sequentialArtTypeId = T3.id \nWHERE T2.name = 'BOOM Studios' AND T3.type IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Show all comic books and graphic novels published by BOOM Studios along with their artists in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title, SequentialArtType.type, Publisher.name, Artist.firstName, Artist.lastName\nFROM ArtWork\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nJOIN Artist ON ArtWork.id = Artist.artWorkId\nWHERE Publisher.name = 'BOOM Studios' AND SequentialArtType.type IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Show all comic books and graphic novels published by BOOM Studios along with their publishers in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, sat.type, p.name \nFROM ArtWork a \nJOIN SequentialArtType sat ON a.sequentialArtTypeId = sat.id \nJOIN Publisher p ON a.publisherId = p.id \nWHERE sat.type IN ('Comic Book', 'Graphic Novel') AND p.name = 'BOOM Studios'"
          ]
        },
        {
          "interpretation": "Show all graphic novels published by BOOM Studios in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title, ArtWork.publishDate\nFROM ArtWork\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nWHERE Publisher.name = 'BOOM Studios' AND SequentialArtType.type = 'Graphic Novel'"
          ]
        },
        {
          "interpretation": "Show all comic books published by BOOM Studios in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title, ArtWork.publishDate\nFROM ArtWork\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nWHERE Publisher.name = 'BOOM Studios' AND SequentialArtType.type = 'Comic Book'"
          ]
        },
        {
          "interpretation": "Show a count of all comic books and graphic novels published by BOOM Studios in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT sat.type, COUNT(*) as count\nFROM ArtWork aw\nJOIN Publisher p ON aw.publisherId = p.id\nJOIN SequentialArtType sat ON aw.sequentialArtTypeId = sat.id\nWHERE p.name = 'BOOM Studios' AND sat.type IN ('Comic Book', 'Graphic Novel')\nGROUP BY sat.type"
          ]
        },
        {
          "interpretation": "Show all comic books and graphic novels published by BOOM Studios along with their sequentialArtTypeId in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title, ArtWork.sequentialArtTypeId \nFROM ArtWork \nJOIN Publisher ON ArtWork.publisherId = Publisher.id \nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id \nWHERE Publisher.name = 'BOOM Studios' AND SequentialArtType.type IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Show all comic books and graphic novels published by BOOM Studios along with their respective SequentialArtType types in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, sat.type\nFROM ArtWork a\nJOIN SequentialArtType sat ON a.sequentialArtTypeId = sat.id\nJOIN Publisher p ON a.publisherId = p.id\nWHERE sat.type IN ('Comic Book', 'Graphic Novel') AND p.name = 'BOOM Studios'"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1,
        "f1_score": 0.16666666666666669,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
      "db_dump": "CREATE TABLE ArtWork(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    publishDate DATE ,\n    publisherId INTEGER,\n    sequentialArtTypeId INTEGER,\n    FOREIGN KEY(publisherId) REFERENCES Publisher(id),\n    FOREIGN KEY(sequentialArtTypeId) REFERENCES SequentialArtType(id)\n);\nCREATE TABLE Artist(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    artWorkId INTEGER,\n    FOREIGN KEY(artWorkId) REFERENCES ArtWork(id)\n);\nCREATE TABLE Publisher(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE SequentialArtType(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\n\nINSERT INTO \"ArtWork\" (id,title,publishDate,publisherId,sequentialArtTypeId) VALUES (1,'X-Men #1','2023-01-01',1,1),(2,'Batman #1','2023-01-15',2,1),(3,'Spider-Man #1','2023-02-01',3,1),(4,'The Walking Dead #1','2023-02-15',4,1),(5,'Saga #1','2023-03-01',1,2);\nINSERT INTO \"Artist\" (id,firstName,lastName,artWorkId) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Alice','Johnson',3),(4,'Bob','Williams',4),(5,'Charlie','Brown',5);\nINSERT INTO \"Publisher\" (id,name) VALUES (1,'BOOM Studios'),(2,'Marvel Comics'),(3,'DC Comics'),(4,'IDW Publishing'),(5,'Image Comics');\nINSERT INTO \"SequentialArtType\" (id,type) VALUES (1,'Comic Book'),(2,'Graphic Novel'),(3,'Manga'),(4,'Webcomic'),(5,'Digital Comic');\n",
      "question": "Show publications by BOOM Studios that are either comic books or graphic novels. Show them in one table.",
      "gold_queries": [
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE (SequentialArtType.type = \"Comic Book\" OR SequentialArtType.type = \"Graphic Novel\") AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show publications by BOOM Studios that are only comic books.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title \nFROM ArtWork \nJOIN Publisher ON ArtWork.publisherId = Publisher.id \nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id \nWHERE Publisher.name = 'BOOM Studios' AND SequentialArtType.type = 'Comic Book'"
          ]
        },
        {
          "interpretation": "Show publications by BOOM Studios that are neither comic books nor graphic novels.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title \nFROM ArtWork \nJOIN Publisher ON ArtWork.publisherId = Publisher.id \nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id \nWHERE Publisher.name = 'BOOM Studios' \nAND SequentialArtType.type NOT IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Show publications by BOOM Studios that are exclusively graphic novels and exclude all comic books.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title \nFROM ArtWork \nJOIN Publisher ON ArtWork.publisherId = Publisher.id \nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id \nWHERE Publisher.name = 'BOOM Studios' AND SequentialArtType.type = 'Graphic Novel'"
          ]
        },
        {
          "interpretation": "Show publications by BOOM Studios that are specifically labeled as either 'Comic Book' or 'Graphic Novel'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ArtWork.title\nFROM ArtWork\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nWHERE Publisher.name = 'BOOM Studios'\nAND SequentialArtType.type IN ('Comic Book', 'Graphic Novel')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
      "db_dump": "CREATE TABLE ArtWork(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    publishDate DATE ,\n    publisherId INTEGER,\n    sequentialArtTypeId INTEGER,\n    FOREIGN KEY(publisherId) REFERENCES Publisher(id),\n    FOREIGN KEY(sequentialArtTypeId) REFERENCES SequentialArtType(id)\n);\nCREATE TABLE Artist(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    artWorkId INTEGER,\n    FOREIGN KEY(artWorkId) REFERENCES ArtWork(id)\n);\nCREATE TABLE Publisher(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE SequentialArtType(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\n\nINSERT INTO \"ArtWork\" (id,title,publishDate,publisherId,sequentialArtTypeId) VALUES (1,'X-Men #1','2023-01-01',1,1),(2,'Batman #1','2023-01-15',2,1),(3,'Spider-Man #1','2023-02-01',3,1),(4,'The Walking Dead #1','2023-02-15',4,1),(5,'Saga #1','2023-03-01',1,2);\nINSERT INTO \"Artist\" (id,firstName,lastName,artWorkId) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Alice','Johnson',3),(4,'Bob','Williams',4),(5,'Charlie','Brown',5);\nINSERT INTO \"Publisher\" (id,name) VALUES (1,'BOOM Studios'),(2,'Marvel Comics'),(3,'DC Comics'),(4,'IDW Publishing'),(5,'Image Comics');\nINSERT INTO \"SequentialArtType\" (id,type) VALUES (1,'Comic Book'),(2,'Graphic Novel'),(3,'Manga'),(4,'Webcomic'),(5,'Digital Comic');\n",
      "question": "Show all comic books and in addition show graphic novels published by BOOM Studios. Show them in one table.",
      "gold_queries": [
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE SequentialArtType.type = \"\" OR SequentialArtType.type = \"Graphic Novel\" AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine the results to show all Comic Books and Graphic Novels from BOOM Studios in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title, ArtWork.publishDate, Publisher.name, SequentialArtType.type\nFROM ArtWork\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nWHERE SequentialArtType.type IN ('Comic Book', 'Graphic Novel') AND Publisher.name = 'BOOM Studios'"
          ]
        },
        {
          "interpretation": "Unite the results to show both Comic Books and Graphic Novels published by BOOM Studios in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, p.name, sat.type\nFROM ArtWork a\nJOIN Publisher p ON a.publisherId = p.id\nJOIN SequentialArtType sat ON a.sequentialArtTypeId = sat.id\nWHERE p.name = 'BOOM Studios' AND sat.type IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Combine the outputs to show all Comic Books and Graphic Novels published by BOOM Studios as one result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title \nFROM ArtWork a \nJOIN Publisher p ON a.publisherId = p.id \nJOIN SequentialArtType s ON a.sequentialArtTypeId = s.id \nWHERE p.name = 'BOOM Studios' AND s.type IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Group the results to show both Comic Books and Graphic Novels separately but published by the same publisher (BOOM Studios) in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.name AS Publisher, SAT.type, COUNT(AW.id) AS NumberOfArtWorks\nFROM ArtWork AW\nJOIN Publisher P ON AW.publisherId = P.id\nJOIN SequentialArtType SAT ON AW.sequentialArtTypeId = SAT.id\nWHERE P.name = 'BOOM Studios' AND SAT.type IN ('Comic Book', 'Graphic Novel')\nGROUP BY P.name, SAT.type"
          ]
        },
        {
          "interpretation": "Include all records of Comic Books and Graphic Novels published by BOOM Studios in the same table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.id, ArtWork.title, ArtWork.publishDate, Publisher.name, SequentialArtType.type\nFROM ArtWork\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nWHERE Publisher.name = 'BOOM Studios' AND SequentialArtType.type IN ('Comic Book', 'Graphic Novel')"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT\n);\nCREATE TABLE BookPublishingHistory(\n    PublishingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    PublisherID INTEGER,\n    YearOfPublication INT,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN),\n    FOREIGN KEY(PublisherID) REFERENCES Publishers(PublisherID)\n);\nCREATE TABLE Books(\n    ISBN VARCHAR(13) UNIQUE PRIMARY KEY,\n    Title TEXT,\n    YearOfPublication INT ,\n    Genre TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\nCREATE TABLE Publishers(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Reviews(\n    ReviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    Rating INT ,\n    Comment TEXT,\n    DatePosted DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\nCREATE TABLE SalesData(\n    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    QuantitySold INT,\n    Revenue DECIMAL(10,2),\n    DateOfSale DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,Country) VALUES (1,'John Doe','USA'),(2,'Jane Smith','UK'),(3,'Alice Johnson','Canada'),(4,'Bob Brown','Australia'),(5,'Charlie White','Germany');\nINSERT INTO \"BookPublishingHistory\" (PublishingID,ISBN,PublisherID,YearOfPublication) VALUES (1,'1234567890123',1,2018),(2,'9876543210987',2,2020),(3,'1122334455667',3,2018),(4,'665544332211',4,2019),(5,'778899110000',5,2017);\nINSERT INTO \"Books\" (ISBN,Title,YearOfPublication,Genre,AuthorID) VALUES ('1234567890123','Science Fiction Book',2018,'Science Fiction',1),('9876543210987','Another Science Fiction Book',2020,'Science Fiction',1),('1122334455667','Romance Book',2018,'Romance',2),('665544332211','Yet Another Romance Book',2019,'Romance',2),('778899110000','Mystery Book',2017,'Mystery',3);\nINSERT INTO \"Publishers\" (PublisherID,Name,Location) VALUES (1,'Publisher A','New York'),(2,'Publisher B','London'),(3,'Publisher C','Toronto'),(4,'Publisher D','Sydney'),(5,'Publisher E','Berlin');\nINSERT INTO \"Reviews\" (ReviewID,ISBN,Rating,Comment,DatePosted) VALUES (1,'1234567890123',5,'Excellent book!','2021-08-01'),(2,'9876543210987',4,'Good read.','2021-08-02'),(3,'1122334455667',3,'Average story.','2021-08-03'),(4,'665544332211',2,'Not my cup of tea.','2021-08-04'),(5,'778899110000',1,'Did not like it at all.','2021-08-05');\nINSERT INTO \"SalesData\" (SaleID,ISBN,QuantitySold,Revenue,DateOfSale) VALUES (1,'1234567890123',500,10000,'2021-08-01'),(2,'9876543210987',600,12000,'2021-08-02'),(3,'1122334455667',400,8000,'2021-08-03'),(4,'665544332211',300,6000,'2021-08-04'),(5,'778899110000',200,4000,'2021-08-05');\n",
      "question": "List science fiction books and romance books published in 2018. Show them in one table.",
      "gold_queries": [
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE (Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance') AND BookPublishingHistory.YearOfPublication = 2018",
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance' AND BookPublishingHistory.YearOfPublication = 2018"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine books of genre Science Fiction and Romance published in 2018 into a single output.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, Genre FROM Books WHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Output a list of all science fiction and romance books from 2018.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title \nFROM Books \nWHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Fetch book titles and their authors for science fiction and romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.Title, A.Name\nFROM Books B\nJOIN Authors A ON B.AuthorID = A.AuthorID\nWHERE B.Genre IN ('Science Fiction', 'Romance') AND B.YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Merge science fiction and romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title FROM Books WHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Display titles and publishing years of science fiction and romance books from 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, YearOfPublication FROM Books WHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Retrieve the ISBNs and titles of books that are both science fiction and romance and published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication = 2018 INTERSECT SELECT ISBN, Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Display the count of science fiction and romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) \nFROM Books \nWHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Show books with titles and publishers for science fiction and romance published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Books.Title, Publishers.Name \nFROM Books \nJOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN \nJOIN Publishers ON BookPublishingHistory.PublisherID = Publishers.PublisherID \nWHERE Books.Genre IN ('Science Fiction', 'Romance') AND Books.YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "List all books published by AuthorID in 2018 where the genre is either Science Fiction or Romance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE AuthorID = 1 AND YearOfPublication = 2018 AND Genre IN ('Science Fiction', 'Romance')"
          ]
        },
        {
          "interpretation": "Display titles and details of all science fiction and romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, YearOfPublication, Genre FROM Books WHERE (Genre = 'Science Fiction' OR Genre = 'Romance') AND YearOfPublication = 2018"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1,
        "f1_score": 0.16666666666666669,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT\n);\nCREATE TABLE BookPublishingHistory(\n    PublishingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    PublisherID INTEGER,\n    YearOfPublication INT,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN),\n    FOREIGN KEY(PublisherID) REFERENCES Publishers(PublisherID)\n);\nCREATE TABLE Books(\n    ISBN VARCHAR(13) UNIQUE PRIMARY KEY,\n    Title TEXT,\n    YearOfPublication INT ,\n    Genre TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\nCREATE TABLE Publishers(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Reviews(\n    ReviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    Rating INT ,\n    Comment TEXT,\n    DatePosted DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\nCREATE TABLE SalesData(\n    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    QuantitySold INT,\n    Revenue DECIMAL(10,2),\n    DateOfSale DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,Country) VALUES (1,'John Doe','USA'),(2,'Jane Smith','UK'),(3,'Alice Johnson','Canada'),(4,'Bob Brown','Australia'),(5,'Charlie White','Germany');\nINSERT INTO \"BookPublishingHistory\" (PublishingID,ISBN,PublisherID,YearOfPublication) VALUES (1,'1234567890123',1,2018),(2,'9876543210987',2,2020),(3,'1122334455667',3,2018),(4,'665544332211',4,2019),(5,'778899110000',5,2017);\nINSERT INTO \"Books\" (ISBN,Title,YearOfPublication,Genre,AuthorID) VALUES ('1234567890123','Science Fiction Book',2018,'Science Fiction',1),('9876543210987','Another Science Fiction Book',2020,'Science Fiction',1),('1122334455667','Romance Book',2018,'Romance',2),('665544332211','Yet Another Romance Book',2019,'Romance',2),('778899110000','Mystery Book',2017,'Mystery',3);\nINSERT INTO \"Publishers\" (PublisherID,Name,Location) VALUES (1,'Publisher A','New York'),(2,'Publisher B','London'),(3,'Publisher C','Toronto'),(4,'Publisher D','Sydney'),(5,'Publisher E','Berlin');\nINSERT INTO \"Reviews\" (ReviewID,ISBN,Rating,Comment,DatePosted) VALUES (1,'1234567890123',5,'Excellent book!','2021-08-01'),(2,'9876543210987',4,'Good read.','2021-08-02'),(3,'1122334455667',3,'Average story.','2021-08-03'),(4,'665544332211',2,'Not my cup of tea.','2021-08-04'),(5,'778899110000',1,'Did not like it at all.','2021-08-05');\nINSERT INTO \"SalesData\" (SaleID,ISBN,QuantitySold,Revenue,DateOfSale) VALUES (1,'1234567890123',500,10000,'2021-08-01'),(2,'9876543210987',600,12000,'2021-08-02'),(3,'1122334455667',400,8000,'2021-08-03'),(4,'665544332211',300,6000,'2021-08-04'),(5,'778899110000',200,4000,'2021-08-05');\n",
      "question": "Which science fiction books were published in 2018 and which romance books were published in the same year? Show them in one table.",
      "gold_queries": [
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE (Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance') AND BookPublishingHistory.YearOfPublication = 2018"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Which table is provided containing the ISBN, title, genre, and publication year for all books published in 2018, but with a specific query for science fiction and romance books?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title, Genre, YearOfPublication FROM Books WHERE YearOfPublication = 2018 AND Genre IN ('Science Fiction', 'Romance')"
          ]
        },
        {
          "interpretation": "Which specific science fiction and romance books published in 2018 are listed together in one table, but with separate columns for each genre?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT \n    B1.Title AS ScienceFictionBook,\n    B2.Title AS RomanceBook\nFROM \n    Books B1\nLEFT JOIN \n    Books B2\nON \n    B1.YearOfPublication = B2.YearOfPublication AND B2.Genre = 'Romance'\nWHERE \n    B1.Genre = 'Science Fiction' AND B1.YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Which books published in 2018 that fall under the genres of science fiction or romance are listed in one table, with a column indicating the genre?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, Genre FROM Books WHERE YearOfPublication = 2018 AND Genre IN ('Science Fiction', 'Romance')"
          ]
        },
        {
          "interpretation": "Which science fiction books published in 2018 and romance books published in 2018 are listed separately in two different tables?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication = 2018",
            "SELECT Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Which science fiction books published in 2018 and romance books published in 2018 are listed separately in two different tables?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication = 2018",
            "SELECT Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Which table is provided that lists all books published in 2018, with rows for science fiction books and romance books, but not necessarily in separate tables?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title, Genre FROM Books WHERE YearOfPublication = 2018 AND Genre IN ('Science Fiction', 'Romance')"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 8,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT\n);\nCREATE TABLE BookPublishingHistory(\n    PublishingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    PublisherID INTEGER,\n    YearOfPublication INT,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN),\n    FOREIGN KEY(PublisherID) REFERENCES Publishers(PublisherID)\n);\nCREATE TABLE Books(\n    ISBN VARCHAR(13) UNIQUE PRIMARY KEY,\n    Title TEXT,\n    YearOfPublication INT ,\n    Genre TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\nCREATE TABLE Publishers(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Reviews(\n    ReviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    Rating INT ,\n    Comment TEXT,\n    DatePosted DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\nCREATE TABLE SalesData(\n    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    QuantitySold INT,\n    Revenue DECIMAL(10,2),\n    DateOfSale DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,Country) VALUES (1,'John Doe','USA'),(2,'Jane Smith','UK'),(3,'Alice Johnson','Canada'),(4,'Bob Brown','Australia'),(5,'Charlie White','Germany');\nINSERT INTO \"BookPublishingHistory\" (PublishingID,ISBN,PublisherID,YearOfPublication) VALUES (1,'1234567890123',1,2018),(2,'9876543210987',2,2020),(3,'1122334455667',3,2018),(4,'665544332211',4,2019),(5,'778899110000',5,2017);\nINSERT INTO \"Books\" (ISBN,Title,YearOfPublication,Genre,AuthorID) VALUES ('1234567890123','Science Fiction Book',2018,'Science Fiction',1),('9876543210987','Another Science Fiction Book',2020,'Science Fiction',1),('1122334455667','Romance Book',2018,'Romance',2),('665544332211','Yet Another Romance Book',2019,'Romance',2),('778899110000','Mystery Book',2017,'Mystery',3);\nINSERT INTO \"Publishers\" (PublisherID,Name,Location) VALUES (1,'Publisher A','New York'),(2,'Publisher B','London'),(3,'Publisher C','Toronto'),(4,'Publisher D','Sydney'),(5,'Publisher E','Berlin');\nINSERT INTO \"Reviews\" (ReviewID,ISBN,Rating,Comment,DatePosted) VALUES (1,'1234567890123',5,'Excellent book!','2021-08-01'),(2,'9876543210987',4,'Good read.','2021-08-02'),(3,'1122334455667',3,'Average story.','2021-08-03'),(4,'665544332211',2,'Not my cup of tea.','2021-08-04'),(5,'778899110000',1,'Did not like it at all.','2021-08-05');\nINSERT INTO \"SalesData\" (SaleID,ISBN,QuantitySold,Revenue,DateOfSale) VALUES (1,'1234567890123',500,10000,'2021-08-01'),(2,'9876543210987',600,12000,'2021-08-02'),(3,'1122334455667',400,8000,'2021-08-03'),(4,'665544332211',300,6000,'2021-08-04'),(5,'778899110000',200,4000,'2021-08-05');\n",
      "question": "Provide a list of all science fiction books and also provide a list of romance books published in 2018. Show them in one table.",
      "gold_queries": [
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance' AND BookPublishingHistory.YearOfPublication = 2018"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a list of all science fiction books along with a separate list of romance books published in 2018, shown in two separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title FROM Books WHERE Genre = 'Science Fiction'",
            "SELECT ISBN, Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Provide a list of all science fiction books along with a separate list of romance books published in 2018, shown in two separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title FROM Books WHERE Genre = 'Science Fiction'",
            "SELECT ISBN, Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Provide a table listing the publication details for all books in 2018, indicating science fiction and romance books separately for that year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title, Genre, YearOfPublication FROM Books WHERE YearOfPublication = 2018 AND Genre IN ('Science Fiction', 'Romance')"
          ]
        },
        {
          "interpretation": "Create a table that lists all publications in 2018, distinguishing between science fiction and romance books by genre.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Genre \nFROM Books \nWHERE YearOfPublication = 2018 AND Genre IN ('Science Fiction', 'Romance')"
          ]
        },
        {
          "interpretation": "List all science fiction books in one column and, below or beside them, list all romance books published in 2018 in another column without combining them into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT NULL AS ScienceFictionBooks, Title AS RomanceBooks\nFROM Books\nWHERE Genre = 'Romance' AND YearOfPublication = 2018",
            "SELECT Title AS ScienceFictionBooks, NULL AS RomanceBooks\nFROM Books\nWHERE Genre = 'Science Fiction'"
          ]
        },
        {
          "interpretation": "List all science fiction books in one column and, below or beside them, list all romance books published in 2018 in another column without combining them into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT NULL AS ScienceFictionBooks, Title AS RomanceBooks\nFROM Books\nWHERE Genre = 'Romance' AND YearOfPublication = 2018",
            "SELECT Title AS ScienceFictionBooks, NULL AS RomanceBooks\nFROM Books\nWHERE Genre = 'Science Fiction'"
          ]
        },
        {
          "interpretation": "Provide two separate tables: one for science fiction books and one for romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title, YearOfPublication, Genre, AuthorID FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication = 2018",
            "SELECT ISBN, Title, YearOfPublication, Genre, AuthorID FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Provide two separate tables: one for science fiction books and one for romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title, YearOfPublication, Genre, AuthorID FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication = 2018",
            "SELECT ISBN, Title, YearOfPublication, Genre, AuthorID FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "List all available books published in 2018 in a single table, with a separate row for each book and a column indicating the genre, showing science fiction and romance books together.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, Genre FROM Books WHERE YearOfPublication = 2018 AND Genre IN ('Science Fiction', 'Romance')"
          ]
        },
        {
          "interpretation": "Show a list of all science fiction books and, in another query, show a separate list of romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction'",
            "SELECT Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Show a list of all science fiction books and, in another query, show a separate list of romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction'",
            "SELECT Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Provide a combined table where the first half lists science fiction books and the second half lists romance books published in 2018, separated by a clear marker.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication = 2018\nUNION ALL\nSELECT '-----------'\nUNION ALL\nSELECT Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "List all science fiction books and, in the same output, also list all romance books published in 2018, concatenated into one column with a column indicating the genre and publication year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title || ' (' || Genre || '/' || YearOfPublication || ')' AS BookDetails, Genre, YearOfPublication FROM Books WHERE Genre = 'Science Fiction' OR (Genre = 'Romance' AND YearOfPublication = 2018)"
          ]
        },
        {
          "interpretation": "Provide a single table with two columns, where the first column contains the titles of all science fiction books and the second column is left blank, and then repeat the table structure but filled with titles of romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, '' FROM Books WHERE Genre = 'Science Fiction'\nUNION ALL\nSELECT Title, '' FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        }
      ],
      "num_unique_execution_results": 14,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 22,
        "num_unique_queries": 14,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
      "db_dump": "CREATE TABLE Architects(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Architects_Building_Types(\n    architect_id INTEGER,\n    building_type_id INTEGER,\n    FOREIGN KEY (architect_id) REFERENCES Architects(id),\n    FOREIGN KEY (building_type_id) REFERENCES Building_Types(id),\n    PRIMARY KEY (architect_id, building_type_id)\n);\nCREATE TABLE Building_Types(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT\n);\nCREATE TABLE Job_Postings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    required_skills TEXT,\n    salary REAL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO \"Architects\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',7),(3,'Michael Johnson',5),(4,'Emily Williams',8),(5,'David Brown',6);\nINSERT INTO \"Architects_Building_Types\" (architect_id,building_type_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2);\nINSERT INTO \"Building_Types\" (id,type) VALUES (1,'Residential'),(2,'Commercial'),(3,'Industrial'),(4,'Institutional'),(5,'Mixed-Use');\nINSERT INTO \"Job_Postings\" (id,title,description,required_skills,salary,post_date) VALUES (1,'Senior Residential Architect','Design residential buildings.','AutoCAD, Revit, SketchUp, knowledge of local building codes',90000.0,'2024-01-30 19:16:14'),(2,'Junior Commercial Architect','Assist in designing commercial projects.','AutoCAD, Revit, basic understanding of structural systems',60000.0,'2024-01-30 19:16:14'),(3,'Architectural Designer','Support architects on various project types.','SketchUp, InDesign, Adobe Creative Suite',50000.0,'2024-01-30 19:16:14'),(4,'Project Manager','Oversee construction projects from start to finish.','PMP certification, strong communication skills, knowledge of contract law',80000.0,'2024-01-30 19:16:14'),(5,'BIM Coordinator','Create and manage BIM models for projects.','Revit, Navisworks, Dynamo, Rhino',65000.0,'2024-01-30 19:16:14');\n",
      "question": "What type of building types are associated with each architect?",
      "gold_queries": [
        "SELECT Building_Types.type  from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id   GROUP BY Architects_Building_Types.building_type_id HAVING COUNT(DISTINCT Architects_Building_Types.architect_id) = (SELECT COUNT(*) FROM  Architects)",
        "select architects.name , building_types.type from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Architects associated with Residential and Commercial building types",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types BT ON ABT.building_type_id = BT.id\nWHERE BT.type IN ('Residential', 'Commercial')\nGROUP BY A.name\nHAVING COUNT(DISTINCT BT.type) = 2"
          ]
        },
        {
          "interpretation": "Architects with certifications in Residential and Commercial building types",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.id, a.name\nFROM Architects a\nJOIN Architects_Building_Types abt1 ON a.id = abt1.architect_id\nJOIN Building_Types bt1 ON abt1.building_type_id = bt1.id\nJOIN Architects_Building_Types abt2 ON a.id = abt2.architect_id\nJOIN Building_Types bt2 ON abt2.building_type_id = bt2.id\nWHERE bt1.type = 'Residential' AND bt2.type = 'Commercial'"
          ]
        },
        {
          "interpretation": "Architects associated with Residential and Non-Residential building types",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types BT ON ABT.building_type_id = BT.id\nWHERE BT.type IN ('Residential', 'Commercial', 'Industrial', 'Institutional', 'Mixed-Use')"
          ]
        },
        {
          "interpretation": "Building types related to each architect's expertise",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, BT.type\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types BT ON ABT.building_type_id = BT.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
      "db_dump": "CREATE TABLE Architects(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Architects_Building_Types(\n    architect_id INTEGER,\n    building_type_id INTEGER,\n    FOREIGN KEY (architect_id) REFERENCES Architects(id),\n    FOREIGN KEY (building_type_id) REFERENCES Building_Types(id),\n    PRIMARY KEY (architect_id, building_type_id)\n);\nCREATE TABLE Building_Types(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT\n);\nCREATE TABLE Job_Postings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    required_skills TEXT,\n    salary REAL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO \"Architects\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',7),(3,'Michael Johnson',5),(4,'Emily Williams',8),(5,'David Brown',6);\nINSERT INTO \"Architects_Building_Types\" (architect_id,building_type_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2);\nINSERT INTO \"Building_Types\" (id,type) VALUES (1,'Residential'),(2,'Commercial'),(3,'Industrial'),(4,'Institutional'),(5,'Mixed-Use');\nINSERT INTO \"Job_Postings\" (id,title,description,required_skills,salary,post_date) VALUES (1,'Senior Residential Architect','Design residential buildings.','AutoCAD, Revit, SketchUp, knowledge of local building codes',90000.0,'2024-01-30 19:16:14'),(2,'Junior Commercial Architect','Assist in designing commercial projects.','AutoCAD, Revit, basic understanding of structural systems',60000.0,'2024-01-30 19:16:14'),(3,'Architectural Designer','Support architects on various project types.','SketchUp, InDesign, Adobe Creative Suite',50000.0,'2024-01-30 19:16:14'),(4,'Project Manager','Oversee construction projects from start to finish.','PMP certification, strong communication skills, knowledge of contract law',80000.0,'2024-01-30 19:16:14'),(5,'BIM Coordinator','Create and manage BIM models for projects.','Revit, Navisworks, Dynamo, Rhino',65000.0,'2024-01-30 19:16:14');\n",
      "question": "For each architect, provide the corresponding building type.",
      "gold_queries": [
        "select architects.name , building_types.type from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each architect, give the building types they are responsible for.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT a.name, b.type\nFROM Architects a\nJOIN Architects_Building_Types abt ON a.id = abt.architect_id\nJOIN Building_Types b ON abt.building_type_id = b.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
      "db_dump": "CREATE TABLE Architects(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Architects_Building_Types(\n    architect_id INTEGER,\n    building_type_id INTEGER,\n    FOREIGN KEY (architect_id) REFERENCES Architects(id),\n    FOREIGN KEY (building_type_id) REFERENCES Building_Types(id),\n    PRIMARY KEY (architect_id, building_type_id)\n);\nCREATE TABLE Building_Types(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT\n);\nCREATE TABLE Job_Postings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    required_skills TEXT,\n    salary REAL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO \"Architects\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',7),(3,'Michael Johnson',5),(4,'Emily Williams',8),(5,'David Brown',6);\nINSERT INTO \"Architects_Building_Types\" (architect_id,building_type_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2);\nINSERT INTO \"Building_Types\" (id,type) VALUES (1,'Residential'),(2,'Commercial'),(3,'Industrial'),(4,'Institutional'),(5,'Mixed-Use');\nINSERT INTO \"Job_Postings\" (id,title,description,required_skills,salary,post_date) VALUES (1,'Senior Residential Architect','Design residential buildings.','AutoCAD, Revit, SketchUp, knowledge of local building codes',90000.0,'2024-01-30 19:16:14'),(2,'Junior Commercial Architect','Assist in designing commercial projects.','AutoCAD, Revit, basic understanding of structural systems',60000.0,'2024-01-30 19:16:14'),(3,'Architectural Designer','Support architects on various project types.','SketchUp, InDesign, Adobe Creative Suite',50000.0,'2024-01-30 19:16:14'),(4,'Project Manager','Oversee construction projects from start to finish.','PMP certification, strong communication skills, knowledge of contract law',80000.0,'2024-01-30 19:16:14'),(5,'BIM Coordinator','Create and manage BIM models for projects.','Revit, Navisworks, Dynamo, Rhino',65000.0,'2024-01-30 19:16:14');\n",
      "question": "What type of building is common across all architects?",
      "gold_queries": [
        "SELECT Building_Types.type  from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id   GROUP BY Architects_Building_Types.building_type_id HAVING COUNT(DISTINCT Architects_Building_Types.architect_id) = (SELECT COUNT(*) FROM  Architects)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What common building type do all architects work on?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type \nFROM Building_Types \nWHERE id IN (\n    SELECT building_type_id \n    FROM Architects_Building_Types \n    GROUP BY building_type_id \n    HAVING COUNT(DISTINCT architect_id) = (SELECT COUNT(*) FROM Architects)\n)"
          ]
        },
        {
          "interpretation": "Do all architects have the same experience with a particular type of building?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name, bt.type, abt.architect_id, abt.building_type_id\nFROM Architects a\nJOIN Architects_Building_Types abt ON a.id = abt.architect_id\nJOIN Building_Types bt ON abt.building_type_id = bt.id\nGROUP BY a.id, bt.id\nHAVING COUNT(DISTINCT a.experience) > 1"
          ]
        },
        {
          "interpretation": "Does every architect have expertise in the same building type?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT architect_id, building_type_id\nFROM Architects_Building_Types\nGROUP BY architect_id\nHAVING COUNT(DISTINCT building_type_id) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "List the status of subtitles available at each streaming service.",
      "gold_queries": [
        "SELECT Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.name , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the streaming services that do not offer any subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Streaming_Services WHERE id NOT IN (SELECT streaming_service_id FROM Streaming_Services_Subtitles)"
          ]
        },
        {
          "interpretation": "List the streaming services and their corresponding subtitle IDs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT streaming_service_id, subtitle_id FROM Streaming_Services_Subtitles"
          ]
        },
        {
          "interpretation": "List the streaming services that offer English subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nJOIN Subtitles s ON sss.subtitle_id = s.id \nWHERE s.language = 'English'"
          ]
        },
        {
          "interpretation": "List the streaming services and their default subtitle status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SS.name, S.default_subtitle\nFROM Streaming_Services AS SS\nJOIN Streaming_Services_Subtitles AS SSS ON SS.id = SSS.streaming_service_id\nJOIN Subtitles AS S ON SSS.subtitle_id = S.id\nWHERE S.default_subtitle = TRUE"
          ]
        },
        {
          "interpretation": "List the streaming services and the languages of their non-default subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SS.name, S.language \nFROM Streaming_Services SS \nJOIN Streaming_Services_Subtitles SSS ON SS.id = SSS.streaming_service_id \nJOIN Subtitles S ON SSS.subtitle_id = S.id \nWHERE S.default_subtitle = FALSE"
          ]
        },
        {
          "interpretation": "List the streaming services and the total number of subtitles associated with them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, COUNT(SS.subtitle_id) AS total_subtitles\nFROM Streaming_Services S\nJOIN Streaming_Services_Subtitles SS ON S.id = SS.streaming_service_id\nGROUP BY S.name"
          ]
        },
        {
          "interpretation": "List the streaming services and whether they offer any non-default subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, CASE WHEN s.default_subtitle = 0 THEN 'Yes' ELSE 'No' END AS offers_non_default_subtitles\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "List the languages of subtitles available for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, Sub.language\nFROM Streaming_Services AS S\nJOIN Streaming_Services_Subtitles AS SSS ON S.id = SSS.streaming_service_id\nJOIN Subtitles AS Sub ON SSS.subtitle_id = Sub.id"
          ]
        },
        {
          "interpretation": "List the streaming services and the languages of their default subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, SUB.language\nFROM Streaming_Services AS S\nJOIN Streaming_Services_Subtitles AS SSS ON S.id = SSS.streaming_service_id\nJOIN Subtitles AS SUB ON SSS.subtitle_id = SUB.id\nWHERE SUB.default_subtitle = 1"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_video_quality/scope_streaming_service_video_quality.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_Video_Quality (\n    streaming_service_id INTEGER,\n    video_quality_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY (video_quality_id) REFERENCES Video_Quality(id),\n    PRIMARY KEY (streaming_service_id, video_quality_id)\n);\nCREATE TABLE Video_Quality (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    quality TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'YouTube Premium',11.99);\nINSERT INTO \"Streaming_Service_Video_Quality\" (streaming_service_id,video_quality_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Video_Quality\" (id,quality) VALUES (1,'HD'),(2,'SD'),(3,'Ultra HD'),(4,'FHD'),(5,'3D');\n",
      "question": "What video quality is common across all streaming services?",
      "gold_queries": [
        "SELECT Video_Quality.quality  from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Video_Quality.video_quality_id HAVING COUNT(DISTINCT Streaming_Service_Video_Quality.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Are the video qualities offered by all streaming services identical?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.quality \nFROM Streaming_Service_Video_Quality AS T1 \nJOIN Video_Quality AS T2 ON T1.video_quality_id = T2.id"
          ]
        },
        {
          "interpretation": "What video qualities are shared by all streaming services?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT quality FROM Video_Quality WHERE id IN (SELECT video_quality_id FROM Streaming_Service_Video_Quality GROUP BY video_quality_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service))"
          ]
        },
        {
          "interpretation": "What is the intersecting video quality available in all streaming services?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT quality\nFROM Streaming_Service_Video_Quality SSVQ1\nJOIN Video_Quality VQ ON SSVQ1.video_quality_id = VQ.id\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Streaming_Service\n    WHERE id NOT IN (\n        SELECT streaming_service_id\n        FROM Streaming_Service_Video_Quality SSVQ2\n        WHERE SSVQ2.video_quality_id = SSVQ1.video_quality_id\n    )\n)"
          ]
        },
        {
          "interpretation": "Does every streaming service support the same video quality?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ss.name, vq.quality\nFROM Streaming_Service_Video_Quality ss_vq\nJOIN Streaming_Service ss ON ss_vq.streaming_service_id = ss.id\nJOIN Video_Quality vq ON ss_vq.video_quality_id = vq.id\nORDER BY ss.name, vq.quality"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_video_quality/scope_streaming_service_video_quality.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_Video_Quality (\n    streaming_service_id INTEGER,\n    video_quality_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY (video_quality_id) REFERENCES Video_Quality(id),\n    PRIMARY KEY (streaming_service_id, video_quality_id)\n);\nCREATE TABLE Video_Quality (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    quality TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'YouTube Premium',11.99);\nINSERT INTO \"Streaming_Service_Video_Quality\" (streaming_service_id,video_quality_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Video_Quality\" (id,quality) VALUES (1,'HD'),(2,'SD'),(3,'Ultra HD'),(4,'FHD'),(5,'3D');\n",
      "question": "Show me the video quality that every streaming service offers.",
      "gold_queries": [
        "SELECT Video_Quality.quality  from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Video_Quality.video_quality_id HAVING COUNT(DISTINCT Streaming_Service_Video_Quality.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)",
        "select streaming_service.name , video_quality.quality from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the video quality that every streaming service includes.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT q.quality\nFROM Video_Quality q\nWHERE q.id IN (\n    SELECT vsq.video_quality_id\n    FROM Streaming_Service_Video_Quality vsq\n    GROUP BY vsq.video_quality_id\n    HAVING COUNT(DISTINCT vsq.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)\n)"
          ]
        },
        {
          "interpretation": "Show me the video quality that each streaming service always provides.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, vq.quality\nFROM Streaming_Service ss\nJOIN Streaming_Service_Video_Quality ssvq ON ss.id = ssvq.streaming_service_id\nJOIN Video_Quality vq ON ssvq.video_quality_id = vq.id\nGROUP BY ss.name, vq.quality\nHAVING COUNT(DISTINCT vq.id) = 1"
          ]
        },
        {
          "interpretation": "Show me the video quality that all streaming services supply.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT q.quality \nFROM Video_Quality q \nWHERE q.id NOT IN (\n    SELECT vq.video_quality_id \n    FROM Streaming_Service_Video_Quality vq \n    GROUP BY vq.video_quality_id \n    HAVING COUNT(vq.streaming_service_id) < (SELECT COUNT(*) FROM Streaming_Service)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_video_quality/scope_streaming_service_video_quality.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_Video_Quality (\n    streaming_service_id INTEGER,\n    video_quality_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY (video_quality_id) REFERENCES Video_Quality(id),\n    PRIMARY KEY (streaming_service_id, video_quality_id)\n);\nCREATE TABLE Video_Quality (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    quality TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'YouTube Premium',11.99);\nINSERT INTO \"Streaming_Service_Video_Quality\" (streaming_service_id,video_quality_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Video_Quality\" (id,quality) VALUES (1,'HD'),(2,'SD'),(3,'Ultra HD'),(4,'FHD'),(5,'3D');\n",
      "question": "For every streaming service, list the video quality offered.",
      "gold_queries": [
        "select streaming_service.name , video_quality.quality from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every streaming service, list the corresponding video quality.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.name, v.quality\nFROM Streaming_Service s\nJOIN Streaming_Service_Video_Quality ssVQ ON s.id = ssVQ.streaming_service_id\nJOIN Video_Quality v ON ssVQ.video_quality_id = v.id"
          ]
        },
        {
          "interpretation": "For every streaming_service, list the video_quality_id offered.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT streaming_service_id, video_quality_id FROM Streaming_Service_Video_Quality"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_User_Interface (\n    streaming_service_id INTEGER,\n    user_interface_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(user_interface_id) REFERENCES User_Interface(id)\n);\nCREATE TABLE User_Interface (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    interface_type TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Service_User_Interface\" (streaming_service_id,user_interface_id) VALUES (1,2),(2,2),(3,2),(4,2),(5,2),(5,4);\nINSERT INTO \"User_Interface\" (id,interface_type) VALUES (1,'Light Mode'),(2,'Dark Mode'),(3,'Classic Mode'),(4,'Minimalist Mode'),(5,'Customizable Mode');\n",
      "question": "What user interface types are there for every streaming service?",
      "gold_queries": [
        "SELECT User_Interface.interface_type  from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_User_Interface.user_interface_id HAVING COUNT(DISTINCT Streaming_Service_User_Interface.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)",
        "select streaming_service.name , user_interface.interface_type from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the user interface types available for each streaming service?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SS.name, UI.interface_type \nFROM Streaming_Service SS \nJOIN Streaming_Service_User_Interface SSIU ON SS.id = SSIU.streaming_service_id \nJOIN User_Interface UI ON SSIU.user_interface_id = UI.id"
          ]
        },
        {
          "interpretation": "What user interface types are there among all streaming services?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.interface_type FROM Streaming_Service_User_Interface AS T1 JOIN User_Interface AS T2 ON T1.user_interface_id = T2.id"
          ]
        },
        {
          "interpretation": "What are the unique user interface types across all streaming services?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT interface_type FROM User_Interface"
          ]
        },
        {
          "interpretation": "What user interface modes exist for all streaming services collectively?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ui.interface_type \nFROM User_Interface ui \nJOIN Streaming_Service_User_Interface ssui ON ui.id = ssui.user_interface_id \nGROUP BY ui.interface_type \nHAVING COUNT(DISTINCT ssui.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_User_Interface (\n    streaming_service_id INTEGER,\n    user_interface_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(user_interface_id) REFERENCES User_Interface(id)\n);\nCREATE TABLE User_Interface (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    interface_type TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Service_User_Interface\" (streaming_service_id,user_interface_id) VALUES (1,2),(2,2),(3,2),(4,2),(5,2),(5,4);\nINSERT INTO \"User_Interface\" (id,interface_type) VALUES (1,'Light Mode'),(2,'Dark Mode'),(3,'Classic Mode'),(4,'Minimalist Mode'),(5,'Customizable Mode');\n",
      "question": "What interface types are the same for all streaming services?",
      "gold_queries": [
        "SELECT User_Interface.interface_type  from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_User_Interface.user_interface_id HAVING COUNT(DISTINCT Streaming_Service_User_Interface.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_User_Interface (\n    streaming_service_id INTEGER,\n    user_interface_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(user_interface_id) REFERENCES User_Interface(id)\n);\nCREATE TABLE User_Interface (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    interface_type TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Service_User_Interface\" (streaming_service_id,user_interface_id) VALUES (1,2),(2,2),(3,2),(4,2),(5,2),(5,4);\nINSERT INTO \"User_Interface\" (id,interface_type) VALUES (1,'Light Mode'),(2,'Dark Mode'),(3,'Classic Mode'),(4,'Minimalist Mode'),(5,'Customizable Mode');\n",
      "question": "For all streaming services list the available user interface types.",
      "gold_queries": [
        "select streaming_service.name , user_interface.interface_type from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For all streaming services, list the user interface type identifiers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ui.interface_type\nFROM Streaming_Service ss\nJOIN Streaming_Service_User_Interface ssui ON ss.id = ssui.streaming_service_id\nJOIN User_Interface ui ON ssui.user_interface_id = ui.id"
          ]
        },
        {
          "interpretation": "For all streaming services, list the user interface choices.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.name, UI.interface_type \nFROM Streaming_Service S \nJOIN Streaming_Service_User_Interface SUI ON S.id = SUI.streaming_service_id \nJOIN User_Interface UI ON SUI.user_interface_id = UI.id"
          ]
        },
        {
          "interpretation": "For all streaming services, list the unique user interface types across all services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.interface_type FROM Streaming_Service_User_Interface AS T1 JOIN User_Interface AS T2 ON T1.user_interface_id = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "For every streaming service, give me the corresponding languages and default subtitles.",
      "gold_queries": [
        "select streaming_services.name , subtitles.language , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every streaming service, display the available subtitle languages and their default status.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT SS.name AS streaming_service, S.language AS subtitle_language, S.default_subtitle AS is_default\nFROM Streaming_Services AS SS\nJOIN Streaming_Services_Subtitles AS SSS ON SS.id = SSS.streaming_service_id\nJOIN Subtitles AS S ON SSS.subtitle_id = S.id"
          ]
        },
        {
          "interpretation": "For every streaming service, list the languages available for subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, SUB.language\nFROM Streaming_Services S\nJOIN Streaming_Services_Subtitles SSS ON S.id = SSS.streaming_service_id\nJOIN Subtitles SUB ON SSS.subtitle_id = SUB.id"
          ]
        },
        {
          "interpretation": "For every streaming service, provide the default subtitle language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language \nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = TRUE"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "List the status of subtitles for every streaming service.",
      "gold_queries": [
        "select streaming_services.name , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the subtitle IDs for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT streaming_service_id, subtitle_id FROM Streaming_Services_Subtitles"
          ]
        },
        {
          "interpretation": "List the primary subtitle language for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nJOIN Subtitles s ON sss.subtitle_id = s.id \nWHERE s.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "List whether each streaming service offers subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SS.name, CASE WHEN SSS.subtitle_id IS NULL THEN 'No' ELSE 'Yes' END AS offers_subtitles\nFROM Streaming_Services SS\nLEFT JOIN Streaming_Services_Subtitles SSS ON SS.id = SSS.streaming_service_id"
          ]
        },
        {
          "interpretation": "List the number of subtitles for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, COUNT(sss.subtitle_id) AS number_of_subtitles\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "List the total number of subtitle IDs associated with each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT streaming_service_id, COUNT(subtitle_id) AS total_subtitles\nFROM Streaming_Services_Subtitles\nGROUP BY streaming_service_id"
          ]
        },
        {
          "interpretation": "List the percentage of streaming services that offer subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CAST(COUNT(DISTINCT streaming_service_id) AS REAL) * 100 / (SELECT COUNT(*) FROM Streaming_Services) AS percentage FROM Streaming_Services_Subtitles"
          ]
        },
        {
          "interpretation": "List the number of non-default subtitles for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, COUNT(sss.subtitle_id) AS non_default_subtitle_count\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = 0\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "List the streaming services that provide subtitles in English.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Streaming_Services AS T1 JOIN Streaming_Services_Subtitles AS T2 ON T1.id = T2.streaming_service_id JOIN Subtitles AS T3 ON T2.subtitle_id = T3.id WHERE T3.language = 'English'"
          ]
        },
        {
          "interpretation": "List the languages of subtitles for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, SUB.language\nFROM Streaming_Services S\nJOIN Streaming_Services_Subtitles SSS ON S.id = SSS.streaming_service_id\nJOIN Subtitles SUB ON SSS.subtitle_id = SUB.id"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Traffic/scope_train_stations_platforms/scope_train_stations_platforms.sqlite",
      "db_dump": "CREATE TABLE Platforms(\n    PlatformID INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"Name\" TEXT);\nCREATE TABLE Train_Stations(\n    StationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Train_Stations_Platforms(\n    StationID INTEGER,\n    PlatformID INTEGER,\n    FOREIGN KEY(StationID) REFERENCES Train_Stations(StationID),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(PlatformID));\n\nINSERT INTO \"Platforms\" (PlatformID,Name) VALUES (1,'Platform_1'),(2,'Platform_2'),(3,'Platform_3'),(4,'Platform_4'),(5,'Platform_5');\nINSERT INTO \"Train_Stations\" (StationID,Name,Location) VALUES (1,'Central','Downtown'),(2,'Parkville','East Side'),(3,'Washington','West Side'),(4,'Lakeview','North Side'),(5,'Riverfront','South Side');\nINSERT INTO \"Train_Stations_Platforms\" (StationID,PlatformID) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,3),(4,4),(4,5),(5,1),(5,3),(4,1);\n",
      "question": "Give me the platform names that are at each train station.",
      "gold_queries": [
        "SELECT Platforms.Name  from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID   GROUP BY Train_Stations_Platforms.PlatformID HAVING COUNT(DISTINCT Train_Stations_Platforms.StationID) = (SELECT COUNT(*) FROM  Train_Stations)",
        "select train_stations.name , platforms.name from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the platform details for every train station.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TS.Name AS StationName, P.Name AS PlatformName\nFROM Train_Stations TS\nJOIN Train_Stations_Platforms TSP ON TS.StationID = TSP.StationID\nJOIN Platforms P ON TSP.PlatformID = P.PlatformID"
          ]
        },
        {
          "interpretation": "Enumerate the platforms at every train station location.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Location, T3.Name\nFROM Train_Stations AS T1\nJOIN Train_Stations_Platforms AS T2 ON T1.StationID = T2.StationID\nJOIN Platforms AS T3 ON T2.PlatformID = T3.PlatformID"
          ]
        },
        {
          "interpretation": "Provide me with the platform names for all train stations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.Name FROM Platforms P JOIN Train_Stations_Platforms TSP ON P.PlatformID = TSP.PlatformID"
          ]
        },
        {
          "interpretation": "Give me the platform identifiers for each train station.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StationID, PlatformID FROM Train_Stations_Platforms"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Traffic/scope_train_stations_platforms/scope_train_stations_platforms.sqlite",
      "db_dump": "CREATE TABLE Platforms(\n    PlatformID INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"Name\" TEXT);\nCREATE TABLE Train_Stations(\n    StationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Train_Stations_Platforms(\n    StationID INTEGER,\n    PlatformID INTEGER,\n    FOREIGN KEY(StationID) REFERENCES Train_Stations(StationID),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(PlatformID));\n\nINSERT INTO \"Platforms\" (PlatformID,Name) VALUES (1,'Platform_1'),(2,'Platform_2'),(3,'Platform_3'),(4,'Platform_4'),(5,'Platform_5');\nINSERT INTO \"Train_Stations\" (StationID,Name,Location) VALUES (1,'Central','Downtown'),(2,'Parkville','East Side'),(3,'Washington','West Side'),(4,'Lakeview','North Side'),(5,'Riverfront','South Side');\nINSERT INTO \"Train_Stations_Platforms\" (StationID,PlatformID) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,3),(4,4),(4,5),(5,1),(5,3),(4,1);\n",
      "question": "What platform names are in common for all train stations?",
      "gold_queries": [
        "SELECT Platforms.Name  from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID   GROUP BY Train_Stations_Platforms.PlatformID HAVING COUNT(DISTINCT Train_Stations_Platforms.StationID) = (SELECT COUNT(*) FROM  Train_Stations)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Platform_1,Platform_2,Platform_3",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Platforms WHERE Name IN ('Platform_1', 'Platform_2', 'Platform_3')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Traffic/scope_train_stations_platforms/scope_train_stations_platforms.sqlite",
      "db_dump": "CREATE TABLE Platforms(\n    PlatformID INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"Name\" TEXT);\nCREATE TABLE Train_Stations(\n    StationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Train_Stations_Platforms(\n    StationID INTEGER,\n    PlatformID INTEGER,\n    FOREIGN KEY(StationID) REFERENCES Train_Stations(StationID),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(PlatformID));\n\nINSERT INTO \"Platforms\" (PlatformID,Name) VALUES (1,'Platform_1'),(2,'Platform_2'),(3,'Platform_3'),(4,'Platform_4'),(5,'Platform_5');\nINSERT INTO \"Train_Stations\" (StationID,Name,Location) VALUES (1,'Central','Downtown'),(2,'Parkville','East Side'),(3,'Washington','West Side'),(4,'Lakeview','North Side'),(5,'Riverfront','South Side');\nINSERT INTO \"Train_Stations_Platforms\" (StationID,PlatformID) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,3),(4,4),(4,5),(5,1),(5,3),(4,1);\n",
      "question": "For every train station, what platform names are there?",
      "gold_queries": [
        "select train_stations.name , platforms.name from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every station, list all platform names connected to it.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Train_Stations.Name AS StationName, Platforms.Name AS PlatformName\nFROM Train_Stations\nJOIN Train_Stations_Platforms ON Train_Stations.StationID = Train_Stations_Platforms.StationID\nJOIN Platforms ON Train_Stations_Platforms.PlatformID = Platforms.PlatformID"
          ]
        },
        {
          "interpretation": "For each location, show the platform names associated with it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.Location, T1.Name \nFROM Train_Stations_Platforms AS T3 \nJOIN Train_Stations AS T2 ON T3.StationID = T2.StationID \nJOIN Platforms AS T1 ON T3.PlatformID = T1.PlatformID \nGROUP BY T2.Location, T1.Name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "What languages are available for subtitles on each streaming service?",
      "gold_queries": [
        "SELECT Subtitles.language  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.name , subtitles.language from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the different languages offered for subtitles by each streaming service?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name, sub.language \nFROM Streaming_Services s \nJOIN Streaming_Services_Subtitles sss ON s.id = sss.streaming_service_id \nJOIN Subtitles sub ON sss.subtitle_id = sub.id"
          ]
        },
        {
          "interpretation": "For all streaming services, what are the subtitle languages that are available?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT S.language\nFROM Subtitles S\nJOIN Streaming_Services_Subtitles SSS ON S.id = SSS.subtitle_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "List the status of subtitles that are common to all streaming services.",
      "gold_queries": [
        "SELECT Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the status of subtitles that are available on all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT language, default_subtitle \nFROM Subtitles \nWHERE id IN (\n    SELECT subtitle_id \n    FROM Streaming_Services_Subtitles \n    GROUP BY subtitle_id \n    HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)\n)"
          ]
        },
        {
          "interpretation": "List the shared default status across all streaming service subtitles.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT default_subtitle FROM Subtitles WHERE id IN (SELECT subtitle_id FROM Streaming_Services_Subtitles GROUP BY subtitle_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services))"
          ]
        },
        {
          "interpretation": "List the existence status of subtitles across all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language, s.default_subtitle\nFROM Streaming_Services_Subtitles sss\nJOIN Streaming_Services ss ON sss.streaming_service_id = ss.id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "List whether subtitles are default for all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Streaming_Services.name, Subtitles.default_subtitle \nFROM Streaming_Services \nJOIN Streaming_Services_Subtitles ON Streaming_Services.id = Streaming_Services_Subtitles.streaming_service_id \nJOIN Subtitles ON Streaming_Services_Subtitles.subtitle_id = Subtitles.id"
          ]
        },
        {
          "interpretation": "List the availability status of subtitles shared by all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT language, COUNT(DISTINCT streaming_service_id) AS availability_count\nFROM Streaming_Services_Subtitles\nJOIN Subtitles ON Streaming_Services_Subtitles.subtitle_id = Subtitles.id\nGROUP BY language\nHAVING availability_count = (SELECT COUNT(*) FROM Streaming_Services)"
          ]
        },
        {
          "interpretation": "List the unique subtitle status across all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT default_subtitle FROM Subtitles"
          ]
        },
        {
          "interpretation": "List whether a single subtitle is available on all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.language, \n       CASE \n           WHEN COUNT(DISTINCT ss.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services) THEN 'Yes'\n           ELSE 'No'\n       END AS available_on_all\nFROM Subtitles s\nJOIN Streaming_Services_Subtitles ss ON s.id = ss.subtitle_id\nGROUP BY s.language"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "For each streaming service. provide the corresponding subtitle language options.",
      "gold_queries": [
        "select streaming_services.name , subtitles.language from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each streaming service, provide the primary subtitle language available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nJOIN Subtitles s ON sss.subtitle_id = s.id \nWHERE s.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "For each streaming service, provide the list of subtitle languages available.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.name, SUB.language\nFROM Streaming_Services S\nJOIN Streaming_Services_Subtitles SSS ON S.id = SSS.streaming_service_id\nJOIN Subtitles SUB ON SSS.subtitle_id = SUB.id"
          ]
        },
        {
          "interpretation": "For each streaming service, provide the non-default subtitle languages available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services_Subtitles sss\nJOIN Streaming_Services ss ON sss.streaming_service_id = ss.id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = FALSE"
          ]
        },
        {
          "interpretation": "For each streaming service, provide the subtitle languages along with their default status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name AS streaming_service, s.language, s.default_subtitle\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "what language and default subtitle is common for all streaming services?",
      "gold_queries": [
        "SELECT Subtitles.language, Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "Which subtitle language is common across all streaming services?",
      "gold_queries": [
        "SELECT Subtitles.language  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Are there multiple languages common across all streaming services, and if so, which one is the most frequent?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT language\nFROM Subtitles\nWHERE id IN (\n    SELECT subtitle_id\n    FROM Streaming_Services_Subtitles\n    GROUP BY subtitle_id\n    HAVING COUNT(DISTINCT streaming_service_id) = (\n        SELECT COUNT(*)\n        FROM Streaming_Services\n    )\n)\nGROUP BY language\nORDER BY COUNT(*) DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "Which languages and default subtitles are associated with every streaming service?",
      "gold_queries": [
        "SELECT Subtitles.language, Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.name , subtitles.language , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Journalism/scope_editorial_teams_roles/scope_editorial_teams_roles.sqlite",
      "db_dump": "CREATE TABLE Editorial_Teams(\n    TeamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TeamName TEXT,\n    TeamDescription TEXT\n);\nCREATE TABLE Editorial_Teams_Roles(\n    TeamID INTEGER,\n    RoleID INTEGER,\n    FOREIGN KEY(TeamID) REFERENCES Editorial_Teams(TeamID),\n    FOREIGN KEY(RoleID) REFERENCES Roles(RoleID),\n    PRIMARY KEY(TeamID, RoleID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoleName TEXT\n);\n\nINSERT INTO \"Editorial_Teams\" (TeamID,TeamName,TeamDescription) VALUES (1,'Team1','A team focused on sports journalism.'),(2,'Team2','Specializes in political news coverage.'),(3,'Team3','Focuses on technology and innovation articles.'),(4,'Team4','Covering arts, culture, and entertainment stories.'),(5,'Team5','Dedicated to investigative reporting.');\nINSERT INTO \"Editorial_Teams_Roles\" (TeamID,RoleID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Copy_Editor'),(2,'Reporter'),(3,'Photographer'),(4,'Designer'),(5,'Web Developer');\n",
      "question": "Show me the role that is in common for all editorial teams.",
      "gold_queries": [
        "SELECT Roles.RoleName  from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID   GROUP BY Editorial_Teams_Roles.RoleID HAVING COUNT(DISTINCT Editorial_Teams_Roles.TeamID) = (SELECT COUNT(*) FROM  Editorial_Teams)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the role that appears in every editorial team record.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT RoleName FROM Roles WHERE RoleID IN (SELECT RoleID FROM Editorial_Teams_Roles GROUP BY RoleID HAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(*) FROM Editorial_Teams))"
          ]
        },
        {
          "interpretation": "Show the role found in all rows of the Editorial_Teams_Roles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RoleID FROM Editorial_Teams_Roles GROUP BY RoleID HAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(*) FROM Editorial_Teams)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_editorial_teams_roles/scope_editorial_teams_roles.sqlite",
      "db_dump": "CREATE TABLE Editorial_Teams(\n    TeamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TeamName TEXT,\n    TeamDescription TEXT\n);\nCREATE TABLE Editorial_Teams_Roles(\n    TeamID INTEGER,\n    RoleID INTEGER,\n    FOREIGN KEY(TeamID) REFERENCES Editorial_Teams(TeamID),\n    FOREIGN KEY(RoleID) REFERENCES Roles(RoleID),\n    PRIMARY KEY(TeamID, RoleID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoleName TEXT\n);\n\nINSERT INTO \"Editorial_Teams\" (TeamID,TeamName,TeamDescription) VALUES (1,'Team1','A team focused on sports journalism.'),(2,'Team2','Specializes in political news coverage.'),(3,'Team3','Focuses on technology and innovation articles.'),(4,'Team4','Covering arts, culture, and entertainment stories.'),(5,'Team5','Dedicated to investigative reporting.');\nINSERT INTO \"Editorial_Teams_Roles\" (TeamID,RoleID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Copy_Editor'),(2,'Reporter'),(3,'Photographer'),(4,'Designer'),(5,'Web Developer');\n",
      "question": "Give me the role associated with each editorial team.",
      "gold_queries": [
        "SELECT Roles.RoleName  from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID   GROUP BY Editorial_Teams_Roles.RoleID HAVING COUNT(DISTINCT Editorial_Teams_Roles.TeamID) = (SELECT COUNT(*) FROM  Editorial_Teams)",
        "select editorial_teams.teamname , roles.rolename from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the role IDs and names for each team.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ETR.RoleID, R.RoleName\nFROM Editorial_Teams_Roles ETR\nJOIN Roles R ON ETR.RoleID = R.RoleID"
          ]
        },
        {
          "interpretation": "Fetch the roles linked to each editorial team from the database.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ET.TeamName, R.RoleName\nFROM Editorial_Teams_Roles ETR\nJOIN Editorial_Teams ET ON ETR.TeamID = ET.TeamID\nJOIN Roles R ON ETR.RoleID = R.RoleID"
          ]
        },
        {
          "interpretation": "Retrieve the RoleID and RoleName for each TeamID in Editorial_Teams_Roles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ER.TeamID, R.RoleID, R.RoleName \nFROM Editorial_Teams_Roles ER \nJOIN Roles R ON ER.RoleID = R.RoleID"
          ]
        },
        {
          "interpretation": "Present the RoleIDs and corresponding RoleNames for all editorial teams.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RoleID, RoleName FROM Roles WHERE RoleID IN (SELECT RoleID FROM Editorial_Teams_Roles GROUP BY RoleID HAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(*) FROM Editorial_Teams))"
          ]
        },
        {
          "interpretation": "Give me the RoleName associated with each TeamID.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RoleName FROM Roles WHERE RoleID IN (SELECT RoleID FROM Editorial_Teams_Roles GROUP BY RoleID HAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(*) FROM Editorial_Teams))"
          ]
        },
        {
          "interpretation": "List the RoleID for every TeamID in the Editorial_Teams_Roles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RoleID, TeamID FROM Editorial_Teams_Roles"
          ]
        },
        {
          "interpretation": "Provide me with the Roles linked to each Editorial Team.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ET.TeamName, R.RoleName\nFROM Editorial_Teams ET\nJOIN Editorial_Teams_Roles ETR ON ET.TeamID = ETR.TeamID\nJOIN Roles R ON ETR.RoleID = R.RoleID\nWHERE ETR.RoleID = (\n    SELECT RoleID\n    FROM Editorial_Teams_Roles\n    GROUP BY RoleID\n    HAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(*) FROM Editorial_Teams)\n)"
          ]
        },
        {
          "interpretation": "Give me the RoleID associated with each TeamID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TeamID, RoleID\nFROM Editorial_Teams_Roles\nWHERE RoleID IN (\n    SELECT RoleID\n    FROM Editorial_Teams_Roles\n    GROUP BY RoleID\n    HAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(*) FROM Editorial_Teams)\n)"
          ]
        },
        {
          "interpretation": "Enumerate all roles and their IDs for each editorial team.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ET.TeamName, R.RoleID, R.RoleName\nFROM Editorial_Teams_Roles AS ETR\nJOIN Editorial_Teams AS ET ON ETR.TeamID = ET.TeamID\nJOIN Roles AS R ON ETR.RoleID = R.RoleID\nGROUP BY ET.TeamID, R.RoleID, R.RoleName\nHAVING COUNT(*) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2222222222222222,
        "f1_score": 0.3636363636363636,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_urban_planners_elements/scope_urban_planners_elements.sqlite",
      "db_dump": "CREATE TABLE Elements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    element_name TEXT\n);\nCREATE TABLE Urban_Planners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE Urban_Planners_Elements (\n    urban_planner_id INTEGER,\n    element_id INTEGER,\n    FOREIGN KEY(urban_planner_id) REFERENCES Urban_Planners(id),\n    FOREIGN KEY(element_id) REFERENCES Elements(id),\n    PRIMARY KEY(urban_planner_id, element_id)\n);\n\nINSERT INTO \"Elements\" (id,element_name) VALUES (1,'Green_Space'),(2,'Transportation_Infrastructure'),(3,'Landscape_Architecture'),(4,'Water_Management'),(5,'Public_Spaces');\nINSERT INTO \"Urban_Planners\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Michael Johnson',5),(4,'Emily Williams',10),(5,'David Brown',8);\nINSERT INTO \"Urban_Planners_Elements\" (urban_planner_id,element_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "Tell me the elements each planner uses.",
      "gold_queries": [
        "SELECT Elements.element_name  from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id   GROUP BY Urban_Planners_Elements.element_id HAVING COUNT(DISTINCT Urban_Planners_Elements.urban_planner_id) = (SELECT COUNT(*) FROM  Urban_Planners)",
        "select urban_planners.name , elements.element_name from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Enumerate the elements and the planners who are associated with them",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.element_name, U.name \nFROM Urban_Planners_Elements AS UPE \nJOIN Elements AS E ON UPE.element_id = E.id \nJOIN Urban_Planners AS U ON UPE.urban_planner_id = U.id"
          ]
        },
        {
          "interpretation": "Output the element_id and corresponding planner names",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.element_id, T3.name FROM Urban_Planners_Elements AS T2 JOIN Urban_Planners AS T3 ON T2.urban_planner_id = T3.id"
          ]
        },
        {
          "interpretation": "Provide a mapping of planners to their element IDs",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT urban_planner_id, element_id FROM Urban_Planners_Elements"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_urban_planners_elements/scope_urban_planners_elements.sqlite",
      "db_dump": "CREATE TABLE Elements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    element_name TEXT\n);\nCREATE TABLE Urban_Planners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE Urban_Planners_Elements (\n    urban_planner_id INTEGER,\n    element_id INTEGER,\n    FOREIGN KEY(urban_planner_id) REFERENCES Urban_Planners(id),\n    FOREIGN KEY(element_id) REFERENCES Elements(id),\n    PRIMARY KEY(urban_planner_id, element_id)\n);\n\nINSERT INTO \"Elements\" (id,element_name) VALUES (1,'Green_Space'),(2,'Transportation_Infrastructure'),(3,'Landscape_Architecture'),(4,'Water_Management'),(5,'Public_Spaces');\nINSERT INTO \"Urban_Planners\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Michael Johnson',5),(4,'Emily Williams',10),(5,'David Brown',8);\nINSERT INTO \"Urban_Planners_Elements\" (urban_planner_id,element_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What elements do all planners use equally?",
      "gold_queries": [
        "SELECT Elements.element_name  from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id   GROUP BY Urban_Planners_Elements.element_id HAVING COUNT(DISTINCT Urban_Planners_Elements.urban_planner_id) = (SELECT COUNT(*) FROM  Urban_Planners)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Are there elements that all urban planners in the database are associated with?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT element_id\nFROM Urban_Planners_Elements\nGROUP BY element_id\nHAVING COUNT(DISTINCT urban_planner_id) = (SELECT COUNT(*) FROM Urban_Planners)"
          ]
        },
        {
          "interpretation": "Are there elements that every urban planner in the database has knowledge of?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT element_name FROM Elements WHERE id IN (SELECT element_id FROM Urban_Planners_Elements GROUP BY element_id HAVING COUNT(DISTINCT urban_planner_id) = (SELECT COUNT(id) FROM Urban_Planners))"
          ]
        },
        {
          "interpretation": "Do all urban planners in the database have the same elements listed in their expertise?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT (SELECT COUNT(DISTINCT element_id) FROM Urban_Planners_Elements) = (SELECT COUNT(*) FROM Elements) AS all_have_same_elements"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_urban_planners_elements/scope_urban_planners_elements.sqlite",
      "db_dump": "CREATE TABLE Elements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    element_name TEXT\n);\nCREATE TABLE Urban_Planners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE Urban_Planners_Elements (\n    urban_planner_id INTEGER,\n    element_id INTEGER,\n    FOREIGN KEY(urban_planner_id) REFERENCES Urban_Planners(id),\n    FOREIGN KEY(element_id) REFERENCES Elements(id),\n    PRIMARY KEY(urban_planner_id, element_id)\n);\n\nINSERT INTO \"Elements\" (id,element_name) VALUES (1,'Green_Space'),(2,'Transportation_Infrastructure'),(3,'Landscape_Architecture'),(4,'Water_Management'),(5,'Public_Spaces');\nINSERT INTO \"Urban_Planners\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Michael Johnson',5),(4,'Emily Williams',10),(5,'David Brown',8);\nINSERT INTO \"Urban_Planners_Elements\" (urban_planner_id,element_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every planner, list the elements used.",
      "gold_queries": [
        "select urban_planners.name , elements.element_name from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the elements each Urban Planner is involved with.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT U.name, E.element_name\nFROM Urban_Planners U\nJOIN Urban_Planners_Elements UPE ON U.id = UPE.urban_planner_id\nJOIN Elements E ON E.id = UPE.element_id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_editorial_teams_roles/scope_editorial_teams_roles.sqlite",
      "db_dump": "CREATE TABLE Editorial_Teams(\n    TeamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TeamName TEXT,\n    TeamDescription TEXT\n);\nCREATE TABLE Editorial_Teams_Roles(\n    TeamID INTEGER,\n    RoleID INTEGER,\n    FOREIGN KEY(TeamID) REFERENCES Editorial_Teams(TeamID),\n    FOREIGN KEY(RoleID) REFERENCES Roles(RoleID),\n    PRIMARY KEY(TeamID, RoleID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoleName TEXT\n);\n\nINSERT INTO \"Editorial_Teams\" (TeamID,TeamName,TeamDescription) VALUES (1,'Team1','A team focused on sports journalism.'),(2,'Team2','Specializes in political news coverage.'),(3,'Team3','Focuses on technology and innovation articles.'),(4,'Team4','Covering arts, culture, and entertainment stories.'),(5,'Team5','Dedicated to investigative reporting.');\nINSERT INTO \"Editorial_Teams_Roles\" (TeamID,RoleID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Copy_Editor'),(2,'Reporter'),(3,'Photographer'),(4,'Designer'),(5,'Web Developer');\n",
      "question": "For each editorial team, what is the corresponding role?",
      "gold_queries": [
        "select editorial_teams.teamname , roles.rolename from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each Editorial Team, enumerate the assigned Roles.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ET.TeamName, R.RoleName\nFROM Editorial_Teams ET\nJOIN Editorial_Teams_Roles ETR ON ET.TeamID = ETR.TeamID\nJOIN Roles R ON ETR.RoleID = R.RoleID"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "what markets and descriptions are covered by each real estate reporter?",
      "gold_queries": [
        "SELECT Markets.market_name, Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)",
        "select real_estate_reporters.name , markets.market_name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "each reporter\u2019s market coverage including descriptions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.id, R.name, R.email, M.market_name, M.description\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "coverage of markets and their descriptions by each reporter?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name, M.market_name, M.description\nFROM Real_Estate_Reporters_Markets REM\nJOIN Real_Estate_Reporters R ON REM.reporter_id = R.id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "each reporter\u2019s market coverage details?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Real_Estate_Reporters.name, Markets.market_name \nFROM Real_Estate_Reporters \nJOIN Real_Estate_Reporters_Markets ON Real_Estate_Reporters.id = Real_Estate_Reporters_Markets.reporter_id \nJOIN Markets ON Real_Estate_Reporters_Markets.market_id = Markets.id"
          ]
        },
        {
          "interpretation": "markets and descriptions that reporters are responsible for?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT m.market_name, m.description\nFROM Markets m\nJOIN Real_Estate_Reporters_Markets rem ON m.id = rem.market_id"
          ]
        },
        {
          "interpretation": "market assignments and descriptions for each reporter?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name AS reporter_name, T4.market_name, T4.description\nFROM Real_Estate_Reporters_Markets AS T1\nJOIN Real_Estate_Reporters AS T2 ON T1.reporter_id = T2.id\nJOIN Reporter_Articles AS T3 ON T2.id = T3.reporter_id\nJOIN Markets AS T4 ON T1.market_id = T4.id"
          ]
        },
        {
          "interpretation": "what markets and brief descriptions are covered by every reporter?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.market_name, M.description\nFROM Markets M\nWHERE M.id IN (\n    SELECT REM.market_id\n    FROM Real_Estate_Reporters_Markets REM\n    GROUP BY REM.market_id\n    HAVING COUNT(DISTINCT REM.reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "provide the market name and description that are common to all real estate reporters.",
      "gold_queries": [
        "SELECT Markets.market_name, Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Which market is common across all real estate reporters?",
      "gold_queries": [
        "SELECT Markets.market_name  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Real_Estate_Reporters_markets where the intersection of market_id for all reporters is not empty",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT market_id FROM Real_Estate_Reporters_Markets GROUP BY market_id HAVING COUNT(DISTINCT reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)"
          ]
        },
        {
          "interpretation": "Markets that are listed in every entry of Real_Estate_Reporters_Markets for all reporter_id values",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT market_name FROM Markets WHERE id IN (SELECT market_id FROM Real_Estate_Reporters_Markets GROUP BY market_id HAVING COUNT(DISTINCT reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters))"
          ]
        },
        {
          "interpretation": "Real_Estate_Reporters_markets where all reporter_id values are the same",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT reporter_id, market_id\nFROM Real_Estate_Reporters_Markets\nGROUP BY reporter_id\nHAVING COUNT(DISTINCT reporter_id) = 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each real estate reporters, what are the corresponding market names and descriptions?",
      "gold_queries": [
        "select real_estate_reporters.name , markets.market_name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Real_Estate_Reporters.name, Markets.market_name, Markets.description",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Real_Estate_Reporters.name, Markets.market_name, Markets.description\nFROM Real_Estate_Reporters\nJOIN Real_Estate_Reporters_Markets ON Real_Estate_Reporters.id = Real_Estate_Reporters_Markets.reporter_id\nJOIN Markets ON Real_Estate_Reporters_Markets.market_id = Markets.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What markets are associated with each real estate reporter?",
      "gold_queries": [
        "SELECT Markets.market_name  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)",
        "select real_estate_reporters.name , markets.market_name from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Real_estate_reporters_and_their_markets reporter_id_market_id_combinations",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT reporter_id, market_id FROM Real_Estate_Reporters_Markets"
          ]
        },
        {
          "interpretation": "Real_Estate_Reporters_Markets.reporter_id_list_and_markets",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT reporter_id, market_name \nFROM Real_Estate_Reporters_Markets \nJOIN Markets ON Real_Estate_Reporters_Markets.market_id = Markets.id"
          ]
        },
        {
          "interpretation": "Reporters_and_markets\u4ed6\u4eec\u8986\u76d6\u7684\u5e02\u573a market_coverage_by_reporters",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name \nFROM Real_Estate_Reporters r \nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id \nJOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "Each_reporter_with_their_markets reporters_and_their_corresponding_markets",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.id, R.name, M.market_name\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "Listed_Markets_per_Reporters Markt_ids_per_reporter",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT reporter_id, GROUP_CONCAT(market_id) AS market_ids\nFROM Real_Estate_Reporters_Markets\nGROUP BY reporter_id"
          ]
        },
        {
          "interpretation": "Markets_reported_by_each_reporter reporters_and_their_markets_details",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name, m.description\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "Real_Estate_Reporters.market_id_list",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, GROUP_CONCAT(T2.market_id) AS market_id_list\nFROM Real_Estate_Reporters AS T1\nJOIN Real_Estate_Reporters_Markets AS T2 ON T1.id = T2.reporter_id\nGROUP BY T1.name"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Show me the genre of shows each channel runs.",
      "gold_queries": [
        "SELECT Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)",
        "select television_channels.channel_name , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List genres per TV channel.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.channel_name, T3.genre \nFROM Television_Channels AS T1 \nJOIN Television_Channels_Shows AS T2 ON T1.id = T2.television_channels_id \nJOIN Shows AS T3 ON T2.shows_id = T3.id"
          ]
        },
        {
          "interpretation": "Display the genre for all the shows on a channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.genre FROM Television_Channels_Shows AS T1 JOIN Shows AS T2 ON T1.shows_id = T2.id"
          ]
        },
        {
          "interpretation": "Show which shows' genres are broadcast by each channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TCC.channel_name, TSS.show_title, TSS.genre\nFROM Television_Channels AS TCC\nJOIN Television_Channels_Shows AS TCS ON TCC.id = TCS.television_channels_id\nJOIN Shows AS TSS ON TCS.shows_id = TSS.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each television channel, what is the corresponding show title and genre of shows?",
      "gold_queries": [
        "select television_channels.channel_name , shows.show_title , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each television channel, list all show titles and genres that it broadcasts.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.channel_name, T3.show_title, T3.genre \nFROM Television_Channels AS T1 \nJOIN Television_Channels_Shows AS T2 ON T1.id = T2.television_channels_id \nJOIN Shows AS T3 ON T2.shows_id = T3.id"
          ]
        },
        {
          "interpretation": "For each television channel, present the names and genres of the shows it broadcasts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T3.genre \nFROM Television_Channels_Shows AS T1 \nJOIN Television_Channels AS T2 ON T1.television_channels_id = T2.id \nJOIN Shows AS T3 ON T1.shows_id = T3.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What is the genre of shows that are common to all channels?",
      "gold_queries": [
        "SELECT Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What genres are shared by all television channels?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.genre\nFROM Shows AS T1\nINNER JOIN Television_Channels_Shows AS T2 ON T1.id = T2.shows_id\nGROUP BY T1.genre\nHAVING COUNT(DISTINCT T2.television_channels_id) = (SELECT COUNT(*) FROM Television_Channels)"
          ]
        },
        {
          "interpretation": "What genres are featured on shows present in the intersection of all channels?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.genre\nFROM Shows AS T1\nJOIN Television_Channels_Shows AS T2 ON T1.id = T2.shows_id\nGROUP BY T2.television_channels_id, T1.genre\nHAVING COUNT(DISTINCT T2.television_channels_id) = (SELECT COUNT(*) FROM Television_Channels)"
          ]
        },
        {
          "interpretation": "Is there a uniform genre across all the channels?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT channel_name, genre \nFROM Television_Channels_Shows\nJOIN Television_Channels ON Television_Channels_Shows.television_channels_id = Television_Channels.id\nJOIN Shows ON Television_Channels_Shows.shows_id = Shows.id\nGROUP BY channel_name, genre"
          ]
        },
        {
          "interpretation": "Do all channels have the same genres of shows?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TCS.television_channels_id, S.genre\nFROM Television_Channels_Shows TCS\nJOIN Shows S ON TCS.shows_id = S.id\nGROUP BY TCS.television_channels_id, S.genre\nORDER BY TCS.television_channels_id, S.genre"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What are the show titles and genres common to all television channels?",
      "gold_queries": [
        "SELECT Shows.show_title, Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the titles and genres of shows that are shared by all listed television channels?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT channel_name, show_title \nFROM Television_Channels AS tc \nJOIN Television_Channels_Shows AS tcs ON tc.id = tcs.television_channels_id \nJOIN Shows AS s ON tcs.shows_id = s.id \nWHERE tcs.shows_id IN (\n    SELECT shows_id \n    FROM Television_Channels_Shows \n    GROUP BY shows_id \n    HAVING COUNT(DISTINCT television_channels_id) = (SELECT COUNT(*) FROM Television_Channels)\n)"
          ]
        },
        {
          "interpretation": "What are the show titles and genres that are broadcasted by all television channels?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.show_title, S.genre\nFROM Shows S\nWHERE NOT EXISTS (\n    SELECT TC.id\n    FROM Television_Channels TC\n    LEFT JOIN Television_Channels_Shows TCS ON TC.id = TCS.television_channels_id AND S.id = TCS.shows_id\n    WHERE TCS.shows_id IS NULL\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What shows are associated with each television channel?",
      "gold_queries": [
        "SELECT Shows.show_title  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)",
        "select television_channels.channel_name , shows.show_title from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Shows that are channel-agnostic but paired here?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT s.show_title\nFROM Shows s\nJOIN Television_Channels_Shows tcs ON s.id = tcs.shows_id"
          ]
        },
        {
          "interpretation": "For each channel, what shows are they tied to?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT tcs.television_channels_id, tc.channel_name, tcs.shows_id, s.show_title\nFROM Television_Channels_Shows tcs\nJOIN Television_Channels tc ON tcs.television_channels_id = tc.id\nJOIN Shows s ON tcs.shows_id = s.id"
          ]
        },
        {
          "interpretation": "Television channel-show affiliations elucidated?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.channel_name, T2.show_title\nFROM Television_Channels_Shows T1\nJOIN Shows T2 ON T1.shows_id = T2.id\nJOIN Television_Channels T3 ON T1.television_channels_id = T3.id"
          ]
        },
        {
          "interpretation": "Television channel-show connections?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TCS.television_channels_id, TCS.shows_id\nFROM Television_Channels_Shows TCS"
          ]
        },
        {
          "interpretation": "What shows are broadcast on each television channel?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT tcs.television_channels_id, tc.channel_name, s.show_title \nFROM Television_Channels_Shows tcs \nJOIN Television_Channels tc ON tcs.television_channels_id = tc.id \nJOIN Shows s ON tcs.shows_id = s.id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For every channel, list the genre of shows they run.",
      "gold_queries": [
        "select television_channels.channel_name , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every channel, list the genres of shows they air.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.genre, T1.channel_name \nFROM Television_Channels AS T1 \nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.television_channels_id \nJOIN Shows AS T2 ON T3.shows_id = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What show is common across all television channels?",
      "gold_queries": [
        "SELECT Shows.show_title  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Is there a show that is listed with every channel in the Television_Channels_Shows table?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT show_title FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows GROUP BY shows_id HAVING COUNT(DISTINCT television_channels_id) = (SELECT COUNT(*) FROM Television_Channels))"
          ]
        },
        {
          "interpretation": "Does every channel in the Television_Channels table show the same specific show?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T3.show_title \nFROM Television_Channels_Shows AS T1 \nJOIN Television_Channels AS T2 ON T1.television_channels_id = T2.id \nJOIN Shows AS T3 ON T1.shows_id = T3.id"
          ]
        },
        {
          "interpretation": "Are all channels showing the same show based on the Television_Channels_Shows data?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TCS.television_channels_id, TCS.shows_id\nFROM Television_Channels_Shows TCS\nGROUP BY TCS.television_channels_id\nHAVING COUNT(DISTINCT TCS.shows_id) > 1"
          ]
        },
        {
          "interpretation": "Is there a single show that all channels are airing based on the given data?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT channel_name\nFROM Television_Channels\nWHERE id IN (\n    SELECT television_channels_id\n    FROM Television_Channels_Shows\n    GROUP BY television_channels_id\n    HAVING COUNT(shows_id) = (SELECT COUNT(*) FROM Shows)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each television channel, provide the corresponding show.",
      "gold_queries": [
        "select television_channels.channel_name , shows.show_title from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each television channel, list the broadcasted series.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.show_title\nFROM Shows AS T1\nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.shows_id\nJOIN Television_Channels AS T2 ON T3.television_channels_id = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What are descriptions of markets all real estate reporters equally cover?",
      "gold_queries": [
        "SELECT Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What market descriptions are shared among all real estate reporters?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT description \nFROM Markets \nWHERE id IN (\n    SELECT market_id \n    FROM Real_Estate_Reporters_Markets \n    GROUP BY market_id \n    HAVING COUNT(DISTINCT reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)\n)"
          ]
        },
        {
          "interpretation": "What descriptions of markets are covered by each of the real estate reporters?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name, M.description\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Give me descriptions of markets every real estate reporter covers.",
      "gold_queries": [
        "SELECT Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)",
        "select real_estate_reporters.name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each real estate reporter, list descriptions of markets they cover.",
      "gold_queries": [
        "select real_estate_reporters.name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each real estate reporter, list the market names and ids of markets they cover in a single row per reporter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.id, R.name, GROUP_CONCAT(M.market_name, ', ') AS market_names, GROUP_CONCAT(RM.market_id, ', ') AS market_ids\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets RM ON R.id = RM.reporter_id\nJOIN Markets M ON RM.market_id = M.id\nGROUP BY R.id, R.name"
          ]
        },
        {
          "interpretation": "For each real estate reporter, list the market details (name, description) of markets they cover.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name, m.description\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "For each real estate reporter, list the descriptions and names of markets they cover.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT RER.name, M.description\nFROM Real_Estate_Reporters RER\nJOIN Real_Estate_Reporters_Markets REM ON RER.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "For each real estate reporter, list the market categories (e.g., new developments, renovations) they cover.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "For each real estate reporter, list the market ids of markets they cover.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT reporter_id, market_id FROM Real_Estate_Reporters_Markets"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each real estate reporter, provide the corresponding markets?",
      "gold_queries": [
        "select real_estate_reporters.name , markets.market_name from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the markets for every reporter?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT r.name, m.market_name FROM Real_Estate_Reporters r JOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id JOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "Provide the market details for each reporter?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.market_name, T2.description, T1.name \nFROM Real_Estate_Reporters AS T1 \nJOIN Real_Estate_Reporters_Markets AS T3 ON T1.id = T3.reporter_id \nJOIN Markets AS T2 ON T3.market_id = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What show title and genre of shows are available for each television channel?",
      "gold_queries": [
        "SELECT Shows.show_title, Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)",
        "select television_channels.channel_name , shows.show_title , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each television channel, detail the shows by title and genre.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.show_title, T1.genre\nFROM Shows AS T1\nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.shows_id\nJOIN Television_Channels AS T2 ON T3.television_channels_id = T2.id\nORDER BY T2.channel_name, T1.show_title"
          ]
        },
        {
          "interpretation": "Which television channels have shows from each genre?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.channel_name, T3.genre\nFROM Television_Channels_Shows AS T1\nJOIN Television_Channels AS T2 ON T1.television_channels_id = T2.id\nJOIN Shows AS T3 ON T1.shows_id = T3.id"
          ]
        },
        {
          "interpretation": "Which genre shows and their titles are common to each channel?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.genre, T3.channel_name\nFROM Television_Channels_Shows AS T1\nJOIN Shows AS T2 ON T1.shows_id = T2.id\nJOIN Television_Channels AS T3 ON T1.television_channels_id = T3.id\nGROUP BY T3.channel_name, T2.genre\nHAVING COUNT(*) = (SELECT COUNT(*) FROM Television_Channels)"
          ]
        },
        {
          "interpretation": "List the show titles and genres for shows available on each channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.show_title, T1.channel_name \nFROM Television_Channels_Shows AS TCS \nJOIN Television_Channels AS T1 ON TCS.television_channels_id = T1.id \nJOIN Shows AS T2 ON TCS.shows_id = T2.id"
          ]
        },
        {
          "interpretation": "What combination of show titles and genres can be found on each channel?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TCS.television_channels_id, T2.channel_name, T1.show_title, T1.genre\nFROM Television_Channels_Shows AS TCS\nJOIN Television_Channels AS T2 ON TCS.television_channels_id = T2.id\nJOIN Shows AS T1 ON TCS.shows_id = T1.id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_field_trips_stops/scope_field_trips_stops.sqlite",
      "db_dump": "CREATE TABLE Field_Trips(\n    tripID INTEGER PRIMARY KEY,\n    fieldTripName TEXT,\n    date DATE);\nCREATE TABLE Field_Trips_Stops(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    stopID INTEGER REFERENCES Stops(stopID));\nCREATE TABLE Field_Trips_Students(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    studentID INTEGER REFERENCES Students(studentID));\nCREATE TABLE Field_Trips_Teachers(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    teacherID INTEGER REFERENCES Teachers(teacherID));\nCREATE TABLE Stops(\n    stopID INTEGER PRIMARY KEY,\n    stopLocation TEXT);\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Teachers(\n    teacherID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"Field_Trips\" (tripID,fieldTripName,date) VALUES (1,'Educational Trip','2021-09-01'),(2,'Scientific Excursion','2021-08-30'),(3,'Nature Adventure','2021-07-25'),(4,'Historical Tour','2021-06-10'),(5,'Art Exhibition','2021-05-01');\nINSERT INTO \"Field_Trips_Stops\" (tripID,stopID) VALUES (1,1),(1,2),(5,5),(3,3),(4,4),(2,2),(3,2),(4,2),(5,2);\nINSERT INTO \"Field_Trips_Students\" (tripID,studentID) VALUES (1,1),(1,2),(2,3),(2,4),(3,5);\nINSERT INTO \"Field_Trips_Teachers\" (tripID,teacherID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Stops\" (stopID,stopLocation) VALUES (1,'Zoo'),(2,'Museum'),(3,'Botanical Garden'),(4,'Planetarium'),(5,'National Park');\nINSERT INTO \"Students\" (studentID,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Alice','Brown'),(4,'Tom','Johnson'),(5,'Emma','Wilson');\nINSERT INTO \"Teachers\" (teacherID,firstName,lastName) VALUES (1,'Mr.','White'),(2,'Ms.','Black'),(3,'Dr.','Green'),(4,'Professor','Blue'),(5,'Assistant','Red');\n",
      "question": "What stops were visited during each field trip?",
      "gold_queries": [
        "SELECT Stops.stopLocation  from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID   GROUP BY Field_Trips_Stops.stopID HAVING COUNT(DISTINCT Field_Trips_Stops.tripID) = (SELECT COUNT(*) FROM  Field_Trips)",
        "select field_trips.fieldtripname , stops.stoplocation from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each field trip, enumerate the stops visited.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ft.fieldTripName, s.stopLocation\nFROM Field_Trips ft\nJOIN Field_Trips_Stops fts ON ft.tripID = fts.tripID\nJOIN Stops s ON fts.stopID = s.stopID\nORDER BY ft.fieldTripName, s.stopLocation"
          ]
        },
        {
          "interpretation": "Stops visited on a per-trip basis?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT tripID, stopLocation\nFROM Field_Trips_Stops\nJOIN Stops ON Field_Trips_Stops.stopID = Stops.stopID"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_field_trips_stops/scope_field_trips_stops.sqlite",
      "db_dump": "CREATE TABLE Field_Trips(\n    tripID INTEGER PRIMARY KEY,\n    fieldTripName TEXT,\n    date DATE);\nCREATE TABLE Field_Trips_Stops(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    stopID INTEGER REFERENCES Stops(stopID));\nCREATE TABLE Field_Trips_Students(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    studentID INTEGER REFERENCES Students(studentID));\nCREATE TABLE Field_Trips_Teachers(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    teacherID INTEGER REFERENCES Teachers(teacherID));\nCREATE TABLE Stops(\n    stopID INTEGER PRIMARY KEY,\n    stopLocation TEXT);\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Teachers(\n    teacherID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"Field_Trips\" (tripID,fieldTripName,date) VALUES (1,'Educational Trip','2021-09-01'),(2,'Scientific Excursion','2021-08-30'),(3,'Nature Adventure','2021-07-25'),(4,'Historical Tour','2021-06-10'),(5,'Art Exhibition','2021-05-01');\nINSERT INTO \"Field_Trips_Stops\" (tripID,stopID) VALUES (1,1),(1,2),(5,5),(3,3),(4,4),(2,2),(3,2),(4,2),(5,2);\nINSERT INTO \"Field_Trips_Students\" (tripID,studentID) VALUES (1,1),(1,2),(2,3),(2,4),(3,5);\nINSERT INTO \"Field_Trips_Teachers\" (tripID,teacherID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Stops\" (stopID,stopLocation) VALUES (1,'Zoo'),(2,'Museum'),(3,'Botanical Garden'),(4,'Planetarium'),(5,'National Park');\nINSERT INTO \"Students\" (studentID,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Alice','Brown'),(4,'Tom','Johnson'),(5,'Emma','Wilson');\nINSERT INTO \"Teachers\" (teacherID,firstName,lastName) VALUES (1,'Mr.','White'),(2,'Ms.','Black'),(3,'Dr.','Green'),(4,'Professor','Blue'),(5,'Assistant','Red');\n",
      "question": "For every field trip, provide the corresponding stop locations.",
      "gold_queries": [
        "select field_trips.fieldtripname , stops.stoplocation from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Education/scope_field_trips_stops/scope_field_trips_stops.sqlite",
      "db_dump": "CREATE TABLE Field_Trips(\n    tripID INTEGER PRIMARY KEY,\n    fieldTripName TEXT,\n    date DATE);\nCREATE TABLE Field_Trips_Stops(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    stopID INTEGER REFERENCES Stops(stopID));\nCREATE TABLE Field_Trips_Students(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    studentID INTEGER REFERENCES Students(studentID));\nCREATE TABLE Field_Trips_Teachers(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    teacherID INTEGER REFERENCES Teachers(teacherID));\nCREATE TABLE Stops(\n    stopID INTEGER PRIMARY KEY,\n    stopLocation TEXT);\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Teachers(\n    teacherID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"Field_Trips\" (tripID,fieldTripName,date) VALUES (1,'Educational Trip','2021-09-01'),(2,'Scientific Excursion','2021-08-30'),(3,'Nature Adventure','2021-07-25'),(4,'Historical Tour','2021-06-10'),(5,'Art Exhibition','2021-05-01');\nINSERT INTO \"Field_Trips_Stops\" (tripID,stopID) VALUES (1,1),(1,2),(5,5),(3,3),(4,4),(2,2),(3,2),(4,2),(5,2);\nINSERT INTO \"Field_Trips_Students\" (tripID,studentID) VALUES (1,1),(1,2),(2,3),(2,4),(3,5);\nINSERT INTO \"Field_Trips_Teachers\" (tripID,teacherID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Stops\" (stopID,stopLocation) VALUES (1,'Zoo'),(2,'Museum'),(3,'Botanical Garden'),(4,'Planetarium'),(5,'National Park');\nINSERT INTO \"Students\" (studentID,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Alice','Brown'),(4,'Tom','Johnson'),(5,'Emma','Wilson');\nINSERT INTO \"Teachers\" (teacherID,firstName,lastName) VALUES (1,'Mr.','White'),(2,'Ms.','Black'),(3,'Dr.','Green'),(4,'Professor','Blue'),(5,'Assistant','Red');\n",
      "question": "Show me the stop location that is common for all field trips.",
      "gold_queries": [
        "SELECT Stops.stopLocation  from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID   GROUP BY Field_Trips_Stops.stopID HAVING COUNT(DISTINCT Field_Trips_Stops.tripID) = (SELECT COUNT(*) FROM  Field_Trips)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the stop location that is found on every field trip.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT stopLocation FROM Stops WHERE stopID IN (SELECT stopID FROM Field_Trips_Stops GROUP BY stopID HAVING COUNT(*) = (SELECT COUNT(*) FROM Field_Trips))"
          ]
        },
        {
          "interpretation": "Show me the stop location that each trip includes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.fieldTripName, T3.stopLocation \nFROM Field_Trips AS T1 \nJOIN Field_Trips_Stops AS T2 ON T1.tripID = T2.tripID \nJOIN Stops AS T3 ON T2.stopID = T3.stopID"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "For every college campus list all of the associated building descriptions.",
      "gold_queries": [
        "select college_campuses.name , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each college campus, present descriptions of its associated structures.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.name, T3.description FROM College_Campuses AS T1 JOIN College_Campuses_Buildings AS T2 ON T1.id = T2.campusId JOIN Buildings AS T3 ON T2.buildingId = T3.id"
          ]
        },
        {
          "interpretation": "For every college campus, describe the buildings that are connected to it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, B.type, B.description\nFROM College_Campuses_Buildings AS CCB\nJOIN College_Campuses AS CC ON CCB.campusId = CC.id\nJOIN Buildings AS B ON CCB.buildingId = B.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Give me the types of building that every college campus has and their descriptions.",
      "gold_queries": [
        "SELECT Buildings.type, Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)",
        "select college_campuses.name , buildings.type , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Give an overview of the types of buildings and their descriptions present on each college campus.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT College_Campuses.name, Buildings.type, Buildings.description\nFROM College_Campuses_Buildings\nJOIN College_Campuses ON College_Campuses_Buildings.campusId = College_Campuses.id\nJOIN Buildings ON College_Campuses_Buildings.buildingId = Buildings.id"
          ]
        },
        {
          "interpretation": "Provide a comprehensive list of building types and descriptions for every college campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.type, B.description \nFROM Buildings B"
          ]
        },
        {
          "interpretation": "List the buildings on each college campus by type and description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CCB.campusId, B.type, B.description\nFROM College_Campuses_Buildings CCB\nJOIN Buildings B ON CCB.buildingId = B.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "List the building description for every college campus.",
      "gold_queries": [
        "SELECT Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)",
        "select college_campuses.name , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the building descriptions of each campus.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.name, B.description\nFROM College_Campuses C\nJOIN College_Campuses_Buildings CCB ON C.id = CCB.campusId\nJOIN Buildings B ON CCB.buildingId = B.id"
          ]
        },
        {
          "interpretation": "List the descriptions of all buildings for every college campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.description FROM College_Campuses_Buildings AS T1 JOIN Buildings AS T2 ON T1.buildingId = T2.id"
          ]
        },
        {
          "interpretation": "List the building descriptions for all college campuses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Buildings"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "List the building descriptions that appear against every unique college campus at least once.",
      "gold_queries": [
        "SELECT Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the building descriptions for unique campus entries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT B.description\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId"
          ]
        },
        {
          "interpretation": "List the building description entries for each college.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cc.name, b.description\nFROM College_Campuses cc\nJOIN College_Campuses_Buildings ccb ON cc.id = ccb.campusId\nJOIN Buildings b ON ccb.buildingId = b.id"
          ]
        },
        {
          "interpretation": "List the descriptions of buildings associated with each unique college campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.description\nFROM College_Campuses_Buildings AS T1\nJOIN Buildings AS T2 ON T1.buildingId = T2.id\nGROUP BY T1.campusId, T2.description"
          ]
        },
        {
          "interpretation": "List the college campus building descriptions without repetition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description FROM Buildings"
          ]
        },
        {
          "interpretation": "List the building details including descriptions for all campus-building associations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Buildings.id, Buildings.type, Buildings.description\nFROM College_Campuses_Buildings\nJOIN Buildings ON College_Campuses_Buildings.buildingId = Buildings.id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "For every college campus, show the types of building they have and their descriptions.",
      "gold_queries": [
        "select college_campuses.name , buildings.type , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every campus, list the types and descriptions of buildings present.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT c.name, b.type, b.description \nFROM College_Campuses c \nJOIN College_Campuses_Buildings ccb ON c.id = ccb.campusId \nJOIN Buildings b ON ccb.buildingId = b.id"
          ]
        },
        {
          "interpretation": "For each university location, show the building types and what they consist of.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.location, B.type, B.description\nFROM College_Campuses CC\nJOIN College_Campuses_Buildings CCB ON CC.id = CCB.campusId\nJOIN Buildings B ON CCB.buildingId = B.id\nORDER BY CC.location, B.type"
          ]
        },
        {
          "interpretation": "Display a list of all buildings including types and descriptions for each campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.type, T2.description FROM College_Campuses_Buildings AS T1 JOIN Buildings AS T2 ON T1.buildingId = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Which types of building do all college campuses have in common and what are their descriptions?",
      "gold_queries": [
        "SELECT Buildings.type, Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which buildings are specified to be on every college campus and what are their detailed descriptions?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type, description FROM Buildings WHERE id IN (SELECT buildingId FROM College_Campuses_Buildings GROUP BY buildingId HAVING COUNT(*) = (SELECT COUNT(*) FROM College_Campuses))"
          ]
        },
        {
          "interpretation": "List the identical building types across all campuses and their descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, description FROM Buildings GROUP BY type, description HAVING COUNT(type) > 1"
          ]
        },
        {
          "interpretation": "Which specific buildings are found on all the college campuses and what do they look like in terms of description?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT b.description \nFROM Buildings b \nJOIN College_Campuses_Buildings ccblg ON b.id = ccblg.buildingId \nGROUP BY b.id \nHAVING COUNT(DISTINCT ccblg.campusId) = (SELECT COUNT(*) FROM College_Campuses)"
          ]
        },
        {
          "interpretation": "Identify the buildings that must be present on each college campus and their detailed descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, description FROM Buildings WHERE id IN (SELECT DISTINCT buildingId FROM College_Campuses_Buildings)"
          ]
        },
        {
          "interpretation": "Determine the canonical set of buildings that all college campuses must have and their descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type, description FROM Buildings"
          ]
        },
        {
          "interpretation": "What is the set of buildings that exist on each college campus and what are these buildings' descriptions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name AS college_campus, T1.type AS building, T1.description\nFROM Buildings T1\nJOIN College_Campuses_Buildings T3 ON T1.id = T3.buildingId\nJOIN College_Campuses T2 ON T3.campusId = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Show me a list of buildings that are available at each specific campus",
      "gold_queries": [
        "select college_campuses.name , buildings.type from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show a detailed list of buildings for each campus name distinctly",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.name AS campus_name, B.type AS building_type, B.description AS building_description\nFROM College_Campuses_Buildings AS CC_B\nJOIN College_Campuses AS C ON CC_B.campusId = C.id\nJOIN Buildings AS B ON CC_B.buildingId = B.id"
          ]
        },
        {
          "interpretation": "Show the buildings available at different campuses separately",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT campusId, GROUP_CONCAT(buildingId) AS buildings\nFROM College_Campuses_Buildings\nGROUP BY campusId"
          ]
        },
        {
          "interpretation": "List buildings for each campus name clearly",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT CC.name AS campus_name, B.type AS building_type\nFROM College_Campuses_Buildings AS CCB\nJOIN College_Campuses AS CC ON CCB.campusId = CC.id\nJOIN Buildings AS B ON CCB.buildingId = B.id"
          ]
        },
        {
          "interpretation": "Show a list of buildings at each campus name",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.name, B.description \nFROM College_Campuses AS C \nJOIN College_Campuses_Buildings AS CCB ON C.id = CCB.campusId \nJOIN Buildings AS B ON CCB.buildingId = B.id"
          ]
        },
        {
          "interpretation": "Provide a list of buildings for each campus distinctly",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T3.campusId, T2.type \nFROM College_Campuses_Buildings AS T3 \nJOIN Buildings AS T2 ON T3.buildingId = T2.id"
          ]
        },
        {
          "interpretation": "List the buildings that exist at every particular campus",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT B.type \nFROM Buildings B \nINNER JOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId \nGROUP BY B.type \nHAVING COUNT(DISTINCT CCB.campusId) = (SELECT COUNT(*) FROM College_Campuses)"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Show me a list of buildings that are used at multiple of our campuses",
      "gold_queries": [
        "SELECT Buildings.type  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me a list of buildings that have more than one row in the College_Campuses_Buildings table for the same buildingId",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.id, B.type, B.description\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nGROUP BY B.id, B.type, B.description\nHAVING COUNT(CCB.campusId) > 1"
          ]
        },
        {
          "interpretation": "Show me a list of buildings that are listed in the College_Campuses_Buildings table for more than one campusId",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT buildingId \nFROM College_Campuses_Buildings \nGROUP BY buildingId \nHAVING COUNT(DISTINCT campusId) > 1"
          ]
        },
        {
          "interpretation": "Show me a list of buildings that have their id repeated in the College_Campuses_Buildings table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.description\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nGROUP BY B.id\nHAVING COUNT(*) > 1"
          ]
        },
        {
          "interpretation": "Show me a list of buildings that are shared between at least two different campuses",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT B.type\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nGROUP BY B.id\nHAVING COUNT(DISTINCT CCB.campusId) >= 2"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Give a list of buildings at our campuses",
      "gold_queries": [
        "SELECT Buildings.type  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)",
        "select college_campuses.name , buildings.type from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the buildings related to one or more college campuses",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description FROM Buildings"
          ]
        },
        {
          "interpretation": "Show the total number of unique buildings across all campus associations",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT buildingId) FROM College_Campuses_Buildings"
          ]
        },
        {
          "interpretation": "List all buildings associated with any campus",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type, description FROM Buildings"
          ]
        },
        {
          "interpretation": "Show all structures that are part of one or more campus",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT b.type, b.description \nFROM Buildings b \nJOIN College_Campuses_Buildings ccb ON b.id = ccb.buildingId"
          ]
        },
        {
          "interpretation": "Display all buildings that are part of a campus relationship",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.type, B.description\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId"
          ]
        },
        {
          "interpretation": "Show all building records that have a corresponding campus entry",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.* FROM Buildings B JOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId"
          ]
        },
        {
          "interpretation": "Retrieve all buildings that have corresponding entries in the College_Campuses_Buildings table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT B.* FROM Buildings B JOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId"
          ]
        },
        {
          "interpretation": "List the entirety of buildings that are paired with a campus",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.id, B.type, B.description, CCB.campusId\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId"
          ]
        },
        {
          "interpretation": "List all buildings in the College_Campuses_Buildings table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT buildingId FROM College_Campuses_Buildings"
          ]
        },
        {
          "interpretation": "List all distinct buildings that are related to any campus",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Buildings"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What description of events is associated with each festival?",
      "gold_queries": [
        "SELECT Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)",
        "select festivals.name , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Give me the descriptions of the events that are connected to each festival.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.Description \nFROM Festivals \nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID \nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Which events' descriptions are related to each festival?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventName, Events.Description\nFROM Festivals_Events\nJOIN Festivals ON Festivals_Events.FestivalID = Festivals.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "List the event descriptions for all festivals.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Description FROM Events"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the name and description of the events that every festival has",
      "gold_queries": [
        "SELECT Events.EventName, Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)",
        "select festivals.name , events.eventname , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What events can I see at each festival?",
      "gold_queries": [
        "SELECT Events.EventName  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)",
        "select festivals.name , events.eventname from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which events are featured in each festival?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, E.EventName\nFROM Festivals_Events FE\nJOIN Festivals F ON FE.FestivalID = F.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Please show me the events that all festivals have in common.",
      "gold_queries": [
        "SELECT Events.EventName  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What description of events is common across all festivals?",
      "gold_queries": [
        "SELECT Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What descriptions of events are included in each of the festivals?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, E.Description\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        },
        {
          "interpretation": "What descriptions of events are consistent across all the festivals?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT E.Description \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nGROUP BY E.Description \nHAVING COUNT(DISTINCT FE.FestivalID) = (SELECT COUNT(*) FROM Festivals)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the festivals and the corresponding events.",
      "gold_queries": [
        "select festivals.name , events.eventname from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the festivals and the event names they include.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventName\nFROM Festivals_Events\nJOIN Festivals ON Festivals_Events.FestivalID = Festivals.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "List the festivals and the event IDs they offer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Festivals_Events.EventTypeID FROM Festivals JOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID"
          ]
        },
        {
          "interpretation": "List the festivals and their corresponding event details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventName, Events.Description\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Show me the festivals and the event IDs they feature.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.FestivalID, FE.EventTypeID \nFROM Festivals F \nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID"
          ]
        },
        {
          "interpretation": "Show me the festival ID and the events associated with each.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FestivalID, EventName \nFROM Festivals_Events \nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Display the festivals' names and the detailed event descriptions they have.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, E.Description\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        },
        {
          "interpretation": "Show me the festival locations and the events associated with each.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Location, E.EventName \nFROM Festivals F \nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID \nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For all festivals, show me the name and description of the events the festival holds",
      "gold_queries": [
        "select festivals.name , events.eventname , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve Festivals' Names And Related Events' Descriptions By Joins",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.Description \nFROM Festivals \nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID \nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Fetch Name And Description For Each Festival And Its Corresponding Events",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, F.Location, E.EventName, E.Description\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the name and description of the events common to every festival",
      "gold_queries": [
        "SELECT Events.EventName, Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the event name and description for events that are common to all festivals",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT E.EventName, E.Description\nFROM Events E\nWHERE NOT EXISTS (\n    SELECT F.FestivalID\n    FROM Festivals F\n    WHERE NOT EXISTS (\n        SELECT FE.FestivalID\n        FROM Festivals_Events FE\n        WHERE FE.FestivalID = F.FestivalID AND FE.EventTypeID = E.EventTypeID\n    )\n)"
          ]
        },
        {
          "interpretation": "Show me the details of events that occur at each and every festival",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Description, F.Name AS FestivalName, F.Location\nFROM Events E\nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID\nJOIN Festivals F ON FE.FestivalID = F.FestivalID"
          ]
        },
        {
          "interpretation": "Show the event details for events that are consistent across all festivals",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.EventTypeID, e.EventName, e.Description\nFROM Events e\nWHERE e.EventTypeID IN (\n    SELECT fe.EventTypeID\n    FROM Festivals_Events fe\n    GROUP BY fe.EventTypeID\n    HAVING COUNT(DISTINCT fe.FestivalID) = (SELECT COUNT(*) FROM Festivals)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For each festival, provide the corresponding description of events.",
      "gold_queries": [
        "select festivals.name , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each festival, give the specific descriptions of the events.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.Description \nFROM Festivals \nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID \nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Detail the specific event descriptions for each festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, E.EventName, E.Description\nFROM Festivals_Events FE\nJOIN Festivals F ON FE.FestivalID = F.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        },
        {
          "interpretation": "Detail the events and their descriptions for all festivals.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, Description FROM Events"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
      "db_dump": "CREATE TABLE Collections (\n    collection_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    collection_name TEXT\n);\nCREATE TABLE Libraries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    phone_number TEXT\n);\nCREATE TABLE Libraries_Collections (\n    library_id INTEGER,\n    collection_id INTEGER,\n    FOREIGN KEY(library_id) REFERENCES Libraries(id),\n    FOREIGN KEY(collection_id) REFERENCES Collections(collection_id)\n);\n\nINSERT INTO \"Collections\" (collection_id,collection_name) VALUES (1,'Children''s Books'),(2,'Young Adult'),(3,'Non-Fiction'),(4,'Biography'),(5,'History');\nINSERT INTO \"Libraries\" (id,name,address,phone_number) VALUES (1,'Library A','123 Main St.','555-1234'),(2,'Library B','456 Elm St.','555-5678'),(3,'Library C','789 Oak St.','555-9012'),(4,'Library D','321 Pine St.','555-1357'),(5,'Library E','654 Fir St.','555-1415');\nINSERT INTO \"Libraries_Collections\" (library_id,collection_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\n",
      "question": "Give me the collections corresponding to each library?",
      "gold_queries": [
        "SELECT Collections.collection_name  from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id   GROUP BY Libraries_Collections.collection_id HAVING COUNT(DISTINCT Libraries_Collections.library_id) = (SELECT COUNT(*) FROM  Libraries)",
        "select libraries.name , collections.collection_name from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Produce library-collections mapping",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name AS library_name, C.collection_name\nFROM Libraries_Collections AS LC\nJOIN Libraries AS L ON LC.library_id = L.id\nJOIN Collections AS C ON LC.collection_id = C.collection_id"
          ]
        },
        {
          "interpretation": "Display library-related collections",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.collection_name\nFROM Collections c\nJOIN Libraries_Collections lc ON c.collection_id = lc.collection_id"
          ]
        },
        {
          "interpretation": "Retrieve library-collection pairs",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT library_id, collection_id FROM Libraries_Collections"
          ]
        },
        {
          "interpretation": "Display collections found in all libraries",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.collection_name\nFROM Collections c\nWHERE c.collection_id NOT IN (\n    SELECT lc.collection_id\n    FROM Libraries_Collections lc\n    GROUP BY lc.collection_id\n    HAVING COUNT(DISTINCT lc.library_id) < (SELECT COUNT(*) FROM Libraries)\n)"
          ]
        },
        {
          "interpretation": "Retrieve collections linked to every library",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT collection_name FROM Collections WHERE collection_id IN (SELECT DISTINCT collection_id FROM Libraries_Collections)"
          ]
        },
        {
          "interpretation": "Provide collections connected to every library",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.collection_name\nFROM Collections c\nWHERE c.collection_id IN (\n    SELECT lc.collection_id\n    FROM Libraries_Collections lc\n    GROUP BY lc.collection_id\n    HAVING COUNT(DISTINCT lc.library_id) = (SELECT COUNT(*) FROM Libraries)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
      "db_dump": "CREATE TABLE Collections (\n    collection_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    collection_name TEXT\n);\nCREATE TABLE Libraries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    phone_number TEXT\n);\nCREATE TABLE Libraries_Collections (\n    library_id INTEGER,\n    collection_id INTEGER,\n    FOREIGN KEY(library_id) REFERENCES Libraries(id),\n    FOREIGN KEY(collection_id) REFERENCES Collections(collection_id)\n);\n\nINSERT INTO \"Collections\" (collection_id,collection_name) VALUES (1,'Children''s Books'),(2,'Young Adult'),(3,'Non-Fiction'),(4,'Biography'),(5,'History');\nINSERT INTO \"Libraries\" (id,name,address,phone_number) VALUES (1,'Library A','123 Main St.','555-1234'),(2,'Library B','456 Elm St.','555-5678'),(3,'Library C','789 Oak St.','555-9012'),(4,'Library D','321 Pine St.','555-1357'),(5,'Library E','654 Fir St.','555-1415');\nINSERT INTO \"Libraries_Collections\" (library_id,collection_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\n",
      "question": "For each library, please show me the corresponding collections.",
      "gold_queries": [
        "select libraries.name , collections.collection_name from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each library, exhibit the matching collections.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT L.name AS Library, C.collection_name AS Collection\nFROM Libraries L\nJOIN Libraries_Collections LC ON L.id = LC.library_id\nJOIN Collections C ON LC.collection_id = C.collection_id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
      "db_dump": "CREATE TABLE Collections (\n    collection_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    collection_name TEXT\n);\nCREATE TABLE Libraries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    phone_number TEXT\n);\nCREATE TABLE Libraries_Collections (\n    library_id INTEGER,\n    collection_id INTEGER,\n    FOREIGN KEY(library_id) REFERENCES Libraries(id),\n    FOREIGN KEY(collection_id) REFERENCES Collections(collection_id)\n);\n\nINSERT INTO \"Collections\" (collection_id,collection_name) VALUES (1,'Children''s Books'),(2,'Young Adult'),(3,'Non-Fiction'),(4,'Biography'),(5,'History');\nINSERT INTO \"Libraries\" (id,name,address,phone_number) VALUES (1,'Library A','123 Main St.','555-1234'),(2,'Library B','456 Elm St.','555-5678'),(3,'Library C','789 Oak St.','555-9012'),(4,'Library D','321 Pine St.','555-1357'),(5,'Library E','654 Fir St.','555-1415');\nINSERT INTO \"Libraries_Collections\" (library_id,collection_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\n",
      "question": "Show me the collection that is in common for all libraries.",
      "gold_queries": [
        "SELECT Collections.collection_name  from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id   GROUP BY Libraries_Collections.collection_id HAVING COUNT(DISTINCT Libraries_Collections.library_id) = (SELECT COUNT(*) FROM  Libraries)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the collection names that are available in all libraries without any duplicates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT collection_name \nFROM Collections"
          ]
        },
        {
          "interpretation": "Present the collection names which are ubiquitous in all libraries.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.collection_name\nFROM Collections C\nWHERE NOT EXISTS (\n    SELECT L.id\n    FROM Libraries L\n    WHERE NOT EXISTS (\n        SELECT LC.collection_id\n        FROM Libraries_Collections LC\n        WHERE LC.library_id = L.id AND LC.collection_id = C.collection_id\n    )\n)"
          ]
        },
        {
          "interpretation": "Show me the collection details that are part of every single library.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.collection_id, C.collection_name\nFROM Collections C\nWHERE C.collection_id IN (\n    SELECT LC.collection_id\n    FROM Libraries_Collections LC\n    GROUP BY LC.collection_id\n    HAVING COUNT(DISTINCT LC.library_id) = (SELECT COUNT(*) FROM Libraries)\n)"
          ]
        },
        {
          "interpretation": "Show me the specific collection ID that is common to every library.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT collection_id\nFROM Libraries_Collections\nGROUP BY collection_id\nHAVING COUNT(DISTINCT library_id) = (SELECT COUNT(*) FROM Libraries)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "List the wines produced across the vineyards.",
      "gold_queries": [
        "select vineyards.name , wines.name from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the names of wines produced in each vineyard.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, W.name AS WineName\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "List the years when each wine has been produced across all vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT wineId, yearProduced FROM Vineyards_Wines GROUP BY wineId, yearProduced"
          ]
        },
        {
          "interpretation": "List the wines produced in each of the regions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.regionName, W.name\nFROM Regions R\nJOIN Vineyards V ON R.regionId = V.regionId\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "List the distinct wines produced across all vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT name FROM Wines"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "What name and variety of wine do we have at every vineyard?",
      "gold_queries": [
        "SELECT Wines.name, Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)",
        "select vineyards.name , wines.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each vineyard, list the wine name and wine variety.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.name, W.variety\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "What specific wines are grown at each vineyard location?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, W.name AS WineName\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "What is the wine type and variety at every vineyard?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, WT.typeName AS WineType, W.variety AS WineVariety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN VineyardTypes WT ON V.typeId = WT.id"
          ]
        },
        {
          "interpretation": "Retrieve the wine names and varieties produced at every vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Wines.name, Wines.variety\nFROM Vineyards_Wines\nJOIN Wines ON Vineyards_Wines.wineId = Wines.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "For each vineyard, show the variety and names of the wines they produce",
      "gold_queries": [
        "select vineyards.name , wines.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard, with additional details on the vineyard's type",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, W.name AS WineName, W.variety AS WineVariety, VT.typeName AS VineyardType\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN VineyardTypes VT ON V.typeId = VT.id"
          ]
        },
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard, including those not yet produced",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT V.name, W.variety, W.name\nFROM Vineyards V\nLEFT JOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nLEFT JOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard, with the year of production as a separate row for each year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, W.variety AS Variety, W.name AS WineName, VW.yearProduced AS YearProduced\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard, but exclude the year of production",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.variety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard, showing only full years of production",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, W.name AS wineName, W.variety, VW.yearProduced\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE VW.yearProduced IS NOT NULL"
          ]
        },
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard, limited to white wines",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.variety, W.name \nFROM Vineyards_Wines VW \nJOIN Wines W ON VW.wineId = W.wineId \nJOIN Vineyards V ON VW.vineyardId = V.vineyardId \nJOIN VineyardTypes VT ON V.typeId = VT.id \nWHERE VT.typeName = 'White'"
          ]
        },
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard, with the region name instead of the regionId",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, W.variety, W.name AS WineName, R.regionName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nLEFT JOIN Regions R ON V.regionId = R.regionId"
          ]
        },
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard, excluding discontinued wines",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, W.variety, W.name AS wineName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE VW.yearProduced IS NOT NULL"
          ]
        },
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard in 2020",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, W.variety, W.name AS wineName\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE VW.yearProduced = 2020"
          ]
        },
        {
          "interpretation": "For each vineyard, show the variety and names of the wines produced in that vineyard, grouped by year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.variety, VW.yearProduced\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nGROUP BY V.name, W.variety, VW.yearProduced"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1,
        "f1_score": 0.18181818181818182,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "What types of wines are typical for all vineyards?",
      "gold_queries": [
        "SELECT Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What types of wines are normally produced by all vineyards?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT variety FROM Wines"
          ]
        },
        {
          "interpretation": "What types of wines are always produced by all vineyards?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT W.variety\nFROM Wines W\nWHERE NOT EXISTS (\n    SELECT V.vineyardId\n    FROM Vineyards V\n    WHERE NOT EXISTS (\n        SELECT VW.wineId\n        FROM Vineyards_Wines VW\n        WHERE VW.vineyardId = V.vineyardId AND VW.wineId = W.wineId\n    )\n)"
          ]
        },
        {
          "interpretation": "What types of wines are predominantly produced by all vineyards?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT variety FROM Wines GROUP BY variety ORDER BY COUNT(*) DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "What types of wines are produced by all vineyards?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.variety\nFROM Wines w\nWHERE NOT EXISTS (\n    SELECT v.vineyardId\n    FROM Vineyards v\n    LEFT JOIN Vineyards_Wines vw ON v.vineyardId = vw.vineyardId\n    WHERE vw.wineId IS NULL OR vw.wineId != w.wineId\n)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "For each vineyard, what is the variety of wines there",
      "gold_queries": [
        "select vineyards.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each vineyard, what are the wine varieties associated with each wine produced there",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Vineyards.name, Wines.variety\nFROM Vineyards\nJOIN Vineyards_Wines ON Vineyards.vineyardId = Vineyards_Wines.vineyardId\nJOIN Wines ON Vineyards_Wines.wineId = Wines.wineId"
          ]
        },
        {
          "interpretation": "For each vineyard, what varieties of Pinot Noir are produced there",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.variety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE W.variety = 'Pinot Noir'"
          ]
        },
        {
          "interpretation": "For each vineyard, what varieties of Merlot are produced there",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.variety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE W.variety = 'Merlot'"
          ]
        },
        {
          "interpretation": "For each vineyard, what are the wine varieties that are consistently produced there",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.variety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON W.wineId = VW.wineId\nGROUP BY V.vineyardId, W.variety\nHAVING COUNT(DISTINCT VW.yearProduced) = (SELECT COUNT(DISTINCT yearProduced) FROM Vineyards_Wines WHERE vineyardId = V.vineyardId AND yearProduced IS NOT NULL)"
          ]
        },
        {
          "interpretation": "For each vineyard, what varieties of Cabernet Sauvignon are produced there",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, Wu.variety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines Wu ON VW.wineId = Wu.wineId\nWHERE Wu.variety = 'Cabernet Sauvignon'"
          ]
        },
        {
          "interpretation": "For each vineyard, what are the wine varieties produced there, considering only the most recent year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, Win.variety\nFROM Vineyards V\nJOIN (\n    SELECT vineyardId, MAX(yearProduced) as year\n    FROM Vineyards_Wines\n    WHERE yearProduced IS NOT NULL\n    GROUP BY vineyardId\n) VW ON V.vineyardId = VW.vineyardId\nJOIN Vineyards_Wines VWW ON V.vineyardId = VWW.vineyardId AND VW.year = VWW.yearProduced\nJOIN Wines Win ON VWW.wineId = Win.wineId"
          ]
        },
        {
          "interpretation": "For each vineyard, what wine varieties are produced there, considering only the primary wine produced",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.variety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE VW.yearProduced IS NOT NULL"
          ]
        },
        {
          "interpretation": "For each vineyard, what are the wine varieties that have been produced there at least once",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.variety \nFROM Vineyards V \nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId \nJOIN Wines W ON VW.wineId = W.wineId \nGROUP BY V.vineyardId, W.variety"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "What types of wines do we have in each vineyard?",
      "gold_queries": [
        "SELECT Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)",
        "select vineyards.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What types of wine varieties do we have in each vineyard?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, W.variety AS wineVariety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "What are the unique wines produced in each vineyard?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS Vineyard, W.name AS Wine\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nGROUP BY V.name, W.name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "List the wines produced at each vineyard.",
      "gold_queries": [
        "SELECT Wines.name  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)",
        "select vineyards.name , wines.name from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the vineyards and the wines produced, along with the country name of the region.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, W.name AS WineName, C.countryName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN Regions R ON V.regionId = R.regionId\nJOIN Countries C ON R.countryId = C.countryId"
          ]
        },
        {
          "interpretation": "List the types of wines produced at each vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, VT.typeName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN VineyardTypes VT ON V.typeId = VT.id"
          ]
        },
        {
          "interpretation": "List the specific vines used to produce wines at each vineyard.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, W.name AS wineName\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "List the years when wines were produced at each vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Vineyards.name, Vineyards_Wines.yearProduced\nFROM Vineyards\nJOIN Vineyards_Wines ON Vineyards.vineyardId = Vineyards_Wines.vineyardId"
          ]
        },
        {
          "interpretation": "List the wines produced in each region.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.regionName, W.name FROM Regions R\nJOIN Vineyards V ON R.regionId = V.regionId\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "List the vineyards and the wines produced, along with the region name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS Vineyard, W.name AS Wine, R.regionName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nLEFT JOIN Regions R ON V.regionId = R.regionId"
          ]
        },
        {
          "interpretation": "List the vineyards and the wines produced by each vineyard in a particular year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS Vineyard, W.name AS Wine, VW.yearProduced\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE VW.yearProduced IS NOT NULL"
          ]
        },
        {
          "interpretation": "List the vineyards and the wines produced, along with the vineyard type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS Vineyard, W.name AS Wine, TY.typeName AS VineyardType\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN VineyardTypes TY ON V.typeId = TY.id"
          ]
        },
        {
          "interpretation": "List the number of wines produced at each vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, COUNT(DISTINCT VW.wineId) AS numberOfWines\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nGROUP BY V.vineyardId"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1111111111111111,
        "f1_score": 0.1818181818181818,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "Show the name and variety of wines that are common to all vineyards",
      "gold_queries": [
        "SELECT Wines.name, Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the name and variety of wines that are produced in all vineyards",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT W.name, W.variety\nFROM Wines W\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Vineyards V\n    EXCEPT\n    SELECT VW.vineyardId\n    FROM Vineyards_Wines VW\n    WHERE VW.wineId = W.wineId\n)"
          ]
        },
        {
          "interpretation": "Show the name and variety of wines produced in every vineyard",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT W.name, W.variety FROM Wines W JOIN Vineyards_Wines VW ON W.wineId = VW.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "Name all the wines that are found at least once in every vineyard.",
      "gold_queries": [
        "SELECT Wines.name  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Name all the wines that are present in every vineyard without exception",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT w.name\nFROM Wines w\nWHERE NOT EXISTS (\n    SELECT v.vineyardId\n    FROM Vineyards v\n    WHERE NOT EXISTS (\n        SELECT vw.wineId\n        FROM Vineyards_Wines vw\n        WHERE vw.vineyardId = v.vineyardId AND vw.wineId = w.wineId\n    )\n)"
          ]
        },
        {
          "interpretation": "Name all the wines that are found in each vineyard",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, W.name AS WineName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each duty-free shop, list the price of its products.",
      "gold_queries": [
        "select duty_free_shops.name , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each duty-free shop, list the average price of its products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT df.name, AVG(p.price) \nFROM Duty_Free_Shops df \nJOIN Duty_Free_Shops_Products dfs_p ON df.shop_id = dfs_p.shop_id \nJOIN Products p ON dfs_p.product_id = p.product_id \nGROUP BY df.name"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the price distribution of its products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.name, p.category, p.price\nFROM Duty_Free_Shops ds\nJOIN Duty_Free_Shops_Products dfs_p ON ds.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id\nORDER BY ds.name, p.price"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the minimum price of its products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, MIN(p.price) AS min_price\nFROM Duty_Free_Shops_Products dfspp\nJOIN Duty_Free_Shops dfs ON dfspp.shop_id = dfs.shop_id\nJOIN Products p ON dfspp.product_id = p.product_id\nGROUP BY dfs.shop_id"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the sum of prices of its products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.name, SUM(p.price * dfs_products.quantity) AS total_price\nFROM Duty_Free_Shops ds\nJOIN Duty_Free_Shops_Products dfs_products ON ds.shop_id = dfs_products.shop_id\nJOIN Products p ON dfs_products.product_id = p.product_id\nGROUP BY ds.name"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the range of prices of its products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT df.name, MIN(p.price) AS min_price, MAX(p.price) AS max_price\nFROM Duty_Free_Shops df\nJOIN Duty_Free_Shops_Products dfs_p ON df.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id\nGROUP BY df.name"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the price of each product it sells.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT df.name, p.price\nFROM Duty_Free_Shops AS df\nJOIN Duty_Free_Shops_Products AS dfs_p ON df.shop_id = dfs_p.shop_id\nJOIN Products AS p ON dfs_p.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the number of distinct prices of its products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, COUNT(DISTINCT p.price) \nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dfs_p ON dfs.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id\nGROUP BY dfs.name"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the maximum price of its products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.name, MAX(P.price) \nFROM Duty_Free_Shops AS DFS \nJOIN Duty_Free_Shops_Products AS DFS_P ON DFS.shop_id = DFS_P.shop_id \nJOIN Products AS P ON DFS_P.product_id = P.product_id \nGROUP BY DFS.name"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the interquartile range of prices of its products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT d.name, MAX(p.price) - MIN(p.price) AS iqr\nFROM Duty_Free_Shops d\nJOIN Duty_Free_Shops_Products dfsp ON d.shop_id = dfsp.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id\nGROUP BY d.shop_id"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Give me the ids and prices of products that are common to all duty free shops.",
      "gold_queries": [
        "SELECT Products.product_id, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the product_ids and prices of goods that are found in every duty free shop.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.product_id, P.price\nFROM Products P\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Duty_Free_Shops D\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Duty_Free_Shops_Products DFSP\n        WHERE DFSP.shop_id = D.shop_id AND DFSP.product_id = P.product_id\n    )\n)"
          ]
        },
        {
          "interpretation": "Identify the product_ids and prices of items that are available in each duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, p.product_id, p.price\nFROM Duty_Free_Shops_Products dfs_products\nJOIN Duty_Free_Shops dfs ON dfs_products.shop_id = dfs.shop_id\nJOIN Products p ON dfs_products.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "Find the product_ids and prices of goods that appear in each of the duty free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.product_id, p.price \nFROM Products p \nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id"
          ]
        },
        {
          "interpretation": "Highlight the product_ids and prices of goods that are found in each duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.name, dp.product_id, p.price\nFROM Duty_Free_Shops ds\nJOIN Duty_Free_Shops_Products dp ON ds.shop_id = dp.shop_id\nJOIN Products p ON dp.product_id = p.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Tell me the ids and categories of the products every shop sells.",
      "gold_queries": [
        "SELECT Products.product_id, Products.category  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.product_id , products.category from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Tell me the ids and categories of the products that are provided by every shop.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id, category\nFROM Products\nWHERE product_id IN (\n    SELECT product_id\n    FROM Duty_Free_Shops_Products\n    GROUP BY product_id\n    HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "Tell me the ids and categories of the products that are sold by each shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DS.shop_id, P.category\nFROM Duty_Free_Shops_Products AS DFSP\nJOIN Products AS P ON DFSP.product_id = P.product_id\nJOIN Duty_Free_Shops AS DS ON DFSP.shop_id = DS.shop_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each duty free shop, what are the corresponding product ids and prices?",
      "gold_queries": [
        "select duty_free_shops.name , products.product_id , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each duty free shop, display the product_ids and their respective prices that are sold.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT dfs.name, dsp.product_id, p.price\nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dsp ON dfs.shop_id = dsp.shop_id\nJOIN Products p ON dsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "For each duty free shop, present the product_ids and associated prices for the items available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.shop_id, DFS.name, DFSP.product_id, P.price\nFROM Duty_Free_Shops AS DFS\nJOIN Duty_Free_Shops_Products AS DFSP ON DFS.shop_id = DFSP.shop_id\nJOIN Products AS P ON DFSP.product_id = P.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each shop, list the ids and categories of the products they sell.",
      "gold_queries": [
        "select duty_free_shops.name , products.product_id , products.category from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each shop, list the product_id and associated category for each product they sell.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT dfs.name, dfsp.product_id, p.category \nFROM Duty_Free_Shops_Products dfsp \nJOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id \nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "For each shop, display the distinct product_id and category pairs for the products they have for sale.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT dfsp.shop_id, p.product_id, p.category\nFROM Duty_Free_Shops_Products dfsp\nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "For each shop, list the ids and categories of the products they sell:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT D.shop_id, P.category \nFROM Duty_Free_Shops_Products D \nJOIN Products P ON D.product_id = P.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "What are the ids and categories of the products common to all shops?",
      "gold_queries": [
        "SELECT Products.product_id, Products.category  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the ids and categories of the products available in all registered shops?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id, category FROM Products"
          ]
        },
        {
          "interpretation": "What are the ids and categories of the products that can be found in all Duty Free Shop entries?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT p.product_id, p.category\nFROM Products p\nWHERE p.product_id IN (\n    SELECT dpp.product_id\n    FROM Duty_Free_Shops_Products dpp\n    GROUP BY dpp.product_id\n    HAVING COUNT(DISTINCT dpp.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "What are the ids and categories of the products found in all Duty Free Shop inventories?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.product_id, P.category \nFROM Products P \nWHERE P.product_id IN (\n    SELECT DISTINCT DS_P.product_id \n    FROM Duty_Free_Shops_Products DS_P\n) \nAND NOT EXISTS (\n    SELECT 1 \n    FROM Duty_Free_Shops D \n    LEFT JOIN Duty_Free_Shops_Products DS_P ON D.shop_id = DS_P.shop_id \n    WHERE DS_P.product_id = P.product_id \n    GROUP BY D.shop_id \n    HAVING COUNT(DISTINCT DS_P.product_id) = 0\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "List the price of products sold in every duty-free shop.",
      "gold_queries": [
        "SELECT Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the pricing data for each product in each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.name, p.product_id, p.category, p.price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Duty_Free_Shops ds ON dfsp.shop_id = ds.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "List the prices of all products available in each duty-free shop.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "List the price of each product sold in each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Duty_Free_Shops.name, Products.category, Products.price\nFROM Duty_Free_Shops\nJOIN Duty_Free_Shops_Products ON Duty_Free_Shops.shop_id = Duty_Free_Shops_Products.shop_id\nJOIN Products ON Duty_Free_Shops_Products.product_id = Products.product_id"
          ]
        },
        {
          "interpretation": "List the price and product information for each duty-free shop's products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.product_id, p.category, p.price, dfsp.quantity\nFROM Duty_Free_Shops_Products dfsp\nJOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "List the price associated with each product sold in each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT d.name, p.product_id, p.price \nFROM Duty_Free_Shops d \nJOIN Duty_Free_Shops_Products dfsp ON d.shop_id = dfsp.shop_id \nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "List the price information for each product across all duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id, price FROM Products"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each duty free shop, list the ids, categories and prices of the products being sold.",
      "gold_queries": [
        "select duty_free_shops.name , products.product_id , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each duty free shop, display the product ids, categories, and prices of the goods it sells.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.shop_id, P.product_id, P.category, P.price\nFROM Duty_Free_Shops_Products DFS_P\nJOIN Duty_Free_Shops DFS ON DFS_P.shop_id = DFS.shop_id\nJOIN Products P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "For each duty free shop, list the ids, categories, and prices of the products being sold.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.shop_id, P.category, P.price\nFROM Duty_Free_Shops_Products DFS_P\nJOIN Duty_Free_Shops DFS ON DFS_P.shop_id = DFS.shop_id\nJOIN Products P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "List the product ids, categories, and prices of the products sold by each duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT D.name, P.product_id, P.category, P.category, P.price \nFROM Duty_Free_Shops D \nJOIN Duty_Free_Shops_Products DFS_P ON D.shop_id = DFS_P.shop_id \nJOIN Products P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "For each duty free shop, present the product ids, categories, and prices of the items available.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT dfs.name, dfsp.product_id, p.category, p.price\nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dfsp ON dfs.shop_id = dfsp.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "For each duty free shop, provide a list of product ids, categories, and prices of the products available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DF.shop_id, DF.name, DFP.product_id, P.category, P.price\nFROM Duty_Free_Shops AS DF\nJOIN Duty_Free_Shops_Products AS DFP ON DF.shop_id = DFP.shop_id\nJOIN Products AS P ON DFP.product_id = P.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "What are the categories and prices of the products common to all duty free shops?",
      "gold_queries": [
        "SELECT Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Categories and prices of products available in all Duty_Free_Shops",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT category, price FROM Products"
          ]
        },
        {
          "interpretation": "Categories and prices of items shared by all Duty_Free_Shops",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.category, P.price FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Duty_Free_Shops DF WHERE NOT EXISTS (SELECT 1 FROM Duty_Free_Shops_Products DFPS WHERE DFPS.product_id = P.product_id AND DFPS.shop_id = DF.shop_id))"
          ]
        },
        {
          "interpretation": "Items and their prices common across all duty free shops",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.product_id, p.price \nFROM Products p \nWHERE p.product_id IN (\n    SELECT ds.product_id \n    FROM Duty_Free_Shops_Products ds \n    GROUP BY ds.product_id \n    HAVING COUNT(DISTINCT ds.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "Categories and prices of items that appear in each Duty_Free_Shops entry",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.name, P.category, P.price\nFROM Duty_Free_Shops AS DFS\nJOIN Duty_Free_Shops_Products AS DFSP ON DFS.shop_id = DFSP.shop_id\nJOIN Products AS P ON DFSP.product_id = P.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Give me the ids and prices of products that each duty free shop has.",
      "gold_queries": [
        "SELECT Products.product_id, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.product_id , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of product IDs and their prices for every duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.product_id, p.price\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs ON p.product_id = dfs.product_id"
          ]
        },
        {
          "interpretation": "Show me the product IDs and prices for each duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, p.product_id, p.price\nFROM Duty_Free_Shops_Products dfs\nJOIN Products p ON dfs.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "Present the IDs and prices of products for each duty free shop listed in the Duty_Free_Shops_Products table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT shop_id, T2.price FROM Duty_Free_Shops_Products AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id"
          ]
        },
        {
          "interpretation": "List the details of the products and their prices per shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DS.name AS ShopName, P.product_id, P.category, P.price\nFROM Duty_Free_Shops_Products DFSP\nJOIN Duty_Free_Shops DS ON DFSP.shop_id = DS.shop_id\nJOIN Products P ON DFSP.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "Give me a breakdown of the product IDs and prices for each duty free shop.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DF.name, P.product_id, P.price\nFROM Duty_Free_Shops AS DF\nJOIN Duty_Free_Shops_Products AS DFS_P ON DF.shop_id = DFS_P.shop_id\nJOIN Products AS P ON DFS_P.product_id = P.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Tell me about the ids, categories and prices of the products every duty free shop sells.",
      "gold_queries": [
        "SELECT Products.product_id, Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.product_id , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Describe the product IDs, categories, and prices of the products every duty free shop sells and stocks for customers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.product_id, T2.category, T2.price\nFROM Duty_Free_Shops_Products AS T1\nJOIN Products AS T2 ON T1.product_id = T2.product_id"
          ]
        },
        {
          "interpretation": "Tell me about the product IDs, categories, and prices of the products every duty free shop provides for sale.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT D.shop_id, P.product_id, P.category, P.price\nFROM Duty_Free_Shops_Products D\nJOIN Products P ON D.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "Tell me the product IDs, categories, and prices of the products every duty free shop has on sale.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.product_id, p.category, p.price FROM Products p"
          ]
        },
        {
          "interpretation": "Describe the product IDs, categories, and prices of the products every duty free shop stocks.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name, p.product_id, p.category, p.price\nFROM Duty_Free_Shops s\nJOIN Duty_Free_Shops_Products dfs_p ON s.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "List the product IDs, categories, and prices of the products that every duty free shop sells and stocks.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id, category, price FROM Products WHERE product_id IN (SELECT product_id FROM Duty_Free_Shops_Products GROUP BY product_id HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops))"
          ]
        },
        {
          "interpretation": "Tell me about the product IDs, categories, and prices of the products every duty free shop sells, including the quantities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFD.shop_id, P.product_id, P.category, P.price, DFD.quantity \nFROM Duty_Free_Shops_Products DFD \nJOIN Products P ON DFD.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "Tell me the product IDs, categories, and prices of the products every duty free shop provides.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.product_id, p.category, p.price \nFROM Products p \nJOIN Duty_Free_Shops_Products dfsp ON p.product_id = dfsp.product_id"
          ]
        },
        {
          "interpretation": "Provide the IDs, categories, and prices of the products that each duty free shop carries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.shop_id, p.category, p.price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Products p ON dfsp.product_id = p.product_id\nJOIN Duty_Free_Shops ds ON dfsp.shop_id = ds.shop_id"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "What are the ids, categories and prices of the products common to all duty free shops?",
      "gold_queries": [
        "SELECT Products.product_id, Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the ids, categories, and prices of the products existing in all duty free shops?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT p.product_id, p.category, p.price\nFROM Products p\nWHERE p.product_id IN (\n    SELECT dps.product_id\n    FROM Duty_Free_Shops_Products dps\n    GROUP BY dps.product_id\n    HAVING COUNT(DISTINCT dps.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "What are the ids, categories, and prices of the products present in all the duty free shops combined?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT product_id, category, price FROM Products"
          ]
        },
        {
          "interpretation": "What are the ids, categories, and prices of the products found in each of the duty free shops?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT df.name, p.product_id, p.category, p.price\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id\nJOIN Duty_Free_Shops df ON dfs_p.shop_id = df.shop_id"
          ]
        },
        {
          "interpretation": "What are the ids, categories, and prices of the products common to each individual duty free shop?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.product_id, p.category, p.price\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs1 ON p.product_id = dfs1.product_id\nJOIN Duty_Free_Shops_Products dfs2 ON p.product_id = dfs2.product_id AND dfs1.shop_id <> dfs2.shop_id\nJOIN Duty_Free_Shops_Products dfs3 ON p.product_id = dfs3.product_id AND dfs3.shop_id <> dfs1.shop_id AND dfs3.shop_id <> dfs2.shop_id\nJOIN Duty_Free_Shops_Products dfs4 ON p.product_id = dfs4.product_id AND dfs4.shop_id <> dfs1.shop_id AND dfs4.shop_id <> dfs2.shop_id AND dfs4.shop_id <> dfs3.shop_id\nJOIN Duty_Free_Shops_Products dfs5 ON p.product_id = dfs5.product_id AND dfs5.shop_id <> dfs1.shop_id AND dfs5.shop_id <> dfs2.shop_id AND dfs5.shop_id <> dfs3.shop_id AND dfs5.shop_id <> dfs4.shop_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_agroforestry_systems_species/scope_agroforestry_systems_species.sqlite",
      "db_dump": "CREATE TABLE Agroforestry_Systems(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    system_name TEXT,\n    description TEXT\n);\nCREATE TABLE Farmers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Farms(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farm_name TEXT,\n    location TEXT\n);\nCREATE TABLE Species(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE System_Farms(\n    agroforestry_system_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(agroforestry_system_id, farm_id)\n);\nCREATE TABLE System_Species(\n    agroforestry_system_id INTEGER,\n    species_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(species_id) REFERENCES Species(id),\n    PRIMARY KEY(agroforestry_system_id, species_id)\n);\nCREATE TABLE Works_On(\n    farmer_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(farmer_id) REFERENCES Farmers(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(farmer_id, farm_id)\n);\n\nINSERT INTO \"Agroforestry_Systems\" (id,system_name,description) VALUES (1,'Silvopasture','A system where trees, livestock, and forages coexist.'),(2,'Alley Cropping','Trees are planted alongside crops to provide shade and reduce erosion.'),(3,'Forest Gardening','A diverse, multi-layered plant community based on woodland ecosystems.'),(4,'Riparian Buffer','Strips of vegetation along waterways to filter runoff.'),(5,'Windbreak','Rows of trees used to block wind.');\nINSERT INTO \"Farmers\" (id,first_name,last_name,email) VALUES (1,'John','Doe','john.doe@email.com'),(2,'Jane','Smith','jane.smith@email.com'),(3,'Bob','Johnson','bob.johnson@email.com'),(4,'Emily','Williams','emily.williams@email.com'),(5,'Tom','Brown','tom.brown@email.com');\nINSERT INTO \"Farms\" (id,farm_name,location) VALUES (1,'Sunny Acres','123 Main St, Ruralville'),(2,'Green Pastures','456 Elm St, Hometown'),(3,'Orchard Haven','789 Oak Lane, Fruitful City'),(4,'Meadow View','101 Pine St, Seedling County'),(5,'Timber Ridge','202 Cedar Ave, Lumbertown');\nINSERT INTO \"Species\" (id,name) VALUES (1,'Oak'),(2,'Apple'),(3,'Cherry'),(4,'Peach'),(5,'Plum');\nINSERT INTO \"System_Species\" (agroforestry_system_id,species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Which species are the same for all agroforestry systems?",
      "gold_queries": [
        "SELECT Species.name  from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id   GROUP BY System_Species.species_id HAVING COUNT(DISTINCT System_Species.agroforestry_system_id) = (SELECT COUNT(*) FROM  Agroforestry_Systems)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which species exists in each and every agroforestry system?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.name\nFROM Species S\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Agroforestry_Systems A\n    LEFT JOIN System_Species SS ON A.id = SS.agroforestry_system_id AND S.id = SS.species_id\n    WHERE SS.agroforestry_system_id IS NULL\n)"
          ]
        },
        {
          "interpretation": "What is the intersection of species across all agroforestry systems?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT species_id\nFROM System_Species\nGROUP BY species_id\nHAVING COUNT(DISTINCT agroforestry_system_id) = (SELECT COUNT(*) FROM Agroforestry_Systems)"
          ]
        },
        {
          "interpretation": "What is the universal set of species in agroforestry systems?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT name FROM Species"
          ]
        },
        {
          "interpretation": "What species are always found in each agroforestry system?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.system_name, Species.name\nFROM System_Species\nJOIN Agroforestry_Systems S ON System_Species.agroforestry_system_id = S.id\nJOIN Species ON System_Species.species_id = Species.id\nGROUP BY S.system_name, Species.name\nHAVING COUNT(Species.id) = (SELECT COUNT(agroforestry_system_id) FROM System_Species WHERE species_id = Species.id)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_agroforestry_systems_species/scope_agroforestry_systems_species.sqlite",
      "db_dump": "CREATE TABLE Agroforestry_Systems(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    system_name TEXT,\n    description TEXT\n);\nCREATE TABLE Farmers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Farms(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farm_name TEXT,\n    location TEXT\n);\nCREATE TABLE Species(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE System_Farms(\n    agroforestry_system_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(agroforestry_system_id, farm_id)\n);\nCREATE TABLE System_Species(\n    agroforestry_system_id INTEGER,\n    species_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(species_id) REFERENCES Species(id),\n    PRIMARY KEY(agroforestry_system_id, species_id)\n);\nCREATE TABLE Works_On(\n    farmer_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(farmer_id) REFERENCES Farmers(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(farmer_id, farm_id)\n);\n\nINSERT INTO \"Agroforestry_Systems\" (id,system_name,description) VALUES (1,'Silvopasture','A system where trees, livestock, and forages coexist.'),(2,'Alley Cropping','Trees are planted alongside crops to provide shade and reduce erosion.'),(3,'Forest Gardening','A diverse, multi-layered plant community based on woodland ecosystems.'),(4,'Riparian Buffer','Strips of vegetation along waterways to filter runoff.'),(5,'Windbreak','Rows of trees used to block wind.');\nINSERT INTO \"Farmers\" (id,first_name,last_name,email) VALUES (1,'John','Doe','john.doe@email.com'),(2,'Jane','Smith','jane.smith@email.com'),(3,'Bob','Johnson','bob.johnson@email.com'),(4,'Emily','Williams','emily.williams@email.com'),(5,'Tom','Brown','tom.brown@email.com');\nINSERT INTO \"Farms\" (id,farm_name,location) VALUES (1,'Sunny Acres','123 Main St, Ruralville'),(2,'Green Pastures','456 Elm St, Hometown'),(3,'Orchard Haven','789 Oak Lane, Fruitful City'),(4,'Meadow View','101 Pine St, Seedling County'),(5,'Timber Ridge','202 Cedar Ave, Lumbertown');\nINSERT INTO \"Species\" (id,name) VALUES (1,'Oak'),(2,'Apple'),(3,'Cherry'),(4,'Peach'),(5,'Plum');\nINSERT INTO \"System_Species\" (agroforestry_system_id,species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For every agroforestry system, show the species that they contain.",
      "gold_queries": [
        "select agroforestry_systems.system_name , species.name from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the Species comprising each Agroforestry System.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Agroforestry_Systems.system_name, Species.name \nFROM System_Species \nJOIN Agroforestry_Systems ON System_Species.agroforestry_system_id = Agroforestry_Systems.id \nJOIN Species ON System_Species.species_id = Species.id"
          ]
        },
        {
          "interpretation": "Display the Species that are included in every Agroforestry System.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Species WHERE id IN (SELECT species_id FROM System_Species GROUP BY species_id HAVING COUNT(DISTINCT agroforestry_system_id) = (SELECT COUNT(*) FROM Agroforestry_Systems))"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_agroforestry_systems_species/scope_agroforestry_systems_species.sqlite",
      "db_dump": "CREATE TABLE Agroforestry_Systems(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    system_name TEXT,\n    description TEXT\n);\nCREATE TABLE Farmers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Farms(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farm_name TEXT,\n    location TEXT\n);\nCREATE TABLE Species(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE System_Farms(\n    agroforestry_system_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(agroforestry_system_id, farm_id)\n);\nCREATE TABLE System_Species(\n    agroforestry_system_id INTEGER,\n    species_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(species_id) REFERENCES Species(id),\n    PRIMARY KEY(agroforestry_system_id, species_id)\n);\nCREATE TABLE Works_On(\n    farmer_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(farmer_id) REFERENCES Farmers(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(farmer_id, farm_id)\n);\n\nINSERT INTO \"Agroforestry_Systems\" (id,system_name,description) VALUES (1,'Silvopasture','A system where trees, livestock, and forages coexist.'),(2,'Alley Cropping','Trees are planted alongside crops to provide shade and reduce erosion.'),(3,'Forest Gardening','A diverse, multi-layered plant community based on woodland ecosystems.'),(4,'Riparian Buffer','Strips of vegetation along waterways to filter runoff.'),(5,'Windbreak','Rows of trees used to block wind.');\nINSERT INTO \"Farmers\" (id,first_name,last_name,email) VALUES (1,'John','Doe','john.doe@email.com'),(2,'Jane','Smith','jane.smith@email.com'),(3,'Bob','Johnson','bob.johnson@email.com'),(4,'Emily','Williams','emily.williams@email.com'),(5,'Tom','Brown','tom.brown@email.com');\nINSERT INTO \"Farms\" (id,farm_name,location) VALUES (1,'Sunny Acres','123 Main St, Ruralville'),(2,'Green Pastures','456 Elm St, Hometown'),(3,'Orchard Haven','789 Oak Lane, Fruitful City'),(4,'Meadow View','101 Pine St, Seedling County'),(5,'Timber Ridge','202 Cedar Ave, Lumbertown');\nINSERT INTO \"Species\" (id,name) VALUES (1,'Oak'),(2,'Apple'),(3,'Cherry'),(4,'Peach'),(5,'Plum');\nINSERT INTO \"System_Species\" (agroforestry_system_id,species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Give me the species that each agroforestry system contains.",
      "gold_queries": [
        "SELECT Species.name  from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id   GROUP BY System_Species.species_id HAVING COUNT(DISTINCT System_Species.agroforestry_system_id) = (SELECT COUNT(*) FROM  Agroforestry_Systems)",
        "select agroforestry_systems.system_name , species.name from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the species per agroforestry system.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.system_name, S.name \nFROM Agroforestry_Systems A \nJOIN System_Species SS ON A.id = SS.agroforestry_system_id \nJOIN Species S ON SS.species_id = S.id"
          ]
        },
        {
          "interpretation": "Provide the species for each unique agroforestry system.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT agroforestry_system_id, species_id FROM System_Species"
          ]
        },
        {
          "interpretation": "Give the species that are part of all agroforestry systems.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name\nFROM Species AS T2\nJOIN System_Species AS T1 ON T2.id = T1.species_id\nGROUP BY T2.id, T2.name\nHAVING COUNT(DISTINCT T1.agroforestry_system_id) = (SELECT COUNT(*) FROM Agroforestry_Systems)"
          ]
        },
        {
          "interpretation": "Give the species present in all agroforestry systems, including duplicates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name FROM System_Species AS T1 JOIN Species AS T2 ON T1.species_id = T2.id"
          ]
        },
        {
          "interpretation": "List the species for all agroforestry systems.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT S.name \nFROM Species S\nJOIN System_Species SS ON S.id = SS.species_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For every duty free shop, list the categories and prices of the products sold.",
      "gold_queries": [
        "select duty_free_shops.name , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every duty free shop, list the distinct categories of products sold along with their average prices.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT dfs.name, p.category, AVG(p.price) AS average_price\nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dfsp ON dfs.shop_id = dfsp.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id\nGROUP BY dfs.name, p.category"
          ]
        },
        {
          "interpretation": "For every duty free shop, list the names and quantities of the products sold along with their categories and prices.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, P.category, P.price, D.quantity \nFROM Duty_Free_Shops AS S \nJOIN Duty_Free_Shops_Products AS D ON S.shop_id = D.shop_id \nJOIN Products AS P ON D.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "For every duty free shop, list the minimum and maximum prices of the products sold along with their categories.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    d.name AS shop_name,\n    p.category,\n    MIN(p.price) AS min_price,\n    MAX(p.price) AS max_price\nFROM \n    Duty_Free_Shops d\nJOIN \n    Duty_Free_Shops_Products dfsp ON d.shop_id = dfsp.shop_id\nJOIN \n    Products p ON dfsp.product_id = p.product_id\nGROUP BY \n    d.name, p.category"
          ]
        },
        {
          "interpretation": "For every duty free shop, list the top-selling product by quantity and include its category and price.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.category, p.price, dfs_products.product_id, MAX(dfs_products.quantity) as quantity\nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dfs_products ON dfs.shop_id = dfs_products.shop_id\nJOIN Products p ON dfs_products.product_id = p.product_id\nGROUP BY dfs.shop_id, dfs_products.product_id\nORDER BY dfs.shop_id, quantity DESC"
          ]
        },
        {
          "interpretation": "For every duty free shop, list the product categories sold and the number of unique products in each category.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.name, p.category, COUNT(DISTINCT p.product_id)\nFROM Duty_Free_Shops ds\nJOIN Duty_Free_Shops_Products dfs_p ON ds.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id\nGROUP BY ds.name, p.category"
          ]
        },
        {
          "interpretation": "For every duty free shop, list the product categories sold and the total revenue generated from each category.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.category, SUM(dfps.quantity * p.price) AS total_revenue\nFROM Duty_Free_Shops_Products dfps\nJOIN Duty_Free_Shops dfs ON dfps.shop_id = dfs.shop_id\nJOIN Products p ON dfps.product_id = p.product_id\nGROUP BY dfs.name, p.category"
          ]
        },
        {
          "interpretation": "For every duty free shop, list the product IDs and quantities of the products sold along with their categories and prices.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, dfsp.product_id, dfsp.quantity, p.category, p.price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "For every duty free shop, list the product categories sold and the sum of quantities for each category.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.category, SUM(dfsp.quantity) AS total_quantity\nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dfsp ON dfs.shop_id = dfsp.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id\nGROUP BY dfs.name, p.category"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "List the price of products that are common to all duty-free shops.",
      "gold_queries": [
        "SELECT Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the price of goods that are stocked in each duty-free shop without exception.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.price\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id"
          ]
        },
        {
          "interpretation": "List the price of products that are available in all duty-free shops and have a non-zero quantity.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.price\nFROM Products P\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Duty_Free_Shops S\n    LEFT JOIN Duty_Free_Shops_Products DFP ON S.shop_id = DFP.shop_id AND P.product_id = DFP.product_id\n    WHERE DFP.quantity IS NULL OR DFP.quantity = 0\n)"
          ]
        },
        {
          "interpretation": "List the price of products that each duty-free shop has in stock, with any quantity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.name, P.price\nFROM Duty_Free_Shops_Products AS DFS_P\nJOIN Duty_Free_Shops AS DFS ON DFS_P.shop_id = DFS.shop_id\nJOIN Products AS P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "List the price of merchandise found in all duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT price FROM Products"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Show me the categories and prices of the products every duty free shop sells.",
      "gold_queries": [
        "SELECT Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the categories and prices of unique products sold in each duty free shop.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.category, p.price\nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dfsp ON dfs.shop_id = dfsp.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id\nORDER BY dfs.name, p.category, p.price"
          ]
        },
        {
          "interpretation": "Show the categories and prices of all products regardless of stock quantity in each duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT category, price FROM Products"
          ]
        },
        {
          "interpretation": "Show me the categories and prices of the least and most expensive products each duty free shop sells.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT shop_id, MIN(price), MAX(price) FROM Duty_Free_Shops_Products JOIN Products ON Duty_Free_Shops_Products.product_id = Products.product_id GROUP BY shop_id"
          ]
        },
        {
          "interpretation": "Display the categories and prices of the top 5 selling products in each duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.category, p.price\nFROM (\n    SELECT dfs.shop_id, dfsp.product_id, SUM(dfsp.quantity) AS total_quantity\n    FROM Duty_Free_Shops_Products dfsp\n    JOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id\n    GROUP BY dfs.shop_id, dfsp.product_id\n) AS top_selling\nJOIN Duty_Free_Shops dfs ON top_selling.shop_id = dfs.shop_id\nJOIN Products p ON top_selling.product_id = p.product_id\nWHERE (top_selling.shop_id, top_selling.total_quantity) IN (\n    SELECT shop_id, total_quantity\n    FROM (\n        SELECT shop_id, product_id, SUM(quantity) AS total_quantity\n        FROM Duty_Free_Shops_Products\n        GROUP BY shop_id, product_id\n    ) AS shop_product_totals\n    ORDER BY shop_id, total_quantity DESC\n    LIMIT 5\n)"
          ]
        },
        {
          "interpretation": "Show me the categories and prices of products based on the shop's quantity of stock.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.category, p.price \nFROM Products p \nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id \nORDER BY dfs_p.quantity"
          ]
        },
        {
          "interpretation": "List the categories and prices of the highest quantity products each duty free shop sells.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.name, P.category, P.price\nFROM Duty_Free_Shops AS DFS\nJOIN (\n    SELECT shop_id, product_id, MAX(quantity) AS max_quantity\n    FROM Duty_Free_Shops_Products\n    GROUP BY shop_id\n) AS DFS_Products ON DFS.shop_id = DFS_Products.shop_id\nJOIN Products AS P ON DFS_Products.product_id = P.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_training_topics/scope_bank_training_topics.sqlite",
      "db_dump": "CREATE TABLE Bank_Training (\n    training_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    bank_id INTEGER,\n    employee_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id),\n    FOREIGN KEY(employee_id) REFERENCES Employees(id)\n);\nCREATE TABLE Bank_Training_Topics (\n    bank_training_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(bank_training_id) REFERENCES Bank_Training(training_id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id),\n    PRIMARY KEY(bank_training_id, topic_id)\n);\nCREATE TABLE Banks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    bank_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id)\n);\nCREATE TABLE Topics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT\n);\nCREATE TABLE TrainingSessions (\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    trainer_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(trainer_id) REFERENCES Employees(id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id)\n);\n\nINSERT INTO \"Bank_Training\" (training_id,bank_id,employee_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Bank_Training_Topics\" (bank_training_id,topic_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(4,1),(5,1);\nINSERT INTO \"Banks\" (id,name,location) VALUES (1,'ABC Bank','New York'),(2,'XYZ Bank','California'),(3,'LMN Bank','Texas'),(4,'PQR Bank','Florida'),(5,'STU Bank','Illinois');\nINSERT INTO \"Employees\" (id,first_name,last_name,bank_id) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Mike','Brown',3),(4,'Emma','White',4),(5,'Tom','Black',5);\nINSERT INTO \"Topics\" (id,value) VALUES (1,'Customer Service Skills'),(2,'Fraud Prevention'),(3,'Interest Rate Management'),(4,'Loan Processing'),(5,'Investment Strategies');\nINSERT INTO \"TrainingSessions\" (session_id,date,trainer_id,topic_id) VALUES (1,'2021-10-01 09:00:00',1,1),(2,'2021-10-08 09:00:00',2,2),(3,'2021-10-15 09:00:00',3,1),(4,'2021-10-22 09:00:00',4,2),(5,'2021-10-29 09:00:00',5,1);\n",
      "question": "For each bank training session, provide the corresponding value of topics.",
      "gold_queries": [
        "select bank_training.training_id , topics.value from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each bank training session, provide the values of the topic.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value\nFROM TrainingSessions AS S\nJOIN Topics AS T ON S.topic_id = T.id"
          ]
        },
        {
          "interpretation": "For each bank training session, give the value of the topics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.value\nFROM Topics AS T1\nJOIN Bank_Training_Topics AS T2 ON T1.id = T2.topic_id\nJOIN Bank_Training AS T3 ON T2.bank_training_id = T3.training_id"
          ]
        },
        {
          "interpretation": "For each bank training session, list the values of the topics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value\nFROM TrainingSessions AS TS\nJOIN Bank_Training_Topics AS BTT ON TS.topic_id = BTT.topic_id\nJOIN Topics AS T ON BTT.topic_id = T.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_training_topics/scope_bank_training_topics.sqlite",
      "db_dump": "CREATE TABLE Bank_Training (\n    training_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    bank_id INTEGER,\n    employee_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id),\n    FOREIGN KEY(employee_id) REFERENCES Employees(id)\n);\nCREATE TABLE Bank_Training_Topics (\n    bank_training_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(bank_training_id) REFERENCES Bank_Training(training_id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id),\n    PRIMARY KEY(bank_training_id, topic_id)\n);\nCREATE TABLE Banks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    bank_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id)\n);\nCREATE TABLE Topics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT\n);\nCREATE TABLE TrainingSessions (\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    trainer_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(trainer_id) REFERENCES Employees(id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id)\n);\n\nINSERT INTO \"Bank_Training\" (training_id,bank_id,employee_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Bank_Training_Topics\" (bank_training_id,topic_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(4,1),(5,1);\nINSERT INTO \"Banks\" (id,name,location) VALUES (1,'ABC Bank','New York'),(2,'XYZ Bank','California'),(3,'LMN Bank','Texas'),(4,'PQR Bank','Florida'),(5,'STU Bank','Illinois');\nINSERT INTO \"Employees\" (id,first_name,last_name,bank_id) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Mike','Brown',3),(4,'Emma','White',4),(5,'Tom','Black',5);\nINSERT INTO \"Topics\" (id,value) VALUES (1,'Customer Service Skills'),(2,'Fraud Prevention'),(3,'Interest Rate Management'),(4,'Loan Processing'),(5,'Investment Strategies');\nINSERT INTO \"TrainingSessions\" (session_id,date,trainer_id,topic_id) VALUES (1,'2021-10-01 09:00:00',1,1),(2,'2021-10-08 09:00:00',2,2),(3,'2021-10-15 09:00:00',3,1),(4,'2021-10-22 09:00:00',4,2),(5,'2021-10-29 09:00:00',5,1);\n",
      "question": "What value of topics is common across all bank training sessions?",
      "gold_queries": [
        "SELECT Topics.value  from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id   GROUP BY Bank_Training_Topics.topic_id HAVING COUNT(DISTINCT Bank_Training_Topics.bank_training_id) = (SELECT COUNT(*) FROM  Bank_Training)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What topic value is included in each bank training session?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.value FROM Bank_Training_Topics AS T1 JOIN Topics AS T2 ON T1.topic_id = T2.id"
          ]
        },
        {
          "interpretation": "Is there a topic value that is available in all bank training sessions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value \nFROM Topics T \nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM Bank_Training_Topics BTT \n    WHERE BTT.topic_id <> T.id\n)"
          ]
        },
        {
          "interpretation": "Are all training sessions associated with the same topic value?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T3.value\nFROM TrainingSessions AS T1\nJOIN Topics AS T3 ON T1.topic_id = T3.id"
          ]
        },
        {
          "interpretation": "Is there a consistent topic value across all training events?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T.value\nFROM Topics T\nJOIN Bank_Training_Topics BTT ON T.id = BTT.topic_id\nGROUP BY T.value\nHAVING COUNT(DISTINCT BTT.bank_training_id) = (SELECT COUNT(*) FROM Bank_Training)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_training_topics/scope_bank_training_topics.sqlite",
      "db_dump": "CREATE TABLE Bank_Training (\n    training_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    bank_id INTEGER,\n    employee_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id),\n    FOREIGN KEY(employee_id) REFERENCES Employees(id)\n);\nCREATE TABLE Bank_Training_Topics (\n    bank_training_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(bank_training_id) REFERENCES Bank_Training(training_id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id),\n    PRIMARY KEY(bank_training_id, topic_id)\n);\nCREATE TABLE Banks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    bank_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id)\n);\nCREATE TABLE Topics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT\n);\nCREATE TABLE TrainingSessions (\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    trainer_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(trainer_id) REFERENCES Employees(id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id)\n);\n\nINSERT INTO \"Bank_Training\" (training_id,bank_id,employee_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Bank_Training_Topics\" (bank_training_id,topic_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(4,1),(5,1);\nINSERT INTO \"Banks\" (id,name,location) VALUES (1,'ABC Bank','New York'),(2,'XYZ Bank','California'),(3,'LMN Bank','Texas'),(4,'PQR Bank','Florida'),(5,'STU Bank','Illinois');\nINSERT INTO \"Employees\" (id,first_name,last_name,bank_id) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Mike','Brown',3),(4,'Emma','White',4),(5,'Tom','Black',5);\nINSERT INTO \"Topics\" (id,value) VALUES (1,'Customer Service Skills'),(2,'Fraud Prevention'),(3,'Interest Rate Management'),(4,'Loan Processing'),(5,'Investment Strategies');\nINSERT INTO \"TrainingSessions\" (session_id,date,trainer_id,topic_id) VALUES (1,'2021-10-01 09:00:00',1,1),(2,'2021-10-08 09:00:00',2,2),(3,'2021-10-15 09:00:00',3,1),(4,'2021-10-22 09:00:00',4,2),(5,'2021-10-29 09:00:00',5,1);\n",
      "question": "What value of topics is associated with each bank training?",
      "gold_queries": [
        "SELECT Topics.value  from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id   GROUP BY Bank_Training_Topics.topic_id HAVING COUNT(DISTINCT Bank_Training_Topics.bank_training_id) = (SELECT COUNT(*) FROM  Bank_Training)",
        "select bank_training.training_id , topics.value from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the actual topic content values for each bank training?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value \nFROM Bank_Training_Topics BT\nJOIN Topics T ON BT.topic_id = T.id"
          ]
        },
        {
          "interpretation": "What topic values are associated with every bank training instance?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T.value\nFROM Bank_Training_Topics BT\nJOIN Topics T ON BT.topic_id = T.id"
          ]
        },
        {
          "interpretation": "For each bank training, list the related topic keys.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bank_training_id, topic_id FROM Bank_Training_Topics"
          ]
        },
        {
          "interpretation": "What topics (by value) are attached to each bank training record?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.training_id, T3.value FROM Bank_Training AS T1 JOIN Bank_Training_Topics AS T2 ON T1.training_id = T2.bank_training_id JOIN Topics AS T3 ON T2.topic_id = T3.id"
          ]
        },
        {
          "interpretation": "For each bank training, what are the associated topic definitions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.topic_id, T2.value \nFROM Bank_Training_Topics AS T1 \nJOIN Topics AS T2 ON T1.topic_id = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "Give me the common transaction types and their dates we have in all bank statements.",
      "gold_queries": [
        "SELECT Transactions.TransactionType, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide the transaction types and dates that are present in each of the bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionType, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "Display the transaction types and dates common to all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.TransactionType, T1.Date\nFROM Transactions AS T1\nJOIN Bank_Statements_Transactions AS T2 ON T1.TransactionID = T2.TransactionID\nGROUP BY T1.TransactionType, T1.Date\nHAVING COUNT(DISTINCT T2.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "List the transaction types and dates that are present in all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.TransactionType, T1.Date \nFROM Transactions T1 \nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM Bank_Statements B \n    WHERE NOT EXISTS (\n        SELECT 1 \n        FROM Bank_Statements_Transactions BST \n        JOIN Transactions T2 \n        ON BST.TransactionID = T2.TransactionID \n        WHERE BST.StatementID = B.StatementID \n        AND T2.TransactionType = T1.TransactionType \n        AND T2.Date = T1.Date\n    )\n)"
          ]
        },
        {
          "interpretation": "List the transaction types and dates that are consistent in all bank statements.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.TransactionType, T1.Date\nFROM Transactions AS T1\nJOIN Bank_Statements_Transactions AS B1 ON T1.TransactionID = B1.TransactionID\nJOIN Bank_Statements AS ST1 ON B1.StatementID = ST1.StatementID\nGROUP BY T1.TransactionID\nHAVING COUNT(DISTINCT ST1.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "Tell me the transaction types and their dates that occur in all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.Date \nFROM Transactions T \nWHERE NOT EXISTS (\n    SELECT BS.StatementID \n    FROM Bank_Statements BS \n    LEFT JOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID \n    WHERE BST.TransactionID IS NULL OR BST.TransactionID != T.TransactionID\n)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For every bank statement, show me the types of transactions along with the dates of them",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactiontype , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Enumerate the transaction types and their dates for each bank statement individually",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionType, T.Date \nFROM Bank_Statements BS \nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID \nJOIN Transactions T ON BST.TransactionID = T.TransactionID \nORDER BY BS.StatementID, T.Date"
          ]
        },
        {
          "interpretation": "Display the transaction types and associated dates for every bank statement",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.TransactionType, T2.Date\nFROM Bank_Statements_Transactions AS T1\nJOIN Transactions AS T2 ON T1.TransactionID = T2.TransactionID\nORDER BY T1.StatementID, T2.Date"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "What information is there on transactions that are the same in all bank statements?",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.Amount, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What information is there on transactions that are identical across all bank statements?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Transactions T\nWHERE T.TransactionID IN (\n    SELECT BST.TransactionID\n    FROM Bank_Statements_Transactions BST\n    GROUP BY BST.TransactionID\n    HAVING COUNT(DISTINCT BST.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)\n)"
          ]
        },
        {
          "interpretation": "What information is there on transactions that are found in each and every bank statement?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionID, T.AccountNumber, T.TransactionType, T.Amount, T.Date\nFROM Transactions T\nWHERE T.TransactionID IN (\n    SELECT BST.TransactionID\n    FROM Bank_Statements_Transactions BST\n    GROUP BY BST.TransactionID\n    HAVING COUNT(DISTINCT BST.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)\n)"
          ]
        },
        {
          "interpretation": "What information is there on transactions that appear in every bank statement?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID FROM Bank_Statements_Transactions GROUP BY TransactionID HAVING COUNT(DISTINCT StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "What information is there on transactions that are recurring in all bank statements?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Transactions.TransactionID, Transactions.TransactionType, Transactions.Amount\nFROM Transactions\nJOIN Bank_Statements_Transactions ON Transactions.TransactionID = Bank_Statements_Transactions.TransactionID\nGROUP BY Transactions.TransactionID\nHAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For all bank statements list every transaction ID.",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactionid from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "What is the transaction name, id and account number that is in common for all bank statements?",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.AccountNumber, Transactions.TransactionType  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For each bank statement, list information on transactions shown.",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactionid , transactions.amount , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each bank statement, list the transaction details shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "For each bank statement, list the average transaction amount shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, AVG(t.Amount) AS AverageTransactionAmount\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID\nGROUP BY bs.StatementID"
          ]
        },
        {
          "interpretation": "For each bank statement, list the transaction IDs shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StatementID, TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "For each bank statement, list the transaction types shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionType\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nGROUP BY BS.StatementID, T.TransactionType"
          ]
        },
        {
          "interpretation": "For each bank statement, list the number of transactions shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StatementID, COUNT(TransactionID) AS NumberOfTransactions\nFROM Bank_Statements_Transactions\nGROUP BY StatementID"
          ]
        },
        {
          "interpretation": "For each bank statement, list the dates of transactions shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT BS.StartDate, BS.EndDate, T.Date \nFROM Bank_Statements BS \nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID \nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "For each bank statement, list the customer names associated with transactions shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, C.FirstName, C.LastName\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nJOIN Accounts A ON T.AccountNumber = A.AccountNumber\nJOIN Customers C ON A.CustomerID = C.CustomerID"
          ]
        },
        {
          "interpretation": "For each bank statement, list the total amount of transactions shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, SUM(T.Amount) AS TotalTransactions\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nGROUP BY BS.StatementID"
          ]
        },
        {
          "interpretation": "For each bank statement, list the transaction amounts shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, t.Amount\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "Show me the transaction types and dates we have for each bank statement",
      "gold_queries": [
        "SELECT Transactions.TransactionType, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactiontype , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the transaction kinds and dates for each statement record entry",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.StatementID, T.TransactionType, T.Date\nFROM Bank_Statements_Transactions AS BST\nJOIN Bank_Statements AS B ON BST.StatementID = B.StatementID\nJOIN Transactions AS T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "List the transaction types and date entries for statements",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.Date \nFROM Transactions T \nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID"
          ]
        },
        {
          "interpretation": "List the transaction types and their corresponding dates for each statement line",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, Date FROM Transactions"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "List the transaction IDs in common across all bank statements.",
      "gold_queries": [
        "SELECT Transactions.TransactionID  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the transaction IDs that are included within any bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID\nFROM Bank_Statements_Transactions"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "What is the transaction type, id and account number for each bank statement?",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.AccountNumber, Transactions.TransactionType  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactionid , transactions.accountnumber , transactions.transactiontype from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Bank_Statements.TransactionType, Bank_Statements_Transactions.TransactionID, Accounts.AccountNumber",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.TransactionType, BTS.TransactionID, T1.AccountNumber\nFROM Accounts AS T1\nJOIN Transactions AS T2 ON T1.AccountNumber = T2.AccountNumber\nJOIN Bank_Statements_Transactions AS BTS ON T2.TransactionID = BTS.TransactionID"
          ]
        },
        {
          "interpretation": "Transactions.TransactionType, Transactions.TransactionID, Bank_Statements.AccountNumber",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Transactions.TransactionType, Transactions.TransactionID, Bank_Statements.AccountNumber\nFROM Transactions\nJOIN Bank_Statements_Transactions ON Transactions.TransactionID = Bank_Statements_Transactions.TransactionID\nJOIN Bank_Statements ON Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
          ]
        },
        {
          "interpretation": "Bank_Statements.TransactionType, Bank_Statements_Transactions.TransactionID, Bank_Statements_Transactions.StatementID Accounts.AccountNumber",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, BST.TransactionID, BST.StatementID, A.AccountNumber\nFROM Transactions AS T\nJOIN Bank_Statements_Transactions AS BST ON T.TransactionID = BST.TransactionID\nJOIN Accounts AS A ON T.AccountNumber = A.AccountNumber"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "Show me information on transactions every bank statement shows.",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.Amount, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactionid , transactions.amount , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the transaction details that are recorded in the bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Transactions.TransactionID, Transactions.AccountNumber, Transactions.TransactionType, Transactions.Amount, Transactions.Date\nFROM Transactions\nJOIN Bank_Statements_Transactions ON Transactions.TransactionID = Bank_Statements_Transactions.TransactionID"
          ]
        },
        {
          "interpretation": "List the transactions that are documented within the bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Transactions.TransactionID, TransactionType, Amount, Date\nFROM Transactions\nJOIN Bank_Statements_Transactions ON Transactions.TransactionID = Bank_Statements_Transactions.TransactionID"
          ]
        },
        {
          "interpretation": "Display information on transactions that correspond to each statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "Provide a breakdown of transactions documented in each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, BS.AccountNumber, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "List transactions that are included in the bank statement records.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T.TransactionID, T.AccountNumber, T.TransactionType, T.Amount, T.Date\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "List the transaction IDs for every bank statement.",
      "gold_queries": [
        "SELECT Transactions.TransactionID  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactionid from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the transactions that belong to each statement.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StatementID, TransactionID\nFROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Identify the transactions included in every bank statement.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID FROM Bank_Statements_Transactions GROUP BY TransactionID HAVING COUNT(DISTINCT StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "List the transaction details for all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionID, T.AccountNumber, T.TransactionType, T.Amount, T.Date\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID"
          ]
        },
        {
          "interpretation": "Extract the transaction IDs from all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "List the transaction history for each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Airport/scope_maintenance_facilities_equipment/scope_maintenance_facilities_equipment.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    equipmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\nCREATE TABLE Maintenance_Facilities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Maintenance_Facilities_Equipment(\n    maintenanceId INTEGER,\n    equipmentTypeId INTEGER,\n    FOREIGN KEY (maintenanceId) REFERENCES Maintenance_Facilities(id),\n    FOREIGN KEY (equipmentTypeId) REFERENCES Equipment(equipmentId));\n\nINSERT INTO \"Equipment\" (equipmentId,type) VALUES (1,'Jet_Bridge'),(2,'Luggage_Conveyor'),(3,'Security_Scanner'),(4,'Aircraft_Tow_Vehicle'),(5,'Passenger_Board_bridge');\nINSERT INTO \"Maintenance_Facilities\" (id,name,location) VALUES (1,'Facility1','Location1'),(2,'Facility2','Location2'),(3,'Facility3','Location3'),(4,'Facility4','Location4'),(5,'Facility5','Location5');\nINSERT INTO \"Maintenance_Facilities_Equipment\" (maintenanceId,equipmentTypeId) VALUES (1,1),(1,2),(2,3),(2,4),(3,1),(3,5),(4,2),(4,6),(5,3),(5,7),(2,1),(4,1),(5,1);\n",
      "question": "What type of equipment do we have for each facility",
      "gold_queries": [
        "SELECT Equipment.type  from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id   GROUP BY Maintenance_Facilities_Equipment.equipmentTypeId HAVING COUNT(DISTINCT Maintenance_Facilities_Equipment.maintenanceId) = (SELECT COUNT(*) FROM  Maintenance_Facilities)",
        "select maintenance_facilities.name , equipment.type from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Facilities and their equipment type assignments",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Maintenance_Facilities.name, Equipment.type\nFROM Maintenance_Facilities_Equipment\nJOIN Maintenance_Facilities ON Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id\nJOIN Equipment ON Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId"
          ]
        },
        {
          "interpretation": "Equipment types in all facilities",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.type \nFROM Equipment AS T1 \nJOIN Maintenance_Facilities_Equipment AS T2 \nON T1.equipmentId = T2.equipmentTypeId"
          ]
        },
        {
          "interpretation": "Each maintenance facility's equipment types",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT mfe.maintenanceId, e.type\nFROM Maintenance_Facilities_Equipment mfe\nJOIN Equipment e ON mfe.equipmentTypeId = e.equipmentId"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_maintenance_facilities_equipment/scope_maintenance_facilities_equipment.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    equipmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\nCREATE TABLE Maintenance_Facilities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Maintenance_Facilities_Equipment(\n    maintenanceId INTEGER,\n    equipmentTypeId INTEGER,\n    FOREIGN KEY (maintenanceId) REFERENCES Maintenance_Facilities(id),\n    FOREIGN KEY (equipmentTypeId) REFERENCES Equipment(equipmentId));\n\nINSERT INTO \"Equipment\" (equipmentId,type) VALUES (1,'Jet_Bridge'),(2,'Luggage_Conveyor'),(3,'Security_Scanner'),(4,'Aircraft_Tow_Vehicle'),(5,'Passenger_Board_bridge');\nINSERT INTO \"Maintenance_Facilities\" (id,name,location) VALUES (1,'Facility1','Location1'),(2,'Facility2','Location2'),(3,'Facility3','Location3'),(4,'Facility4','Location4'),(5,'Facility5','Location5');\nINSERT INTO \"Maintenance_Facilities_Equipment\" (maintenanceId,equipmentTypeId) VALUES (1,1),(1,2),(2,3),(2,4),(3,1),(3,5),(4,2),(4,6),(5,3),(5,7),(2,1),(4,1),(5,1);\n",
      "question": "Give me the equipment that is common across all facilities",
      "gold_queries": [
        "SELECT Equipment.type  from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id   GROUP BY Maintenance_Facilities_Equipment.equipmentTypeId HAVING COUNT(DISTINCT Maintenance_Facilities_Equipment.maintenanceId) = (SELECT COUNT(*) FROM  Maintenance_Facilities)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the types of equipment that are present in all facility associations",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type FROM Equipment WHERE equipmentId IN (SELECT equipmentTypeId FROM Maintenance_Facilities_Equipment GROUP BY equipmentTypeId HAVING COUNT(DISTINCT maintenanceId) = (SELECT COUNT(*) FROM Maintenance_Facilities))"
          ]
        },
        {
          "interpretation": "List the equipment IDs that are consistently listed in all facility associations",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT equipmentTypeId \nFROM Maintenance_Facilities_Equipment \nGROUP BY equipmentTypeId \nHAVING COUNT(DISTINCT maintenanceId) = (SELECT COUNT(*) FROM Maintenance_Facilities)"
          ]
        },
        {
          "interpretation": "Retrieve the equipment types found in all maintenance facilities without omission",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type\nFROM Equipment"
          ]
        },
        {
          "interpretation": "Provide the equipment IDs that are common in each facility\u2019s equipment association",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(equipmentTypeId) as count, equipmentTypeId\nFROM Maintenance_Facilities_Equipment\nGROUP BY equipmentTypeId\nHAVING count = (SELECT COUNT(*) FROM Maintenance_Facilities)"
          ]
        },
        {
          "interpretation": "Find the maintenance facility equipment that is universally present",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.equipmentId, T1.type\nFROM Equipment AS T1\nJOIN Maintenance_Facilities_Equipment AS T2 ON T1.equipmentId = T2.equipmentTypeId\nGROUP BY T1.equipmentId\nHAVING COUNT(DISTINCT T2.maintenanceId) = (SELECT COUNT(*) FROM Maintenance_Facilities)"
          ]
        },
        {
          "interpretation": "Retrieve the set of equipment types present in each facility",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Maintenance_Facilities.name, Equipment.type\nFROM Maintenance_Facilities\nJOIN Maintenance_Facilities_Equipment ON Maintenance_Facilities.id = Maintenance_Facilities_Equipment.maintenanceId\nJOIN Equipment ON Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_maintenance_facilities_equipment/scope_maintenance_facilities_equipment.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    equipmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\nCREATE TABLE Maintenance_Facilities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Maintenance_Facilities_Equipment(\n    maintenanceId INTEGER,\n    equipmentTypeId INTEGER,\n    FOREIGN KEY (maintenanceId) REFERENCES Maintenance_Facilities(id),\n    FOREIGN KEY (equipmentTypeId) REFERENCES Equipment(equipmentId));\n\nINSERT INTO \"Equipment\" (equipmentId,type) VALUES (1,'Jet_Bridge'),(2,'Luggage_Conveyor'),(3,'Security_Scanner'),(4,'Aircraft_Tow_Vehicle'),(5,'Passenger_Board_bridge');\nINSERT INTO \"Maintenance_Facilities\" (id,name,location) VALUES (1,'Facility1','Location1'),(2,'Facility2','Location2'),(3,'Facility3','Location3'),(4,'Facility4','Location4'),(5,'Facility5','Location5');\nINSERT INTO \"Maintenance_Facilities_Equipment\" (maintenanceId,equipmentTypeId) VALUES (1,1),(1,2),(2,3),(2,4),(3,1),(3,5),(4,2),(4,6),(5,3),(5,7),(2,1),(4,1),(5,1);\n",
      "question": "For all facilities, give me the type of equipment available",
      "gold_queries": [
        "select maintenance_facilities.name , equipment.type from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For all facilities, output the equipment types supported",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT MF.name, E.type \nFROM Maintenance_Facilities MF \nJOIN Maintenance_Facilities_Equipment MFE ON MF.id = MFE.maintenanceId \nJOIN Equipment E ON MFE.equipmentTypeId = E.equipmentId"
          ]
        },
        {
          "interpretation": "For all facilities, indicate the range of equipment types they stock",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MF.name, MIN(E.type) AS min_equipment_type, MAX(E.type) AS max_equipment_type\nFROM Maintenance_Facilities_Equipment AS MF_E\nJOIN Maintenance_Facilities AS MF ON MF_E.maintenanceId = MF.id\nJOIN Equipment AS E ON MF_E.equipmentTypeId = E.equipmentId\nGROUP BY MF.name"
          ]
        },
        {
          "interpretation": "For all facilities, show the equipment types maintained",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.id, M.name, E.type\nFROM Maintenance_Facilities M\nJOIN Maintenance_Facilities_Equipment MFE ON M.id = MFE.maintenanceId\nJOIN Equipment E ON MFE.equipmentTypeId = E.equipmentId"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For each bank statement, give me the transaction name, id and account number.",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactionid , transactions.accountnumber , transactions.transactiontype from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each bank statement, generate the transaction types, IDs, and associated account numbers.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionID, T.AccountNumber, T.TransactionType\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "For each bank statement, provide the name, ID, and account number of the associated transactions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.TransactionID, T2.AccountNumber, C.CustomerID, C.FirstName, C.LastName \nFROM Bank_Statements_Transactions AS BST \nJOIN Transactions AS T2 ON BST.TransactionID = T2.TransactionID \nJOIN Accounts AS A ON T2.AccountNumber = A.AccountNumber \nJOIN Customers AS C ON A.CustomerID = C.CustomerID"
          ]
        },
        {
          "interpretation": "For each bank statement, output the transaction categories, IDs, and account numbers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.TransactionType, T1.TransactionID, T1.AccountNumber \nFROM Transactions T1 \nJOIN Bank_Statements_Transactions T2 ON T1.TransactionID = T2.TransactionID"
          ]
        },
        {
          "interpretation": "For each bank statement, show the transaction details including names, IDs, and account numbers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, C.FirstName, C.LastName, C.CustomerID, A.AccountNumber, T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nJOIN Accounts A ON T.AccountNumber = A.AccountNumber\nJOIN Customers C ON A.CustomerID = C.CustomerID"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_insurance_plan_coverage/scope_insurance_plan_coverage.sqlite",
      "db_dump": "CREATE TABLE Appointment(AppointmentID INTEGER PRIMARY KEY AUTOINCREMENT, Date TIMESTAMP, Reason TEXT, PatientID INTEGER, DoctorID INTEGER, FOREIGN KEY(PatientID) REFERENCES Patient(PatientID), FOREIGN KEY(DoctorID) REFERENCES Doctor(DoctorID));\nCREATE TABLE Coverage(\n    CoverageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT);\nCREATE TABLE Doctor(DoctorID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Specialty TEXT);\nCREATE TABLE Insurance_Plan(\n    PlanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PlanName TEXT,\n    MonthlyPremium REAL);\nCREATE TABLE Insurance_Plan_Coverage(\n    PlanID INTEGER,\n    CoverageID INTEGER,\n    FOREIGN KEY(PlanID) REFERENCES Insurance_Plan(PlanID),\n    FOREIGN KEY(CoverageID) REFERENCES Coverage(CoverageID),\n    PRIMARY KEY(PlanID, CoverageID));\nCREATE TABLE Patient(PatientID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, DOB TEXT);\n\nINSERT INTO \"Appointment\" (AppointmentID,Date,Reason,PatientID,DoctorID) VALUES (1,'2022-01-01 10:00:00','Annual checkup',1,1),(2,'2022-02-01 14:00:00','Follow-up visit',2,2),(3,'2022-03-01 09:00:00','Consultation',3,3),(4,'2022-04-01 11:00:00','Wound care',4,4),(5,'2022-05-01 13:00:00','Diabetes management',5,5);\nINSERT INTO \"Coverage\" (CoverageID,Description) VALUES (1,'Prescription Drugs'),(2,'Preventive Care'),(3,'Hospitalization'),(4,'Mental Health Services'),(5,'Laboratory Tests');\nINSERT INTO \"Doctor\" (DoctorID,Name,Specialty) VALUES (1,'Dr. John Wilson','Cardiology'),(2,'Dr. Jane Thompson','Gastroenterology'),(3,'Dr. Tom Harris','Neurology'),(4,'Dr. Emily Martin','Orthopedics'),(5,'Dr. William Lee','Endocrinology');\nINSERT INTO \"Insurance_Plan\" (PlanID,PlanName,MonthlyPremium) VALUES (1,'Basic',30.99),(2,'Standard',61.98),(3,'Deluxe',120.97),(4,'Premier',180.95),(5,'Ultimate',240.92);\nINSERT INTO \"Insurance_Plan_Coverage\" (PlanID,CoverageID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\nINSERT INTO \"Patient\" (PatientID,Name,DOB) VALUES (1,'John Doe','1990-01-01'),(2,'Jane Smith','1992-02-02'),(3,'Tom Johnson','1988-03-03'),(4,'Emily Brown','1994-04-04'),(5,'William Davis','1996-05-05');\n",
      "question": "For each insurance plan, list all of the coverage we offer",
      "gold_queries": [
        "select insurance_plan.planname , coverage.description from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each insurance plan, list all the medical services covered under each plan",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT p.PlanName, c.Description \nFROM Insurance_Plan_Coverage ipc \nJOIN Insurance_Plan p ON ipc.PlanID = p.PlanID \nJOIN Coverage c ON ipc.CoverageID = c.CoverageID"
          ]
        },
        {
          "interpretation": "For each insurance plan, list all the coverage IDs we provide",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PlanID, CoverageID FROM Insurance_Plan_Coverage"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_insurance_plan_coverage/scope_insurance_plan_coverage.sqlite",
      "db_dump": "CREATE TABLE Appointment(AppointmentID INTEGER PRIMARY KEY AUTOINCREMENT, Date TIMESTAMP, Reason TEXT, PatientID INTEGER, DoctorID INTEGER, FOREIGN KEY(PatientID) REFERENCES Patient(PatientID), FOREIGN KEY(DoctorID) REFERENCES Doctor(DoctorID));\nCREATE TABLE Coverage(\n    CoverageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT);\nCREATE TABLE Doctor(DoctorID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Specialty TEXT);\nCREATE TABLE Insurance_Plan(\n    PlanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PlanName TEXT,\n    MonthlyPremium REAL);\nCREATE TABLE Insurance_Plan_Coverage(\n    PlanID INTEGER,\n    CoverageID INTEGER,\n    FOREIGN KEY(PlanID) REFERENCES Insurance_Plan(PlanID),\n    FOREIGN KEY(CoverageID) REFERENCES Coverage(CoverageID),\n    PRIMARY KEY(PlanID, CoverageID));\nCREATE TABLE Patient(PatientID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, DOB TEXT);\n\nINSERT INTO \"Appointment\" (AppointmentID,Date,Reason,PatientID,DoctorID) VALUES (1,'2022-01-01 10:00:00','Annual checkup',1,1),(2,'2022-02-01 14:00:00','Follow-up visit',2,2),(3,'2022-03-01 09:00:00','Consultation',3,3),(4,'2022-04-01 11:00:00','Wound care',4,4),(5,'2022-05-01 13:00:00','Diabetes management',5,5);\nINSERT INTO \"Coverage\" (CoverageID,Description) VALUES (1,'Prescription Drugs'),(2,'Preventive Care'),(3,'Hospitalization'),(4,'Mental Health Services'),(5,'Laboratory Tests');\nINSERT INTO \"Doctor\" (DoctorID,Name,Specialty) VALUES (1,'Dr. John Wilson','Cardiology'),(2,'Dr. Jane Thompson','Gastroenterology'),(3,'Dr. Tom Harris','Neurology'),(4,'Dr. Emily Martin','Orthopedics'),(5,'Dr. William Lee','Endocrinology');\nINSERT INTO \"Insurance_Plan\" (PlanID,PlanName,MonthlyPremium) VALUES (1,'Basic',30.99),(2,'Standard',61.98),(3,'Deluxe',120.97),(4,'Premier',180.95),(5,'Ultimate',240.92);\nINSERT INTO \"Insurance_Plan_Coverage\" (PlanID,CoverageID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\nINSERT INTO \"Patient\" (PatientID,Name,DOB) VALUES (1,'John Doe','1990-01-01'),(2,'Jane Smith','1992-02-02'),(3,'Tom Johnson','1988-03-03'),(4,'Emily Brown','1994-04-04'),(5,'William Davis','1996-05-05');\n",
      "question": "Show me the coverage that is common for all insurance plans",
      "gold_queries": [
        "SELECT Coverage.Description  from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID   GROUP BY Insurance_Plan_Coverage.CoverageID HAVING COUNT(DISTINCT Insurance_Plan_Coverage.PlanID) = (SELECT COUNT(*) FROM  Insurance_Plan)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Healthcare/scope_insurance_plan_coverage/scope_insurance_plan_coverage.sqlite",
      "db_dump": "CREATE TABLE Appointment(AppointmentID INTEGER PRIMARY KEY AUTOINCREMENT, Date TIMESTAMP, Reason TEXT, PatientID INTEGER, DoctorID INTEGER, FOREIGN KEY(PatientID) REFERENCES Patient(PatientID), FOREIGN KEY(DoctorID) REFERENCES Doctor(DoctorID));\nCREATE TABLE Coverage(\n    CoverageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT);\nCREATE TABLE Doctor(DoctorID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Specialty TEXT);\nCREATE TABLE Insurance_Plan(\n    PlanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PlanName TEXT,\n    MonthlyPremium REAL);\nCREATE TABLE Insurance_Plan_Coverage(\n    PlanID INTEGER,\n    CoverageID INTEGER,\n    FOREIGN KEY(PlanID) REFERENCES Insurance_Plan(PlanID),\n    FOREIGN KEY(CoverageID) REFERENCES Coverage(CoverageID),\n    PRIMARY KEY(PlanID, CoverageID));\nCREATE TABLE Patient(PatientID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, DOB TEXT);\n\nINSERT INTO \"Appointment\" (AppointmentID,Date,Reason,PatientID,DoctorID) VALUES (1,'2022-01-01 10:00:00','Annual checkup',1,1),(2,'2022-02-01 14:00:00','Follow-up visit',2,2),(3,'2022-03-01 09:00:00','Consultation',3,3),(4,'2022-04-01 11:00:00','Wound care',4,4),(5,'2022-05-01 13:00:00','Diabetes management',5,5);\nINSERT INTO \"Coverage\" (CoverageID,Description) VALUES (1,'Prescription Drugs'),(2,'Preventive Care'),(3,'Hospitalization'),(4,'Mental Health Services'),(5,'Laboratory Tests');\nINSERT INTO \"Doctor\" (DoctorID,Name,Specialty) VALUES (1,'Dr. John Wilson','Cardiology'),(2,'Dr. Jane Thompson','Gastroenterology'),(3,'Dr. Tom Harris','Neurology'),(4,'Dr. Emily Martin','Orthopedics'),(5,'Dr. William Lee','Endocrinology');\nINSERT INTO \"Insurance_Plan\" (PlanID,PlanName,MonthlyPremium) VALUES (1,'Basic',30.99),(2,'Standard',61.98),(3,'Deluxe',120.97),(4,'Premier',180.95),(5,'Ultimate',240.92);\nINSERT INTO \"Insurance_Plan_Coverage\" (PlanID,CoverageID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\nINSERT INTO \"Patient\" (PatientID,Name,DOB) VALUES (1,'John Doe','1990-01-01'),(2,'Jane Smith','1992-02-02'),(3,'Tom Johnson','1988-03-03'),(4,'Emily Brown','1994-04-04'),(5,'William Davis','1996-05-05');\n",
      "question": "What coverage do we have for each insurance plan?",
      "gold_queries": [
        "SELECT Coverage.Description  from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID   GROUP BY Insurance_Plan_Coverage.CoverageID HAVING COUNT(DISTINCT Insurance_Plan_Coverage.PlanID) = (SELECT COUNT(*) FROM  Insurance_Plan)",
        "select insurance_plan.planname , coverage.description from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the coverage percentage for each insurance plan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PlanName, (COUNT(CoverageID) * 100.0 / (SELECT COUNT(*) FROM Coverage)) AS CoveragePercentage\nFROM Insurance_Plan\nJOIN Insurance_Plan_Coverage ON Insurance_Plan.PlanID = Insurance_Plan_Coverage.PlanID\nGROUP BY PlanName"
          ]
        },
        {
          "interpretation": "What are the hospital network details for each insurance plan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.PlanName, C.Description\nFROM Insurance_Plan_Coverage IPC\nJOIN Insurance_Plan P ON IPC.PlanID = P.PlanID\nJOIN Coverage C ON IPC.CoverageID = C.CoverageID\nWHERE C.Description = 'Hospitalization'"
          ]
        },
        {
          "interpretation": "What is the pharmacy network for each insurance plan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.PlanName, GROUP_CONCAT(T1.Description) AS PharmacyNetwork\nFROM Coverage AS T1\nJOIN Insurance_Plan_Coverage AS T3 ON T1.CoverageID = T3.CoverageID\nJOIN Insurance_Plan AS T2 ON T3.PlanID = T2.PlanID\nWHERE T1.Description LIKE '%Prescription Drugs%'\nGROUP BY T2.PlanName"
          ]
        },
        {
          "interpretation": "Which doctors are covered under each insurance plan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.PlanName, D.Name\nFROM Insurance_Plan P, Doctor D\nWHERE EXISTS (\n    SELECT 1\n    FROM Insurance_Plan_Coverage IPC\n    WHERE IPC.PlanID = P.PlanID\n    AND EXISTS (\n        SELECT 1\n        FROM Coverage C\n        WHERE C.CoverageID = IPC.CoverageID\n        AND C.Description = 'Preventive Care'\n    )\n)"
          ]
        },
        {
          "interpretation": "What are the out-of-pocket maximums for each insurance plan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PlanName, MonthlyPremium FROM Insurance_Plan"
          ]
        },
        {
          "interpretation": "What specific coverage benefits are included in each insurance plan?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.PlanName, T2.Description FROM Insurance_Plan AS T1 JOIN Insurance_Plan_Coverage AS IPC ON T1.PlanID = IPC.PlanID JOIN Coverage AS T2 ON IPC.CoverageID = T2.CoverageID"
          ]
        },
        {
          "interpretation": "What are the preventive care coverage details for each insurance plan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT IP.PlanName, C.Description FROM Insurance_Plan_Coverage IPC JOIN Insurance_Plan IP ON IPC.PlanID = IP.PlanID JOIN Coverage C ON IPC.CoverageID = C.CoverageID WHERE C.Description = 'Preventive Care'"
          ]
        },
        {
          "interpretation": "What are the limitations of each insurance plan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PlanName, GROUP_CONCAT(Description) AS Limitations\nFROM Insurance_Plan\nJOIN Insurance_Plan_Coverage ON Insurance_Plan.PlanID = Insurance_Plan_Coverage.PlanID\nJOIN Coverage ON Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID\nGROUP BY PlanName"
          ]
        },
        {
          "interpretation": "What is the total cost associated with each insurance plan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Insurance_Plan.PlanName, SUM(Coverage.Description) AS TotalCost\nFROM Insurance_Plan\nJOIN Insurance_Plan_Coverage ON Insurance_Plan.PlanID = Insurance_Plan_Coverage.PlanID\nJOIN Coverage ON Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID\nGROUP BY Insurance_Plan.PlanName"
          ]
        },
        {
          "interpretation": "What is the network of providers for each insurance plan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT IP.PlanName, D.Name AS DoctorName, D.Specialty\nFROM Insurance_Plan IP\nJOIN Appointment A ON 1=1\nJOIN Doctor D ON A.DoctorID = D.DoctorID\nGROUP BY IP.PlanName, D.Name, D.Specialty"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1,
        "f1_score": 0.16666666666666669,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Hospitality/scope_cultural_centers_performances/scope_cultural_centers_performances.sqlite",
      "db_dump": "CREATE TABLE Cultural_Centers(\n    centerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Cultural_Centers_Performances(\n    culturalCenterID INTEGER,\n    performanceID INTEGER,\n    FOREIGN KEY(culturalCenterID) REFERENCES Cultural_Centers(centerID),\n    FOREIGN KEY(performanceID) REFERENCES Performances(performanceID));\nCREATE TABLE Employees(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Managers(\n    managerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    employeeID INTEGER,\n    FOREIGN KEY(employeeID) REFERENCES Employees(employeeID));\nCREATE TABLE Performances(\n    performanceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\n\nINSERT INTO \"Cultural_Centers\" (centerID,name,location) VALUES (1,'Art Center','New York'),(2,'Theater House','Los Angeles'),(3,'Music Hall','Chicago'),(4,'Dance Studio','Miami'),(5,'Concert Venue','Houston');\nINSERT INTO \"Cultural_Centers_Performances\" (culturalCenterID,performanceID) VALUES (1,1),(1,2),(2,3),(3,4),(4,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Employees\" (employeeID,firstName,lastName) VALUES (1,'John','Smith'),(2,'Jane','Doe'),(3,'Robert','Brown'),(4,'Alice','Green'),(5,'Tom','White');\nINSERT INTO \"Managers\" (managerID,employeeID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Performances\" (performanceID,type) VALUES (1,'Dance_Performances'),(2,'Musical_Performances'),(3,'Drama_Performances'),(4,'Comedy_Shows'),(5,'Opera');\n",
      "question": "Give me the performance types for each cultural center.",
      "gold_queries": [
        "SELECT Performances.type  from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID   GROUP BY Cultural_Centers_Performances.performanceID HAVING COUNT(DISTINCT Cultural_Centers_Performances.culturalCenterID) = (SELECT COUNT(*) FROM  Cultural_Centers)",
        "select cultural_centers.name , performances.type from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide the performance types related to every cultural site.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T2.type\nFROM Cultural_Centers AS T1\nJOIN Cultural_Centers_Performances AS T3 ON T1.centerID = T3.culturalCenterID\nJOIN Performances AS T2 ON T3.performanceID = T2.performanceID"
          ]
        },
        {
          "interpretation": "Show the performance varieties for each cultural location.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Cultural_Centers.location, Performances.type\nFROM Cultural_Centers\nJOIN Cultural_Centers_Performances ON Cultural_Centers.centerID = Cultural_Centers_Performances.culturalCenterID\nJOIN Performances ON Cultural_Centers_Performances.performanceID = Performances.performanceID"
          ]
        },
        {
          "interpretation": "Generate a list of performance types for all cultural institutions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Performances"
          ]
        },
        {
          "interpretation": "Retrieve the performance formats for every cultural establishment.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.type FROM Cultural_Centers_Performances AS T1 JOIN Performances AS T2 ON T1.performanceID = T2.performanceID"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Hospitality/scope_cultural_centers_performances/scope_cultural_centers_performances.sqlite",
      "db_dump": "CREATE TABLE Cultural_Centers(\n    centerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Cultural_Centers_Performances(\n    culturalCenterID INTEGER,\n    performanceID INTEGER,\n    FOREIGN KEY(culturalCenterID) REFERENCES Cultural_Centers(centerID),\n    FOREIGN KEY(performanceID) REFERENCES Performances(performanceID));\nCREATE TABLE Employees(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Managers(\n    managerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    employeeID INTEGER,\n    FOREIGN KEY(employeeID) REFERENCES Employees(employeeID));\nCREATE TABLE Performances(\n    performanceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\n\nINSERT INTO \"Cultural_Centers\" (centerID,name,location) VALUES (1,'Art Center','New York'),(2,'Theater House','Los Angeles'),(3,'Music Hall','Chicago'),(4,'Dance Studio','Miami'),(5,'Concert Venue','Houston');\nINSERT INTO \"Cultural_Centers_Performances\" (culturalCenterID,performanceID) VALUES (1,1),(1,2),(2,3),(3,4),(4,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Employees\" (employeeID,firstName,lastName) VALUES (1,'John','Smith'),(2,'Jane','Doe'),(3,'Robert','Brown'),(4,'Alice','Green'),(5,'Tom','White');\nINSERT INTO \"Managers\" (managerID,employeeID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Performances\" (performanceID,type) VALUES (1,'Dance_Performances'),(2,'Musical_Performances'),(3,'Drama_Performances'),(4,'Comedy_Shows'),(5,'Opera');\n",
      "question": "For every cultural center, show me the corresponding performance type.",
      "gold_queries": [
        "select cultural_centers.name , performances.type from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every cultural center, show me the corresponding performance type for each performance at that center.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.name, P.type\nFROM Cultural_Centers C\nJOIN Cultural_Centers_Performances CCP ON C.centerID = CCP.culturalCenterID\nJOIN Performances P ON CCP.performanceID = P.performanceID"
          ]
        },
        {
          "interpretation": "For every cultural center, show the range of performance types associated with its performances.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.name, MIN(p.type) AS min_performance_type, MAX(p.type) AS max_performance_type\nFROM Cultural_Centers c\nJOIN Cultural_Centers_Performances ccp ON c.centerID = ccp.culturalCenterID\nJOIN Performances p ON ccp.performanceID = p.performanceID\nGROUP BY c.centerID, c.name"
          ]
        },
        {
          "interpretation": "For every cultural center, list the spectrum of performance types for the performances there.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.name, GROUP_CONCAT(p.type) AS performance_types\nFROM Cultural_Centers c\nJOIN Cultural_Centers_Performances ccp ON c.centerID = ccp.culturalCenterID\nJOIN Performances p ON ccp.performanceID = p.performanceID\nGROUP BY c.centerID, c.name"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Hospitality/scope_cultural_centers_performances/scope_cultural_centers_performances.sqlite",
      "db_dump": "CREATE TABLE Cultural_Centers(\n    centerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Cultural_Centers_Performances(\n    culturalCenterID INTEGER,\n    performanceID INTEGER,\n    FOREIGN KEY(culturalCenterID) REFERENCES Cultural_Centers(centerID),\n    FOREIGN KEY(performanceID) REFERENCES Performances(performanceID));\nCREATE TABLE Employees(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Managers(\n    managerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    employeeID INTEGER,\n    FOREIGN KEY(employeeID) REFERENCES Employees(employeeID));\nCREATE TABLE Performances(\n    performanceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\n\nINSERT INTO \"Cultural_Centers\" (centerID,name,location) VALUES (1,'Art Center','New York'),(2,'Theater House','Los Angeles'),(3,'Music Hall','Chicago'),(4,'Dance Studio','Miami'),(5,'Concert Venue','Houston');\nINSERT INTO \"Cultural_Centers_Performances\" (culturalCenterID,performanceID) VALUES (1,1),(1,2),(2,3),(3,4),(4,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Employees\" (employeeID,firstName,lastName) VALUES (1,'John','Smith'),(2,'Jane','Doe'),(3,'Robert','Brown'),(4,'Alice','Green'),(5,'Tom','White');\nINSERT INTO \"Managers\" (managerID,employeeID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Performances\" (performanceID,type) VALUES (1,'Dance_Performances'),(2,'Musical_Performances'),(3,'Drama_Performances'),(4,'Comedy_Shows'),(5,'Opera');\n",
      "question": "What performance types are the same for all cultural centers?",
      "gold_queries": [
        "SELECT Performances.type  from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID   GROUP BY Cultural_Centers_Performances.performanceID HAVING COUNT(DISTINCT Cultural_Centers_Performances.culturalCenterID) = (SELECT COUNT(*) FROM  Cultural_Centers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What performance types are common across all cultural centers?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type FROM Performances WHERE performanceID IN (SELECT performanceID FROM Cultural_Centers_Performances GROUP BY performanceID HAVING COUNT(DISTINCT culturalCenterID) = (SELECT COUNT(*) FROM Cultural_Centers))"
          ]
        },
        {
          "interpretation": "What is the collective set of performance types present in all cultural centers?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Performances"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
      "db_dump": "CREATE TABLE Categories(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT\n);\nCREATE TABLE Film_Festival_Categories(\n    festivalId INTEGER,\n    categoryId INTEGER,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Film_Festival_Entries(\n    festivalId INTEGER,\n    filmId INTEGER,\n    entryDate DATE,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (filmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festival_Winners(\n    festivalId INTEGER,\n    awardType TEXT,\n    winningFilmId INTEGER,\n    winYear INTEGER ,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (winningFilmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festivals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    director TEXT,\n    yearReleased INTEGER \n);\n\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Short_Film'),(2,'Feature_Film'),(3,'Documentary'),(4,'Animation'),(5,'Experimental');\nINSERT INTO \"Film_Festival_Categories\" (festivalId,categoryId) VALUES (1,1),(1,2),(2,4),(2,3),(3,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Film_Festival_Entries\" (festivalId,filmId,entryDate) VALUES (1,1,'2021-07-01'),(1,2,'2021-08-01'),(2,3,'2022-06-01'),(2,4,'2022-07-01'),(3,5,'2023-05-01');\nINSERT INTO \"Film_Festival_Winners\" (festivalId,awardType,winningFilmId,winYear) VALUES (1,'Best Short Film',1,2021),(1,'Best Feature Film',2,2021),(2,'Best Animation',3,2022),(2,'Best Documentary',4,2022),(3,'Best Experimental',5,2023);\nINSERT INTO \"Film_Festivals\" (id,name,location) VALUES (1,'Festival A','Location X'),(2,'Festival B','Location Y'),(3,'Festival C','Location Z'),(4,'Festival D','Location W'),(5,'Festival E','Location V');\nINSERT INTO \"Films\" (id,title,director,yearReleased) VALUES (1,'Movie A','Director X',2020),(2,'Movie B','Director Y',2021),(3,'Movie C','Director Z',2019),(4,'Movie D','Director W',2022),(5,'Movie E','Director V',2023);\n",
      "question": "List all  film festivals and their categories.",
      "gold_queries": [
        "select film_festivals.name , categories.categoryname from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all film festivals and their related categories.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT F.name AS FestivalName, C.categoryName AS CategoryName\nFROM Film_Festivals F\nJOIN Film_Festival_Categories FFC ON F.id = FFC.festivalId\nJOIN Categories C ON FFC.categoryId = C.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
      "db_dump": "CREATE TABLE Categories(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT\n);\nCREATE TABLE Film_Festival_Categories(\n    festivalId INTEGER,\n    categoryId INTEGER,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Film_Festival_Entries(\n    festivalId INTEGER,\n    filmId INTEGER,\n    entryDate DATE,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (filmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festival_Winners(\n    festivalId INTEGER,\n    awardType TEXT,\n    winningFilmId INTEGER,\n    winYear INTEGER ,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (winningFilmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festivals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    director TEXT,\n    yearReleased INTEGER \n);\n\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Short_Film'),(2,'Feature_Film'),(3,'Documentary'),(4,'Animation'),(5,'Experimental');\nINSERT INTO \"Film_Festival_Categories\" (festivalId,categoryId) VALUES (1,1),(1,2),(2,4),(2,3),(3,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Film_Festival_Entries\" (festivalId,filmId,entryDate) VALUES (1,1,'2021-07-01'),(1,2,'2021-08-01'),(2,3,'2022-06-01'),(2,4,'2022-07-01'),(3,5,'2023-05-01');\nINSERT INTO \"Film_Festival_Winners\" (festivalId,awardType,winningFilmId,winYear) VALUES (1,'Best Short Film',1,2021),(1,'Best Feature Film',2,2021),(2,'Best Animation',3,2022),(2,'Best Documentary',4,2022),(3,'Best Experimental',5,2023);\nINSERT INTO \"Film_Festivals\" (id,name,location) VALUES (1,'Festival A','Location X'),(2,'Festival B','Location Y'),(3,'Festival C','Location Z'),(4,'Festival D','Location W'),(5,'Festival E','Location V');\nINSERT INTO \"Films\" (id,title,director,yearReleased) VALUES (1,'Movie A','Director X',2020),(2,'Movie B','Director Y',2021),(3,'Movie C','Director Z',2019),(4,'Movie D','Director W',2022),(5,'Movie E','Director V',2023);\n",
      "question": "What film categories does each film festival offer?",
      "gold_queries": [
        "SELECT Categories.categoryName  from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id   GROUP BY Film_Festival_Categories.categoryId HAVING COUNT(DISTINCT Film_Festival_Categories.festivalId) = (SELECT COUNT(*) FROM  Film_Festivals)",
        "select film_festivals.name , categories.categoryname from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Film_Festival_Categories.festivalId, Categories.categoryName",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Film_Festival_Categories.festivalId, Categories.categoryName\nFROM Film_Festival_Categories\nJOIN Categories ON Film_Festival_Categories.categoryId = Categories.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
      "db_dump": "CREATE TABLE Categories(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT\n);\nCREATE TABLE Film_Festival_Categories(\n    festivalId INTEGER,\n    categoryId INTEGER,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Film_Festival_Entries(\n    festivalId INTEGER,\n    filmId INTEGER,\n    entryDate DATE,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (filmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festival_Winners(\n    festivalId INTEGER,\n    awardType TEXT,\n    winningFilmId INTEGER,\n    winYear INTEGER ,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (winningFilmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festivals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    director TEXT,\n    yearReleased INTEGER \n);\n\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Short_Film'),(2,'Feature_Film'),(3,'Documentary'),(4,'Animation'),(5,'Experimental');\nINSERT INTO \"Film_Festival_Categories\" (festivalId,categoryId) VALUES (1,1),(1,2),(2,4),(2,3),(3,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Film_Festival_Entries\" (festivalId,filmId,entryDate) VALUES (1,1,'2021-07-01'),(1,2,'2021-08-01'),(2,3,'2022-06-01'),(2,4,'2022-07-01'),(3,5,'2023-05-01');\nINSERT INTO \"Film_Festival_Winners\" (festivalId,awardType,winningFilmId,winYear) VALUES (1,'Best Short Film',1,2021),(1,'Best Feature Film',2,2021),(2,'Best Animation',3,2022),(2,'Best Documentary',4,2022),(3,'Best Experimental',5,2023);\nINSERT INTO \"Film_Festivals\" (id,name,location) VALUES (1,'Festival A','Location X'),(2,'Festival B','Location Y'),(3,'Festival C','Location Z'),(4,'Festival D','Location W'),(5,'Festival E','Location V');\nINSERT INTO \"Films\" (id,title,director,yearReleased) VALUES (1,'Movie A','Director X',2020),(2,'Movie B','Director Y',2021),(3,'Movie C','Director Z',2019),(4,'Movie D','Director W',2022),(5,'Movie E','Director V',2023);\n",
      "question": "Show me the categories that are the same for all film festivals.",
      "gold_queries": [
        "SELECT Categories.categoryName  from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id   GROUP BY Film_Festival_Categories.categoryId HAVING COUNT(DISTINCT Film_Festival_Categories.festivalId) = (SELECT COUNT(*) FROM  Film_Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the categories that are found in the entries of all film festivals, regardless of festival.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT c.categoryName \nFROM Categories c \nWHERE NOT EXISTS (\n    SELECT ff.id \n    FROM Film_Festivals ff \n    WHERE NOT EXISTS (\n        SELECT ffc.festivalId \n        FROM Film_Festival_Categories ffc \n        WHERE ffc.festivalId = ff.id AND ffc.categoryId = c.id\n    )\n)"
          ]
        },
        {
          "interpretation": "Show me the categories that are present in the entries of each and every film festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.categoryName\nFROM Categories c\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Film_Festivals f\n    LEFT JOIN Film_Festival_Categories ffc ON f.id = ffc.festivalId\n    WHERE ffc.categoryId IS NULL OR ffc.categoryId != c.id\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_health_apps_functions/scope_health_apps_functions.sqlite",
      "db_dump": "CREATE TABLE Functions(\n    functionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT);\nCREATE TABLE Health_Apps(\n    appID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price REAL );\nCREATE TABLE Health_Apps_Functions(\n    healthAppID INTEGER,\n    functionID INTEGER,\n    FOREIGN KEY(healthAppID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(functionID) REFERENCES Functions(functionID),\n    PRIMARY KEY(healthAppID, functionID));\nCREATE TABLE Reviews(\n    reviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    rating INTEGER ,\n    comment TEXT,\n    appID INTEGER,\n    userID INTEGER,\n    FOREIGN KEY(appID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(userID) REFERENCES Users(userID));\nCREATE TABLE Users(\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    password TEXT);\n\nINSERT INTO \"Functions\" (functionID,value) VALUES (1,'Activity_Tracking'),(2,'Calorie_Counting'),(3,'Meditation'),(4,'Disease_Symptoms'),(5,'Blood_Pressure_Monitoring');\nINSERT INTO \"Health_Apps\" (appID,name,description,price) VALUES (1,'App1','This is App1',0.99),(2,'App2','This is App2',1.99),(3,'App3','This is App3',2.99),(4,'App4','This is App4',3.99),(5,'App5','This is App5',4.99);\nINSERT INTO \"Health_Apps_Functions\" (healthAppID,functionID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Reviews\" (reviewID,rating,comment,appID,userID) VALUES (1,5,'Great app!',1,1),(2,4,'Good but could use some improvements.',2,2),(3,3,'Worked well overall.',3,3),(4,2,'Not what I expected.',4,4),(5,1,'Didn''t work as promised.',5,5);\nINSERT INTO \"Users\" (userID,username,email,password) VALUES (1,'User1','user1@example.com','password1'),(2,'User2','user2@example.com','password2'),(3,'User3','user3@example.com','password3'),(4,'User4','user4@example.com','password4'),(5,'User5','user5@example.com','password5');\n",
      "question": "What functions do all health apps have in common?",
      "gold_queries": [
        "SELECT Functions.value  from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID   GROUP BY Health_Apps_Functions.functionID HAVING COUNT(DISTINCT Health_Apps_Functions.healthAppID) = (SELECT COUNT(*) FROM  Health_Apps)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the common functions across all health apps in the database?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT f.value \nFROM Functions f \nJOIN Health_Apps_Functions haf ON f.functionID = haf.functionID \nGROUP BY f.value \nHAVING COUNT(DISTINCT haf.healthAppID) = (SELECT COUNT(*) FROM Health_Apps)"
          ]
        },
        {
          "interpretation": "What functions are consistently found in all health apps in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.value \nFROM Functions F \nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM Health_Apps HA \n    LEFT JOIN Health_Apps_Functions HAF ON HA.appID = HAF.healthAppID \n    WHERE HAF.functionID = F.functionID AND HAF.healthAppID IS NULL\n)"
          ]
        },
        {
          "interpretation": "What functions are universally included in all health apps?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.value\nFROM Functions f\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Health_Apps h\n    LEFT JOIN Health_Apps_Functions haf ON h.appID = haf.healthAppID\n    WHERE haf.functionID = f.functionID\n    GROUP BY h.appID\n    HAVING COUNT(DISTINCT haf.functionID) <> (SELECT COUNT(*) FROM Functions)\n)"
          ]
        },
        {
          "interpretation": "What are the functions represented by all health apps in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT F.value\nFROM Functions F\nJOIN Health_Apps_Functions HAF ON F.functionID = HAF.functionID"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_health_apps_functions/scope_health_apps_functions.sqlite",
      "db_dump": "CREATE TABLE Functions(\n    functionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT);\nCREATE TABLE Health_Apps(\n    appID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price REAL );\nCREATE TABLE Health_Apps_Functions(\n    healthAppID INTEGER,\n    functionID INTEGER,\n    FOREIGN KEY(healthAppID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(functionID) REFERENCES Functions(functionID),\n    PRIMARY KEY(healthAppID, functionID));\nCREATE TABLE Reviews(\n    reviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    rating INTEGER ,\n    comment TEXT,\n    appID INTEGER,\n    userID INTEGER,\n    FOREIGN KEY(appID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(userID) REFERENCES Users(userID));\nCREATE TABLE Users(\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    password TEXT);\n\nINSERT INTO \"Functions\" (functionID,value) VALUES (1,'Activity_Tracking'),(2,'Calorie_Counting'),(3,'Meditation'),(4,'Disease_Symptoms'),(5,'Blood_Pressure_Monitoring');\nINSERT INTO \"Health_Apps\" (appID,name,description,price) VALUES (1,'App1','This is App1',0.99),(2,'App2','This is App2',1.99),(3,'App3','This is App3',2.99),(4,'App4','This is App4',3.99),(5,'App5','This is App5',4.99);\nINSERT INTO \"Health_Apps_Functions\" (healthAppID,functionID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Reviews\" (reviewID,rating,comment,appID,userID) VALUES (1,5,'Great app!',1,1),(2,4,'Good but could use some improvements.',2,2),(3,3,'Worked well overall.',3,3),(4,2,'Not what I expected.',4,4),(5,1,'Didn''t work as promised.',5,5);\nINSERT INTO \"Users\" (userID,username,email,password) VALUES (1,'User1','user1@example.com','password1'),(2,'User2','user2@example.com','password2'),(3,'User3','user3@example.com','password3'),(4,'User4','user4@example.com','password4'),(5,'User5','user5@example.com','password5');\n",
      "question": "Show me the functions of each health app.",
      "gold_queries": [
        "SELECT Functions.value  from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID   GROUP BY Health_Apps_Functions.functionID HAVING COUNT(DISTINCT Health_Apps_Functions.healthAppID) = (SELECT COUNT(*) FROM  Health_Apps)",
        "select health_apps.name , functions.value from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the list of functions associated with each health app.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HA.name, F.value\nFROM Health_Apps HA\nJOIN Health_Apps_Functions HAF ON HA.appID = HAF.healthAppID\nJOIN Functions F ON HAF.functionID = F.functionID"
          ]
        },
        {
          "interpretation": "Show me the feature sets of all health apps.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.name, GROUP_CONCAT(F.value) AS feature_sets\nFROM Health_Apps H\nJOIN Health_Apps_Functions HAF ON H.appID = HAF.healthAppID\nJOIN Functions F ON HAF.functionID = F.functionID\nGROUP BY H.name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_health_apps_functions/scope_health_apps_functions.sqlite",
      "db_dump": "CREATE TABLE Functions(\n    functionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT);\nCREATE TABLE Health_Apps(\n    appID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price REAL );\nCREATE TABLE Health_Apps_Functions(\n    healthAppID INTEGER,\n    functionID INTEGER,\n    FOREIGN KEY(healthAppID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(functionID) REFERENCES Functions(functionID),\n    PRIMARY KEY(healthAppID, functionID));\nCREATE TABLE Reviews(\n    reviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    rating INTEGER ,\n    comment TEXT,\n    appID INTEGER,\n    userID INTEGER,\n    FOREIGN KEY(appID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(userID) REFERENCES Users(userID));\nCREATE TABLE Users(\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    password TEXT);\n\nINSERT INTO \"Functions\" (functionID,value) VALUES (1,'Activity_Tracking'),(2,'Calorie_Counting'),(3,'Meditation'),(4,'Disease_Symptoms'),(5,'Blood_Pressure_Monitoring');\nINSERT INTO \"Health_Apps\" (appID,name,description,price) VALUES (1,'App1','This is App1',0.99),(2,'App2','This is App2',1.99),(3,'App3','This is App3',2.99),(4,'App4','This is App4',3.99),(5,'App5','This is App5',4.99);\nINSERT INTO \"Health_Apps_Functions\" (healthAppID,functionID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Reviews\" (reviewID,rating,comment,appID,userID) VALUES (1,5,'Great app!',1,1),(2,4,'Good but could use some improvements.',2,2),(3,3,'Worked well overall.',3,3),(4,2,'Not what I expected.',4,4),(5,1,'Didn''t work as promised.',5,5);\nINSERT INTO \"Users\" (userID,username,email,password) VALUES (1,'User1','user1@example.com','password1'),(2,'User2','user2@example.com','password2'),(3,'User3','user3@example.com','password3'),(4,'User4','user4@example.com','password4'),(5,'User5','user5@example.com','password5');\n",
      "question": "For every health app, list the functions they have.",
      "gold_queries": [
        "select health_apps.name , functions.value from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every health app, list the functions associated with them.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT H.name, F.value\nFROM Health_Apps_Functions AS HAF\nJOIN Health_Apps AS H ON HAF.healthAppID = H.appID\nJOIN Functions AS F ON HAF.functionID = F.functionID"
          ]
        },
        {
          "interpretation": "For every health app, list the functionID they have.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT healthAppID, functionID FROM Health_Apps_Functions"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
      "db_dump": "CREATE TABLE Directed_Movies (\n    director_id INTEGER,\n    movie_id INTEGER,\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_name TEXT,\n    birth_year INT\n);\nCREATE TABLE Film_Crews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    crew_name TEXT,\n    role TEXT\n);\nCREATE TABLE Locations_Managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contact_info TEXT\n);\nCREATE TABLE Locations_Managers_Responsibilities (\n    locations_manager_id INTEGER,\n    responsibility_id INTEGER,\n    FOREIGN KEY(locations_manager_id) REFERENCES Locations_Managers(id),\n    FOREIGN KEY(responsibility_id) REFERENCES Responsibilities(id)\n);\nCREATE TABLE Movie_Projects (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    budget REAL\n);\nCREATE TABLE Movies_Cast (\n    movie_id INTEGER,\n    actor_id INTEGER,\n    character_name TEXT,\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id),\n    FOREIGN KEY(actor_id) REFERENCES Actors(id)\n);\nCREATE TABLE Responsibilities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"Directed_Movies\" (director_id,movie_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Directors\" (id,director_name,birth_year) VALUES (1,'Samuel L Jackson',1948),(2,'Denzel Washington',1954),(3,'Tom Hanks',1956),(4,'Robert De Niro',1943),(5,'Anthony Hopkins',1937);\nINSERT INTO \"Film_Crews\" (id,crew_name,role) VALUES (1,'Camera Team','Director of Photography'),(2,'Sound Team','Boom Operator'),(3,'Production Designers','Art Director'),(4,'Costume Department','Costumer'),(5,'Special Effects','Pyrotechnics Specialist');\nINSERT INTO \"Locations_Managers\" (id,name,contact_info) VALUES (1,'John Doe','+1234567890'),(2,'Jane Smith','+9876543210'),(3,'Alice Johnson','+1112223330'),(4,'Bob Brown','+4445556660'),(5,'Charlie Davis','+7778889990');\nINSERT INTO \"Locations_Managers_Responsibilities\" (locations_manager_id,responsibility_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Movie_Projects\" (id,title,release_date,budget) VALUES (1,'The Big Adventure','2022-12-01',10000000.0),(2,'Alien Invasion','2023-06-15',15000000.0),(3,'Love Story','2024-02-14',5000000.0),(4,'Action Thriller','2025-08-20',20000000.0),(5,'Comedy Drama','2026-04-01',7000000.0);\nINSERT INTO \"Movies_Cast\" (movie_id,actor_id,character_name) VALUES (1,1,'Hero'),(1,2,'Villain'),(2,3,'Lead Scientist'),(2,4,'Intergalactic Warrior'),(3,5,'Lonely Heart'),(3,6,'Business Tycoon'),(4,7,'Detective'),(4,8,'Gang Leader'),(5,9,'Small Town Girl'),(5,10,'Wise Old Man');\nINSERT INTO \"Responsibilities\" (id,description) VALUES (1,'Film Permit Acquisition'),(2,'Location Scouting'),(3,'Health & Safety Compliance'),(4,'Contract Negotiation'),(5,'Equipment Coordination');\n",
      "question": "Show me the managers and their responsibilities.",
      "gold_queries": [
        "select locations_managers.name , responsibilities.description from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a table that pairs each locations manager with their corresponding responsibilities.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Locations_Managers.name, Responsibilities.description\nFROM Locations_Managers_Responsibilities\nJOIN Locations_Managers ON Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id\nJOIN Responsibilities ON Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id"
          ]
        },
        {
          "interpretation": "List the details of all managers including the responsibilities they are assigned.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Locations_Managers.name, Locations_Managers.contact_info, Responsibilities.description\nFROM Locations_Managers\nJOIN Locations_Managers_Responsibilities ON Locations_Managers.id = Locations_Managers_Responsibilities.locations_manager_id\nJOIN Responsibilities ON Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id"
          ]
        },
        {
          "interpretation": "Show me the full details of each locations manager and the specific tasks they are responsible for.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LM.id, LM.name, LM.contact_info, R.description\nFROM Locations_Managers LM\nJOIN Locations_Managers_Responsibilities LMR ON LM.id = LMR.locations_manager_id\nJOIN Responsibilities R ON LMR.responsibility_id = R.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
      "db_dump": "CREATE TABLE Directed_Movies (\n    director_id INTEGER,\n    movie_id INTEGER,\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_name TEXT,\n    birth_year INT\n);\nCREATE TABLE Film_Crews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    crew_name TEXT,\n    role TEXT\n);\nCREATE TABLE Locations_Managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contact_info TEXT\n);\nCREATE TABLE Locations_Managers_Responsibilities (\n    locations_manager_id INTEGER,\n    responsibility_id INTEGER,\n    FOREIGN KEY(locations_manager_id) REFERENCES Locations_Managers(id),\n    FOREIGN KEY(responsibility_id) REFERENCES Responsibilities(id)\n);\nCREATE TABLE Movie_Projects (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    budget REAL\n);\nCREATE TABLE Movies_Cast (\n    movie_id INTEGER,\n    actor_id INTEGER,\n    character_name TEXT,\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id),\n    FOREIGN KEY(actor_id) REFERENCES Actors(id)\n);\nCREATE TABLE Responsibilities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"Directed_Movies\" (director_id,movie_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Directors\" (id,director_name,birth_year) VALUES (1,'Samuel L Jackson',1948),(2,'Denzel Washington',1954),(3,'Tom Hanks',1956),(4,'Robert De Niro',1943),(5,'Anthony Hopkins',1937);\nINSERT INTO \"Film_Crews\" (id,crew_name,role) VALUES (1,'Camera Team','Director of Photography'),(2,'Sound Team','Boom Operator'),(3,'Production Designers','Art Director'),(4,'Costume Department','Costumer'),(5,'Special Effects','Pyrotechnics Specialist');\nINSERT INTO \"Locations_Managers\" (id,name,contact_info) VALUES (1,'John Doe','+1234567890'),(2,'Jane Smith','+9876543210'),(3,'Alice Johnson','+1112223330'),(4,'Bob Brown','+4445556660'),(5,'Charlie Davis','+7778889990');\nINSERT INTO \"Locations_Managers_Responsibilities\" (locations_manager_id,responsibility_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Movie_Projects\" (id,title,release_date,budget) VALUES (1,'The Big Adventure','2022-12-01',10000000.0),(2,'Alien Invasion','2023-06-15',15000000.0),(3,'Love Story','2024-02-14',5000000.0),(4,'Action Thriller','2025-08-20',20000000.0),(5,'Comedy Drama','2026-04-01',7000000.0);\nINSERT INTO \"Movies_Cast\" (movie_id,actor_id,character_name) VALUES (1,1,'Hero'),(1,2,'Villain'),(2,3,'Lead Scientist'),(2,4,'Intergalactic Warrior'),(3,5,'Lonely Heart'),(3,6,'Business Tycoon'),(4,7,'Detective'),(4,8,'Gang Leader'),(5,9,'Small Town Girl'),(5,10,'Wise Old Man');\nINSERT INTO \"Responsibilities\" (id,description) VALUES (1,'Film Permit Acquisition'),(2,'Location Scouting'),(3,'Health & Safety Compliance'),(4,'Contract Negotiation'),(5,'Equipment Coordination');\n",
      "question": "What responsibilities are applicable to all managers at the same time?",
      "gold_queries": [
        "SELECT Responsibilities.description  from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id   GROUP BY Locations_Managers_Responsibilities.responsibility_id HAVING COUNT(DISTINCT Locations_Managers_Responsibilities.locations_manager_id) = (SELECT COUNT(*) FROM  Locations_Managers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Locations Managers Responsibilities Description 1 Film Permit Acquisition 2 Location Scouting 3 Health & Safety Compliance 4 Contract Negotiation 5 Equipment Coordination",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.description \nFROM Responsibilities AS T1 \nJOIN Locations_Managers_Responsibilities AS T2 \nON T1.id = T2.responsibility_id \nWHERE T2.locations_manager_id = 5"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "For every hair stylist, give me the styles that they offer",
      "gold_queries": [
        "select hair_stylists.name , styles.style_name from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every hair stylist, present the styles they supply",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT H.name, S.style_name\nFROM Hair_Stylists H\nJOIN Hair_Stylists_Styles HSS ON H.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "For every hair stylist, detail the styles they include in their offerings",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.id, H.name, S.style_name\nFROM Hair_Stylists H\nJOIN Hair_Stylists_Styles HS ON H.id = HS.hairdresser_id\nJOIN Styles S ON HS.style_id = S.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "For each hair stylist, list information on the styles offered (including their descriptions).",
      "gold_queries": [
        "select hair_stylists.name , styles.style_name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each hair stylist, list the names and the styles (with descriptions) that are connected to their id.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name, S.description\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, list their names and the styles described by their offerings.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.description\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, list the ids, names, and the styles they offer (including descriptions for each style).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.id, hs.name, s.style_id, s.style_name\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, list the names and the style names they offer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name \nFROM Hair_Stylists HS \nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id \nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, list the names and the style ids they offer (and describe the styles).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, HSS.style_id, S.style_name, S.description\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, list the names and the style ids they connect with (and the corresponding style descriptions).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, HSS.style_id, S.description \nFROM Hair_Stylists HS \nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id \nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "What styles are available at every hair stylist?",
      "gold_queries": [
        "SELECT Styles.style_name  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)",
        "select hair_stylists.name , styles.style_name from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the intersection of styles offered by all hair stylists?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.style_name\nFROM Styles S\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Hair_Stylists H\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Hair_Stylists_Styles HSS\n        WHERE HSS.hairdresser_id = H.id AND HSS.style_id = S.style_id\n    )\n)"
          ]
        },
        {
          "interpretation": "How many styles are uniformly available across all hair stylists?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_id\nFROM Hair_Stylists_Styles\nGROUP BY style_id\nHAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)"
          ]
        },
        {
          "interpretation": "What styles are available at all hair stylists?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT style_name FROM Styles"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "What is the style description that is in common for all hair stylists?",
      "gold_queries": [
        "SELECT Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the description of the style that is common to all recorded hair stylists?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT description \nFROM Styles \nWHERE style_id IN (\n    SELECT style_id \n    FROM Hair_Stylists_Styles \n    GROUP BY style_id \n    HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)\n)"
          ]
        },
        {
          "interpretation": "What is the description of the style that each hair stylist offers?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Hair_Stylists.name, Styles.description \nFROM Hair_Stylists \nJOIN Hair_Stylists_Styles ON Hair_Stylists.id = Hair_Stylists_Styles.hairdresser_id \nJOIN Styles ON Hair_Stylists_Styles.style_id = Styles.style_id"
          ]
        },
        {
          "interpretation": "What is the detailed description of the style that every hair stylist provides?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description FROM Styles"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "Tell me about the styles every hair stylist offers (with their descriptions).",
      "gold_queries": [
        "SELECT Styles.style_name, Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)",
        "select hair_stylists.name , styles.style_name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the styles and their descriptions offered by each hair stylist individually.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.name AS hair_stylist, s.style_name, s.description\nFROM Hair_Stylists AS hs\nJOIN Hair_Stylists_Styles AS hss ON hs.id = hss.hairdresser_id\nJOIN Styles AS s ON hss.style_id = s.style_id"
          ]
        },
        {
          "interpretation": "Provide a combined list of all styles offered by all hair stylists, including their descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT style_name, description FROM Styles"
          ]
        },
        {
          "interpretation": "For each hair stylist, list the styles and their descriptions in a single line.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, GROUP_CONCAT(S.style_name || ': ' || S.description, ', ') AS styles\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id\nGROUP BY HS.id"
          ]
        },
        {
          "interpretation": "For each hair stylist, give the style name and its description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Hair_Stylists_Styles.hairdresser_id, Styles.style_name, Styles.description\nFROM Hair_Stylists_Styles\nJOIN Styles ON Hair_Stylists_Styles.style_id = Styles.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "What information is there on the styles including their descriptions common to all hair stylists?",
      "gold_queries": [
        "SELECT Styles.style_name, Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What information is there on the styles including their descriptions that are selected by the majority of hair stylists?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.style_name, T1.description \nFROM Styles AS T1 \nJOIN Hair_Stylists_Styles AS T2 \nON T1.style_id = T2.style_id \nGROUP BY T1.style_id \nORDER BY COUNT(T2.hairdresser_id) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "What information is there on the styles including their descriptions that are unique to all hair stylists?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.style_name, S.description\nFROM Styles S\nWHERE S.style_id NOT IN (\n    SELECT HSS.style_id\n    FROM Hair_Stylists_Styles HSS\n    GROUP BY HSS.style_id\n    HAVING COUNT(DISTINCT HSS.hairdresser_id) < (SELECT COUNT(*) FROM Hair_Stylists)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "Give me the styles that are common to all hair stylists",
      "gold_queries": [
        "SELECT Styles.style_name  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the styles that are present in the profiles of all hair stylists",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT style_name\nFROM Styles\nWHERE style_id IN (\n    SELECT style_id\n    FROM Hair_Stylists_Styles\n    GROUP BY style_id\n    HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)\n)"
          ]
        },
        {
          "interpretation": "Identify the overlapping styles in the hairdresser database",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_id\nFROM Hair_Stylists_Styles\nGROUP BY style_id\nHAVING COUNT(hairdresser_id) > 1"
          ]
        },
        {
          "interpretation": "Give me the styles that each hair stylist has in common",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T3.style_name\nFROM Hair_Stylists AS T1\nJOIN Hair_Stylists_Styles AS T2 ON T1.id = T2.hairdresser_id\nJOIN Styles AS T3 ON T3.style_id = T2.style_id\nGROUP BY T1.name, T3.style_name\nHAVING COUNT(T3.style_id) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "For each hair stylist, give me the style description.",
      "gold_queries": [
        "select hair_stylists.name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each hair stylist, give me the number of styles they handle.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hairdresser_id, COUNT(style_id) AS number_of_styles\nFROM Hair_Stylists_Styles\nGROUP BY hairdresser_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, list the description of all styles they are associated with.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT hs.name, s.description\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, give me the name of the style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, give me the style ID along with description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.id, s.style_id, s.description\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "Show me the style description for each hair stylist.",
      "gold_queries": [
        "SELECT Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)",
        "select hair_stylists.name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the descriptions of the styles for every hair stylist.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.description, HS.name \nFROM Styles S \nJOIN Hair_Stylists_Styles HSS ON S.style_id = HSS.style_id \nJOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id"
          ]
        },
        {
          "interpretation": "List the stylist's description for every style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Styles"
          ]
        },
        {
          "interpretation": "Show the style descriptions from the perspective of each hair stylist.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name, S.description\nFROM Hair_Stylists AS HS\nJOIN Hair_Stylists_Styles AS HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles AS S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "Display the stylist's description for each style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.description \nFROM Styles AS T1 \nJOIN Hair_Stylists_Styles AS T2 \nON T1.style_id = T2.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
      "db_dump": "CREATE TABLE Directed_Movies (\n    director_id INTEGER,\n    movie_id INTEGER,\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_name TEXT,\n    birth_year INT\n);\nCREATE TABLE Film_Crews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    crew_name TEXT,\n    role TEXT\n);\nCREATE TABLE Locations_Managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contact_info TEXT\n);\nCREATE TABLE Locations_Managers_Responsibilities (\n    locations_manager_id INTEGER,\n    responsibility_id INTEGER,\n    FOREIGN KEY(locations_manager_id) REFERENCES Locations_Managers(id),\n    FOREIGN KEY(responsibility_id) REFERENCES Responsibilities(id)\n);\nCREATE TABLE Movie_Projects (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    budget REAL\n);\nCREATE TABLE Movies_Cast (\n    movie_id INTEGER,\n    actor_id INTEGER,\n    character_name TEXT,\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id),\n    FOREIGN KEY(actor_id) REFERENCES Actors(id)\n);\nCREATE TABLE Responsibilities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"Directed_Movies\" (director_id,movie_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Directors\" (id,director_name,birth_year) VALUES (1,'Samuel L Jackson',1948),(2,'Denzel Washington',1954),(3,'Tom Hanks',1956),(4,'Robert De Niro',1943),(5,'Anthony Hopkins',1937);\nINSERT INTO \"Film_Crews\" (id,crew_name,role) VALUES (1,'Camera Team','Director of Photography'),(2,'Sound Team','Boom Operator'),(3,'Production Designers','Art Director'),(4,'Costume Department','Costumer'),(5,'Special Effects','Pyrotechnics Specialist');\nINSERT INTO \"Locations_Managers\" (id,name,contact_info) VALUES (1,'John Doe','+1234567890'),(2,'Jane Smith','+9876543210'),(3,'Alice Johnson','+1112223330'),(4,'Bob Brown','+4445556660'),(5,'Charlie Davis','+7778889990');\nINSERT INTO \"Locations_Managers_Responsibilities\" (locations_manager_id,responsibility_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Movie_Projects\" (id,title,release_date,budget) VALUES (1,'The Big Adventure','2022-12-01',10000000.0),(2,'Alien Invasion','2023-06-15',15000000.0),(3,'Love Story','2024-02-14',5000000.0),(4,'Action Thriller','2025-08-20',20000000.0),(5,'Comedy Drama','2026-04-01',7000000.0);\nINSERT INTO \"Movies_Cast\" (movie_id,actor_id,character_name) VALUES (1,1,'Hero'),(1,2,'Villain'),(2,3,'Lead Scientist'),(2,4,'Intergalactic Warrior'),(3,5,'Lonely Heart'),(3,6,'Business Tycoon'),(4,7,'Detective'),(4,8,'Gang Leader'),(5,9,'Small Town Girl'),(5,10,'Wise Old Man');\nINSERT INTO \"Responsibilities\" (id,description) VALUES (1,'Film Permit Acquisition'),(2,'Location Scouting'),(3,'Health & Safety Compliance'),(4,'Contract Negotiation'),(5,'Equipment Coordination');\n",
      "question": "Which responsibilities does each location manager have?",
      "gold_queries": [
        "SELECT Responsibilities.description  from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id   GROUP BY Locations_Managers_Responsibilities.responsibility_id HAVING COUNT(DISTINCT Locations_Managers_Responsibilities.locations_manager_id) = (SELECT COUNT(*) FROM  Locations_Managers)",
        "select locations_managers.name , responsibilities.description from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Each_location_manager_is_responsible_for_Contract_Negotiation",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT lm.name\nFROM Locations_Managers lm\nJOIN Locations_Managers_Responsibilities lmr ON lm.id = lmr.locations_manager_id\nJOIN Responsibilities r ON lmr.responsibility_id = r.id\nWHERE r.description = 'Contract Negotiation'"
          ]
        },
        {
          "interpretation": "Locations_Manager_id_5_Has_responsibility_id_1",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT locations_manager_id, responsibility_id\nFROM Locations_Managers_Responsibilities\nWHERE locations_manager_id = 5 AND responsibility_id = 1"
          ]
        },
        {
          "interpretation": "Each_location_manager_specialized_in_particular_responsibility",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT lm.name, r.description\nFROM Locations_Managers_Responsibilities lmr\nJOIN Locations_Managers lm ON lm.id = lmr.locations_manager_id\nJOIN Responsibilities r ON r.id = lmr.responsibility_id"
          ]
        },
        {
          "interpretation": "Locations_Manager_id_1_Has_responsibility_id_1",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT locations_manager_id, responsibility_id FROM Locations_Managers_Responsibilities WHERE locations_manager_id = 1 AND responsibility_id = 1"
          ]
        },
        {
          "interpretation": "Locations_Manager_id_2_Has_responsibility_id_1",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT locations_manager_id, responsibility_id FROM Locations_Managers_Responsibilities WHERE locations_manager_id = 2 AND responsibility_id = 1"
          ]
        },
        {
          "interpretation": "Locations_manager_id_5_responsibilities Include_Film_Permit_Acquisition_and_Equipment_Coordination",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.description \nFROM Responsibilities r \nJOIN Locations_Managers_Responsibilities lm_r ON r.id = lm_r.responsibility_id \nWHERE lm_r.locations_manager_id = 5"
          ]
        },
        {
          "interpretation": "Locations_Manager_id_3_Has_responsibility_id_1",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT locations_manager_id, responsibility_id\nFROM Locations_Managers_Responsibilities\nWHERE locations_manager_id = 3 AND responsibility_id = 1"
          ]
        },
        {
          "interpretation": "Locations_managers_have_different_responsibilities",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T2.description \nFROM Locations_Managers AS T1 \nJOIN Locations_Managers_Responsibilities AS T3 ON T1.id = T3.locations_manager_id \nJOIN Responsibilities AS T2 ON T3.responsibility_id = T2.id \nGROUP BY T1.name \nHAVING COUNT(DISTINCT T2.description) > 1"
          ]
        },
        {
          "interpretation": "Locations_manager_id_1_specializes_in_Film_Permit_Acquisition",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT lm.id, lm.name, r.description\nFROM Locations_Managers lm\nJOIN Locations_Managers_Responsibilities lm_res ON lm.id = lm_res.locations_manager_id\nJOIN Responsibilities r ON lm_res.responsibility_id = r.id\nWHERE lm.id = 1 AND r.description = 'Film Permit Acquisition'"
          ]
        },
        {
          "interpretation": "Locations_manager_id_5_specializes_in_Equipment_Coordination",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.description \nFROM Responsibilities r \nJOIN Locations_Managers_Responsibilities lmresponsibility ON r.id = lmresponsibility.responsibility_id \nWHERE lmresponsibility.locations_manager_id = 5 AND r.description = 'Equipment Coordination'"
          ]
        },
        {
          "interpretation": "Locations_Manager_id_4_Has_responsibility_id_1",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT locations_manager_id, responsibility_id FROM Locations_Managers_Responsibilities WHERE locations_manager_id = 4 AND responsibility_id = 1"
          ]
        },
        {
          "interpretation": "Locations_manager_id_1_responsibilities Include_Film_Permit_Acquisition_and_Equipment_Coordination",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.description\nFROM Responsibilities R\nJOIN Locations_Managers_Responsibilities LMR ON R.id = LMR.responsibility_id\nWHERE LMR.locations_manager_id = 1 AND R.description IN ('Film Permit Acquisition', 'Equipment Coordination')"
          ]
        },
        {
          "interpretation": "Locations_Manager_id_5_Has_responsibility_id_5",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT locations_manager_id, responsibility_id \nFROM Locations_Managers_Responsibilities \nWHERE locations_manager_id = 5 AND responsibility_id = 5"
          ]
        },
        {
          "interpretation": "Each_location_manager_is_responsible_for_Film_Permit_Acquisition",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT lm.name \nFROM Locations_Managers lm \nJOIN Locations_Managers_Responsibilities lmr ON lm.id = lmr.locations_manager_id \nJOIN Responsibilities r ON lmr.responsibility_id = r.id \nWHERE r.description = 'Film Permit Acquisition'"
          ]
        },
        {
          "interpretation": "Each_location_manager_is_responsible_for_Equipment_Coordination",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT lm.name\nFROM Locations_Managers lm\nJOIN Locations_Managers_Responsibilities lmr ON lm.id = lmr.locations_manager_id\nJOIN Responsibilities r ON lmr.responsibility_id = r.id\nWHERE r.description = 'Equipment Coordination'"
          ]
        }
      ],
      "num_unique_execution_results": 15,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.13333333333333333,
        "f1_score": 0.23529411764705882,
        "num_queries": 15,
        "num_unique_queries": 15,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which company has hired a data analyst?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nWHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Company that has had an employee hired into a role fitting the Data Analyst description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT c.name \nFROM Company c \nJOIN Position p ON c.id = p.companyId \nJOIN Interview i ON p.id = i.positionId \nJOIN Applicant a ON i.applicantId = a.id \nWHERE p.description LIKE '%Analyze data to provide insights and recommendations.%' \nAND i.status = 'Completed'"
          ]
        },
        {
          "interpretation": "Company that has engaged a Data Analyst as an external hire.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.name \nFROM Company C \nJOIN Position P ON C.id = P.companyId \nJOIN Recruitment_Agency RA ON P.recruitmentAgencyId = RA.id \nWHERE P.title = 'Data Analyst'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "What company hired the data analyst and which recruitment agency was used?",
      "gold_queries": [
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which company is employing the individual in the data analyst role and what recruitment agency facilitated this?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.name AS Company, RA.agencyName AS Recruitment_Agency\nFROM Position P\nJOIN Company C ON P.companyId = C.id\nJOIN Recruitment_Agency RA ON P.recruitmentAgencyId = RA.id\nWHERE P.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "What company hired the candidate for the data analyst position and which recruitment agency was involved?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.name AS companyName, RA.agencyName AS recruitmentAgencyName \nFROM Interview I \nJOIN Applicant A ON I.applicantId = A.id \nJOIN Position P ON I.positionId = P.id \nJOIN Company C ON P.companyId = C.id \nJOIN Recruitment_Agency RA ON P.recruitmentAgencyId = RA.id \nWHERE P.title = 'Data Analyst' AND I.status = 'Completed'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Who hires a data analyst?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nWHERE p.title = 'Data Analyst'",
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nWHERE p.title = 'Data Analyst'",
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Company hires a data analyst",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name \nFROM Position AS T1 \nJOIN Company AS T2 \nON T1.companyId = T2.id \nWHERE T1.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "Recruitment Agency hires a data analyst",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Recruitment_Agency.agencyName \nFROM Recruitment_Agency \nJOIN Position ON Recruitment_Agency.id = Position.recruitmentAgencyId \nWHERE Position.title = 'Data Analyst'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 1.0,
        "f1_score": 0.8,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which recruitment agency was used to hire the data analyst?",
      "gold_queries": [
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nWHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which recruitment agency was linked to the Software Engineer position associated with the first recruitment in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.agencyName \nFROM Position AS T1 \nJOIN Recruitment_Agency AS T2 ON T1.recruitmentAgencyId = T2.id \nWHERE T1.title = 'Software Engineer'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which tech companies and recruitment agencies have already conducted the interviews?",
      "gold_queries": [
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE status = 'Completed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which tech companies have conducted interviews for any positions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.name \nFROM Company C \nJOIN Position P ON C.id = P.companyId \nJOIN Interview I ON P.id = I.positionId"
          ]
        },
        {
          "interpretation": "Which recruitment agencies have conducted interviews for Software Engineer positions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Recruitment_Agency.agencyName\nFROM Recruitment_Agency\nJOIN Position ON Recruitment_Agency.id = Position.recruitmentAgencyId\nJOIN Interview ON Position.id = Interview.positionId\nWHERE Position.title = 'Software Engineer'"
          ]
        },
        {
          "interpretation": "Which tech companies and recruitment agencies are involved in interviews for any positions?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT C.name AS CompanyName, RA.agencyName AS RecruitmentAgencyName\nFROM Interview I\nJOIN Position P ON I.positionId = P.id\nJOIN Company C ON P.companyId = C.id\nJOIN Recruitment_Agency RA ON P.recruitmentAgencyId = RA.id"
          ]
        },
        {
          "interpretation": "Which tech companies and recruitment agencies are involved in interviews for Software Engineer positions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.name AS CompanyName, RA.agencyName AS RecruitmentAgencyName\nFROM Interview I\nJOIN Position P ON I.positionId = P.id\nJOIN Company C ON P.companyId = C.id\nJOIN Recruitment_Agency RA ON P.recruitmentAgencyId = RA.id\nWHERE P.title = 'Software Engineer'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which recruitment agencies have already conducted the interviews?",
      "gold_queries": [
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which recruitment agencies have had interviews scheduled with applicants for any positions?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT RA.agencyName\nFROM Recruitment_Agency RA\nJOIN Position P ON RA.id = P.recruitmentAgencyId\nJOIN Interview I ON P.id = I.positionId"
          ]
        },
        {
          "interpretation": "Which recruitment agencies have had their names associated with the interview process for any positions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT recruitmentAgencyId FROM Position WHERE id IN (SELECT positionId FROM Interview)"
          ]
        },
        {
          "interpretation": "Which recruitment agencies have assisted in the interview process for any job positions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Recruitment_Agency.agencyName\nFROM Recruitment_Agency\nJOIN Position ON Recruitment_Agency.id = Position.recruitmentAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which tech companies have already conducted the interviews?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which companies within the tech industry have had interviews scheduled or held?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT C.name \nFROM Company C \nJOIN Position P ON C.id = P.companyId \nJOIN Interview I ON P.id = I.positionId"
          ]
        },
        {
          "interpretation": "How many tech companies have conducted interviews?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT T2.companyId) \nFROM Interview AS T1 \nJOIN Position AS T2 ON T1.positionId = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Who has already conducted the interview?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'",
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'",
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE status = 'Completed'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Person who has conducted and completed interviews.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT E.firstName, E.lastName\nFROM Employee E\nJOIN Interview I ON E.id = I.interviewerId\nWHERE I.status = 'Completed'"
          ]
        },
        {
          "interpretation": "Interviewer has already conducted at least one interview.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT e.firstName, e.lastName\nFROM Employee e\nJOIN Interview i ON e.id = i.interviewerId"
          ]
        },
        {
          "interpretation": "Interviewer has already completed at least one interview.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT E.id, E.firstName, E.lastName\nFROM Employee E\nJOIN Interview I ON E.id = I.interviewerId\nWHERE I.status = 'Completed'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines, their age groups and health conditions",
      "gold_queries": [
        "SELECT Patient.full_name, Health_Condition.condition_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List each patient together with suitable vaccine options, their age group categories, and related medical conditions",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, AG.name, HC.condition_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "List each patient along with suitable vaccines, their age groups, and health conditions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, AG.name AS age_group, HC.condition_name\nFROM Patient P\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Vaccine V ON V.age_group_id = P.age_group_id AND V.health_condition_id = (\n    SELECT HC.id\n    FROM Health_Condition HC\n    WHERE HC.condition_name = MR.diagnosis\n    LIMIT 1\n)\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "List each patient along with appropriate vaccine suggestions, their age group classifications, and associated health conditions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, AG.name AS age_group, HC.condition_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nLEFT JOIN Vaccine V ON P.age_group_id = V.age_group_id\nLEFT JOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines and their health conditions",
      "gold_queries": [
        "SELECT Patient.full_name, Health_Condition.condition_name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN  Health_Condition ON Vaccine.Health_Condition_Id = Health_Condition.Id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List each patient along with vaccines appropriate for their age group and any health conditions they have",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, HC.condition_name\nFROM Patient P\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN Health_Condition HC ON MR.diagnosis LIKE '%' || HC.condition_name || '%'\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nWHERE HC.id = V.health_condition_id OR HC.condition_name IS NULL"
          ]
        },
        {
          "interpretation": "List each patient along with vaccines suitable for their age and any associated health conditions",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, HC.condition_name\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nLEFT JOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "List each patient along with vaccines suitable for their age group and health conditions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.full_name, v.vaccine_name\nFROM Patient p\nJOIN Age_Group ag ON p.age_group_id = ag.id\nJOIN Vaccine v ON ag.id = v.age_group_id\nJOIN MedicalRecord mr ON p.patient_id = mr.patient_id\nJOIN Health_Condition hc ON v.health_condition_id = hc.id"
          ]
        },
        {
          "interpretation": "List each patient along with vaccines appropriate for their age and medical conditions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id\nJOIN (\n    SELECT patient_id, GROUP_CONCAT(diagnosis) AS diagnoses\n    FROM MedicalRecord\n    GROUP BY patient_id\n) MD ON P.patient_id = MD.patient_id\nWHERE MD.diagnoses LIKE '%' || HC.condition_name || '%'"
          ]
        },
        {
          "interpretation": "List each patient along with vaccines that are recommended given their age and medical conditions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Patient.full_name, Vaccine.vaccine_name\nFROM Patient\nJOIN MedicalRecord ON Patient.patient_id = MedicalRecord.patient_id\nJOIN Health_Condition ON MedicalRecord.diagnosis = Health_Condition.condition_name\nJOIN Vaccine ON Patient.age_group_id = Vaccine.age_group_id AND Health_Condition.id = Vaccine.health_condition_id"
          ]
        },
        {
          "interpretation": "List each patient along with vaccines that are suitable for their age and any health conditions they might have",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nLEFT JOIN Age_Group AG ON P.age_group_id = AG.id\nLEFT JOIN Vaccine V ON V.age_group_id = AG.id OR V.health_condition_id IN (\n    SELECT HC.id\n    FROM Health_Condition HC\n    JOIN MedicalRecord MR ON HC.id = V.health_condition_id AND MR.patient_id = P.patient_id\n)"
          ]
        },
        {
          "interpretation": "List each patient along with vaccines that match their age group and any health concerns they have",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, HC.condition_name\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON MR.diagnosis LIKE '%' || HC.condition_name || '%'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines and their age groups",
      "gold_queries": [
        "SELECT Patient.full_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List each patient's age group and the vaccines suitable for that age group",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.full_name, T3.name AS age_group, T2.vaccine_name\nFROM Patient AS T1\nJOIN Vaccine AS T2 ON T1.age_group_id = T2.age_group_id\nJOIN Age_Group AS T3 ON T3.id = T1.age_group_id"
          ]
        },
        {
          "interpretation": "List each patient alongside their age group and applicable vaccines based on their health conditions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, AG.name AS age_group, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id AND P.age_group_id = V.age_group_id\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id AND MR.diagnosis LIKE '%' || HC.condition_name || '%'"
          ]
        },
        {
          "interpretation": "List each patient with their age group and vaccines that are appropriate for their health status and age range",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, AG.name AS age_group, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON MR.diagnosis = HC.condition_name\nJOIN Vaccine V ON V.age_group_id = P.age_group_id AND V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "List each patient with their age group and vaccines that are suitable for their health conditions and age group",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, AG.name AS age_group, V.vaccine_name\nFROM Patient P\nLEFT JOIN Age_Group AG ON P.age_group_id = AG.id\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN Health_Condition HC ON MR.diagnosis = HC.condition_name\nLEFT JOIN Vaccine V ON AG.id = V.age_group_id AND HC.id = V.health_condition_id"
          ]
        },
        {
          "interpretation": "List patients with their age groups and vaccines that are appropriate for their health issues and age category",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    P.full_name,\n    AG.name AS age_group,\n    V.vaccine_name\nFROM \n    Patient P\nJOIN \n    Age_Group AG ON P.age_group_id = AG.id\nLEFT JOIN \n    MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN \n    Health_Condition HC ON MR.diagnosis LIKE '%' || HC.condition_name || '%'\nLEFT JOIN \n    Vaccine V ON P.age_group_id = V.age_group_id AND HC.id = V.health_condition_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each age group and health condition.",
      "gold_queries": [
        "SELECT Health_Condition.condition_name, Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Age_Group.Name, Health_Condition.condition_name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the total number of vaccines for each age group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.id) \nFROM Vaccine \nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id \nGROUP BY Age_Group.name"
          ]
        },
        {
          "interpretation": "List the total number of vaccines appropriate for each age group and for each health condition separately.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name AS Age_Group, COUNT(Vaccine.id) AS Total_Vaccines\nFROM Age_Group\nJOIN Vaccine ON Age_Group.id = Vaccine.age_group_id\nGROUP BY Age_Group.name",
            "SELECT Health_Condition.condition_name AS Health_Condition, COUNT(Vaccine.id) AS Total_Vaccines\nFROM Health_Condition\nJOIN Vaccine ON Health_Condition.id = Vaccine.health_condition_id\nGROUP BY Health_Condition.condition_name"
          ]
        },
        {
          "interpretation": "List the number of vaccines that are applicable to patients with each health condition based on age groups.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Health_Condition.condition_name, Age_Group.name, COUNT(Vaccine.id) AS vaccine_count\nFROM Vaccine\nJOIN Health_Condition ON Vaccine.health_condition_id = Health_Condition.id\nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id\nGROUP BY Health_Condition.condition_name, Age_Group.name"
          ]
        },
        {
          "interpretation": "List the count of vaccines that are compatible with each health condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT health_condition_id, COUNT(*) FROM Vaccine GROUP BY health_condition_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each target",
      "gold_queries": [
        "SELECT Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id\r\nGROUP BY Age_Group.Name",
        "SELECT Health_Condition.condition_name, Count(*) FROM Health_Condition INNER JOIN Vaccine ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Health_Condition.condition_name",
        "SELECT Health_Condition.condition_name, Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Age_Group.Name, Health_Condition.condition_name"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the total number of vaccines for patients with Diabetes",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT v.id) \nFROM Vaccine v \nJOIN Health_Condition h ON v.health_condition_id = h.id \nWHERE h.condition_name = 'Diabetes'"
          ]
        },
        {
          "interpretation": "List the total number of vaccines for each specified vaccine type",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT vaccine_name, COUNT(*) FROM Vaccine GROUP BY vaccine_name"
          ]
        },
        {
          "interpretation": "List the total number of vaccines grouped by patient full name",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, COUNT(V.id) AS total_vaccines\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nGROUP BY P.full_name"
          ]
        },
        {
          "interpretation": "List the total number of vaccines for each age group",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.id) AS total_vaccines\nFROM Age_Group\nJOIN Vaccine ON Age_Group.id = Vaccine.age_group_id\nGROUP BY Age_Group.id"
          ]
        },
        {
          "interpretation": "List the total number of vaccines for patients in the 0-4 age group",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Vaccine AS V JOIN Age_Group AS AG ON V.age_group_id = AG.id WHERE AG.name = '0-4'"
          ]
        },
        {
          "interpretation": "List the total number of vaccines that are appropriate for patients with specific health conditions",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(v.id) AS total_vaccines, h.condition_name\nFROM Vaccine v\nJOIN Health_Condition h ON v.health_condition_id = h.id\nGROUP BY h.condition_name"
          ]
        },
        {
          "interpretation": "List the total number of vaccines for patients in specific age groups and health conditions",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AG.name AS age_group, HC.condition_name, COUNT(V.id) AS total_vaccines\nFROM Vaccine V\nJOIN Age_Group AG ON V.age_group_id = AG.id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id\nGROUP BY AG.name, HC.condition_name"
          ]
        },
        {
          "interpretation": "List the total number of vaccines for patients 18 years and older",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Vaccine V JOIN Age_Group AG ON V.age_group_id = AG.id WHERE AG.name = '18+'"
          ]
        },
        {
          "interpretation": "List the total number of vaccines recommended for each medical diagnosis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(v.id) AS vaccine_count, m.diagnosis\nFROM Vaccine v\nJOIN Health_Condition hc ON v.health_condition_id = hc.id\nJOIN MedicalRecord m ON hc.id = m.diagnosis\nGROUP BY m.diagnosis"
          ]
        },
        {
          "interpretation": "List the total number of vaccines for each health condition",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT health_condition_id, COUNT(*) \nFROM Vaccine \nGROUP BY health_condition_id"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3,
        "f1_score": 0.4615384615384615,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each age group.",
      "gold_queries": [
        "SELECT Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id\r\nGROUP BY Age_Group.Name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the total number of vaccines specifically for each age group that do not have any health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.vaccine_name)\nFROM Vaccine\nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id\nWHERE Vaccine.health_condition_id IS NULL\nGROUP BY Age_Group.name"
          ]
        },
        {
          "interpretation": "List the total number of vaccines suitable for each age group irrespective of health conditions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.id) \nFROM Age_Group \nJOIN Vaccine ON Age_Group.id = Vaccine.age_group_id \nGROUP BY Age_Group.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each health condition.",
      "gold_queries": [
        "SELECT Health_Condition.condition_name, Count(*) FROM Health_Condition INNER JOIN Vaccine ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Health_Condition.condition_name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the quantity of suitable vaccines for all health conditions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Health_Condition.condition_name, COUNT(Vaccine.health_condition_id) AS vaccine_quantity\nFROM Health_Condition\nLEFT JOIN Vaccine ON Health_Condition.id = Vaccine.health_condition_id\nGROUP BY Health_Condition.condition_name"
          ]
        },
        {
          "interpretation": "Display the quantity of vaccines applicable for each health condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT health_condition_id, COUNT(*) FROM Vaccine GROUP BY health_condition_id"
          ]
        },
        {
          "interpretation": "Display the count of all vaccines that are appropriate for every health condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*)\nFROM Vaccine\nWHERE health_condition_id IS NOT NULL"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines and what they target",
      "gold_queries": [
        "SELECT Patient.full_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID",
        "SELECT Patient.full_name, Health_Condition.condition_name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN  Health_Condition ON Vaccine.Health_Condition_Id = Health_Condition.Id",
        "SELECT Patient.full_name, Health_Condition.condition_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List patients with vaccines that target their health status and age category",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id\nWHERE HC.condition_name = MR.diagnosis"
          ]
        },
        {
          "interpretation": "List patients with vaccines that target their age range and any health issues",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, HC.condition_name\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "List patients with vaccines that align with their health status and age category",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, H.condition_name, AG.name AS age_group\nFROM Patient P\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition H ON MR.diagnosis LIKE '%' || H.condition_name || '%'\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON P.age_group_id = V.age_group_id AND H.id = V.health_condition_id"
          ]
        },
        {
          "interpretation": "List patients with vaccines that target their health issues and age group",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON MR.diagnosis LIKE '%' || HC.condition_name || '%'\nJOIN Vaccine V ON HC.id = V.health_condition_id AND P.age_group_id = V.age_group_id"
          ]
        },
        {
          "interpretation": "List patients with vaccines that match their age group and any related health status",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, H.condition_name\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nJOIN Health_Condition H ON V.health_condition_id = H.id\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nWHERE MR.diagnosis LIKE '%' || H.condition_name || '%'"
          ]
        },
        {
          "interpretation": "List each patient along with vaccines that are appropriate for their age group and any related health conditions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN Health_Condition HC ON V.health_condition_id = HC.id AND HC.id IN (\n    SELECT DISTINCT SUBSTR(diagnosis, 1, INSTR(diagnosis, ' ') - 1) AS condition_id\n    FROM MedicalRecord\n    WHERE patient_id = P.patient_id\n)"
          ]
        },
        {
          "interpretation": "List each patient along with vaccines they need based on their health conditions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN MedicalRecord M ON P.patient_id = M.patient_id\nJOIN Health_Condition H ON M.diagnosis LIKE '%' || H.condition_name || '%'\nJOIN Vaccine V ON H.id = V.health_condition_id"
          ]
        },
        {
          "interpretation": "List each patient along with vaccines that match their age group or health conditions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Patient.full_name, Vaccine.vaccine_name\nFROM Patient\nJOIN MedicalRecord ON Patient.patient_id = MedicalRecord.patient_id\nJOIN Health_Condition ON MedicalRecord.diagnosis = Health_Condition.condition_name\nJOIN Vaccine ON (Patient.age_group_id = Vaccine.age_group_id OR Health_Condition.id = Vaccine.health_condition_id)"
          ]
        },
        {
          "interpretation": "List patients with vaccines that match their health status and age range",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.full_name, v.vaccine_name, hc.condition_name, ag.name AS age_group\nFROM Patient p\nJOIN Age_Group ag ON p.age_group_id = ag.id\nJOIN Health_Condition hc ON p.patient_id = (\n    SELECT mr.patient_id\n    FROM MedicalRecord mr\n    WHERE mr.patient_id = p.patient_id\n)\nJOIN Vaccine v ON v.age_group_id = ag.id AND v.health_condition_id = hc.id"
          ]
        },
        {
          "interpretation": "List patients with vaccines that are targeted at their health conditions and age group",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name\nFROM Patient P\nJOIN MedicalRecord M ON P.patient_id = M.patient_id\nJOIN Vaccine V ON P.age_group_id = V.age_group_id AND M.diagnosis LIKE '%' || H.condition_name || '%'\nJOIN Health_Condition H ON V.health_condition_id = H.id"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.2,
        "f1_score": 0.30769230769230765,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails, along with their field of study and degree program.",
      "gold_queries": [
        "SELECT Email, Field_Of_Study, Degree_Program FROM Students"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the fields of study and degree programs, along with emails of all students.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Field_Of_Study, Degree_Program, Email FROM Students"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails, along with their field of study.",
      "gold_queries": [
        "SELECT Email, Field_Of_Study FROM Students"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the emails together with their field_of_study for all individuals in the student table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Email, Field_Of_Study FROM Students"
          ]
        },
        {
          "interpretation": "Provide a concatenated string of email and field_of_study for all students.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Email || ' ' || Field_Of_Study AS Email_Field_Of_Study FROM Students"
          ]
        },
        {
          "interpretation": "Get the data of email and field_of_study for all enrolled students.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.Email, S.Field_Of_Study \nFROM Students S \nJOIN Enrolments E ON S.ID = E.StudentID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails, along with their degree program.",
      "gold_queries": [
        "SELECT Email, Degree_Program FROM Students"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the emails and degree programs of all students.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Email, Degree_Program FROM Students"
          ]
        },
        {
          "interpretation": "Display the email addresses and degree programs of all enrolled students.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT S.Email, S.Degree_Program \nFROM Students S \nJOIN Enrolments E ON S.ID = E.StudentID"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List students born after 1990, along with their field of study.",
      "gold_queries": [
        "SELECT fullname, Field_Of_Study FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List students born on a date greater than 1990, along with their Field_Of_Study.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "List students whose BirthDate is strictly after 1990, along with their Field_Of_Study.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study\nFROM Students\nWHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "List students whose BirthDate is after January 1, 1990, along with their Field_Of_Study.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "List students born in the year following 1990, along with their Field_Of_Study.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study FROM Students WHERE BirthDate LIKE '1991%'"
          ]
        },
        {
          "interpretation": "List students born in a year later than 1990, along with their Field_Of_Study.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails and indicate what they are studying.",
      "gold_queries": [
        "SELECT Email, Field_Of_Study FROM Students",
        "SELECT Email, Degree_Program FROM Students",
        "SELECT Email, Field_Of_Study, Degree_Program FROM Students"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all student emails and degree programs.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Email, Degree_Program FROM Students"
          ]
        },
        {
          "interpretation": "List all student emails and their study focuses.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Email, Field_Of_Study FROM Students"
          ]
        },
        {
          "interpretation": "List all student emails and enrolled degree tracks.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Students.Email, Students.Degree_Program\nFROM Students\nJOIN Enrolments ON Students.ID = Enrolments.StudentID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.6666666666666666,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List students born after 1990, along with their field of study and degree program.",
      "gold_queries": [
        "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List students born after 1990, along with their field of study and the scholarly pursuits they are engaged in.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "List students born after 1990, along with their field of study and the degrees they have earned.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "List students born after 1990, along with their field of study and the courses they are enrolled in.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.fullname, S.Field_Of_Study, C.Title\nFROM Students S\nJOIN Enrolments E ON S.ID = E.StudentID\nJOIN Courses C ON E.CourseID = C.ID\nWHERE S.BirthDate > '1990-01-01'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List students born after 1990, along with their degree program.",
      "gold_queries": [
        "SELECT fullname, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show students who were born after the year 1990, listing their degree programs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Degree_Program FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "Show students born after 1990 and their corresponding degree programs.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT fullname, Degree_Program FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Provide the birth year and degree program for students born after 1990.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BirthDate, Degree_Program FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "List the birthdates and degree programs of students born after 1990.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BirthDate, Degree_Program FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Identify students born after 1990 and describe their degree programs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Degree_Program FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Present the students born after 1990 along with their degree programs they are enrolled in.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Degree_Program FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all the students that are born after 1990 and what they study.",
      "gold_queries": [
        "SELECT fullname, Field_Of_Study FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'",
        "SELECT fullname, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'",
        "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Output the names of students born beyond 1990 and their enrolled fields.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "Extract students born after 1990 and their respective study fields.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BirthDate, Field_Of_Study FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "Provide a list of students born in years greater than 1990 and their fields of study.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study \nFROM Students \nWHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Identify students born subsequent to 1990 and what field they are studying.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "Show developmental milestones and child's age in order of the age",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge",
        "SELECT MilestoneRecords.cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge",
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display physical and cognitive milestones alongside the child's age, sorted in the order of the child's age",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, childAge FROM MilestoneRecords ORDER BY childAge"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 1.0,
        "f1_score": 0.5,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "show physical and cognitive milestones and child age in age ascending order",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "present physical and cognitive milestones along with the child's age in an age-ascending order",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, childAge \nFROM MilestoneRecords \nORDER BY childAge ASC"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "show cognitive milestones and child age in age ascending order",
      "gold_queries": [
        "SELECT MilestoneRecords.cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "output cognitive milestones and child age in ascending order of the child's age value",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, childAge FROM MilestoneRecords ORDER BY childAge ASC"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "show physical milestones and child age in age ascending order",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "show physical milestones and child age in ascending order of child age",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT physicalMilestones, childAge FROM MilestoneRecords ORDER BY childAge ASC"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "Show how many students have achieved each developmental milestone",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, Count(*) as Pupil_Count FROM MileStoneRecords",
        "SELECT MilestoneRecords.cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords",
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the count of students who have achieved each cognitive milestone",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, COUNT(DISTINCT studentId) FROM MilestoneRecords GROUP BY cognitiveMilestones"
          ]
        },
        {
          "interpretation": "Display the count of students who have achieved milestones related to playing sports and writing short stories",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(studentId) \nFROM MilestoneRecords \nWHERE physicalMilestones = 'Playing sports' \nAND cognitiveMilestones = 'Writing short stories'"
          ]
        },
        {
          "interpretation": "Show how many students have achieved any milestone in cognitive development",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT studentId) FROM MilestoneRecords"
          ]
        },
        {
          "interpretation": "Show the count of students who have achieved milestones for each class",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.className, COUNT(DISTINCT M.studentId) \nFROM Classes C \nJOIN Enrollments E ON C.classId = E.classId \nJOIN MilestoneRecords M ON E.studentId = M.studentId \nGROUP BY C.className"
          ]
        },
        {
          "interpretation": "Show the number of students for each combination of physical and cognitive milestones",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, COUNT(studentId) AS numberOfStudents\nFROM MilestoneRecords\nGROUP BY physicalMilestones, cognitiveMilestones"
          ]
        },
        {
          "interpretation": "Show the count of students who have achieved each physical milestone",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, COUNT(studentId) AS studentCount\nFROM MilestoneRecords\nGROUP BY physicalMilestones"
          ]
        },
        {
          "interpretation": "Show the count of students who have achieved each milestone mentioned in physicalMilestones or cognitiveMilestones",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, COUNT(*) FROM MilestoneRecords GROUP BY physicalMilestones\nUNION\nSELECT cognitiveMilestones, COUNT(*) FROM MilestoneRecords GROUP BY cognitiveMilestones"
          ]
        },
        {
          "interpretation": "Show the count of students who have achieved milestones for each grade level",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT childAge, COUNT(studentId) AS studentCount\nFROM MilestoneRecords\nGROUP BY childAge"
          ]
        },
        {
          "interpretation": "Show the count of students who have achieved milestones for each teacher",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.teacherName, COUNT(DISTINCT T1.studentId) AS studentCount\nFROM MilestoneRecords T1\nJOIN Enrollments T2 ON T1.studentId = T2.studentId\nJOIN Classes T3 ON T2.classId = T3.classId\nGROUP BY T3.teacherName"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "List the physical and cognitive milestones and the number of students that have achieved it.",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the physical milestones and the number of students that have achieved them, grouped by cognitive milestones.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, physicalMilestones, COUNT(studentId) \nFROM MilestoneRecords \nGROUP BY cognitiveMilestones, physicalMilestones"
          ]
        },
        {
          "interpretation": "List the number of students who have achieved a specific physical milestone or a specific cognitive milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT studentId) \nFROM MilestoneRecords \nWHERE physicalMilestones = 'Specific Physical Milestone' \n   OR cognitiveMilestones = 'Specific Cognitive Milestone'"
          ]
        },
        {
          "interpretation": "List the physical milestones and the number of students associated with each, without considering cognitive milestones.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, COUNT(studentId) FROM MilestoneRecords GROUP BY physicalMilestones"
          ]
        },
        {
          "interpretation": "List the cognitive milestones and the number of students associated with each, without considering physical milestones.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, COUNT(studentId) \nFROM MilestoneRecords \nGROUP BY cognitiveMilestones"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "List the cognitive milestones and the number of students that have achieved it.",
      "gold_queries": [
        "SELECT MilestoneRecords.cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the cognitive milestones and the number of students who are present on '2022-09-01' that have achieved each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT mr.cognitiveMilestones, COUNT(DISTINCT a.studentId) AS numberOfStudents\nFROM MilestoneRecords mr\nJOIN Attendance a ON mr.studentId = a.studentId\nWHERE a.dateAttended = '2022-09-01' AND a.isPresent = 1\nGROUP BY mr.cognitiveMilestones"
          ]
        },
        {
          "interpretation": "List the cognitive milestones and the number of students in grade 1 that have achieved each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, COUNT(studentId) \nFROM MilestoneRecords \nWHERE childAge BETWEEN 6 AND 7 \nGROUP BY cognitiveMilestones"
          ]
        },
        {
          "interpretation": "List the cognitive milestones and the number of students who have cheated on a test that have achieved each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.cognitiveMilestones, COUNT(DISTINCT T1.studentId) AS numberOfStudents\nFROM DisciplineLogs AS T1\nJOIN MilestoneRecords AS T2 ON T1.studentId = T2.studentId\nWHERE T1.reasonForDiscipline = 'Cheating on a test'\nGROUP BY T2.cognitiveMilestones"
          ]
        },
        {
          "interpretation": "List the cognitive milestones and the number of students who have damaged school property that have achieved each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.cognitiveMilestones, COUNT(T2.studentId) AS numberOfStudents\nFROM MilestoneRecords AS T1\nJOIN DisciplineLogs AS T2 ON T1.studentId = T2.studentId\nWHERE T2.reasonForDiscipline = 'Damaging school property'\nGROUP BY T1.cognitiveMilestones"
          ]
        },
        {
          "interpretation": "List the cognitive milestones and the number of students who have been late to school that have achieved each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.cognitiveMilestones, COUNT(DISTINCT T1.studentId) \nFROM DisciplineLogs AS T1 \nJOIN MilestoneRecords AS T2 \nON T1.studentId = T2.studentId \nWHERE T1.reasonForDiscipline = 'Late assignment submission' \nGROUP BY T2.cognitiveMilestones"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "List the physical milestones and the number of students that have achieved it.",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Physical milestones along with the quantity of students achieving each.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, COUNT(studentId) AS numberOfStudents\nFROM MilestoneRecords\nGROUP BY physicalMilestones"
          ]
        },
        {
          "interpretation": "Milestones achieved by each student and the total count of such milestones across all students.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT firstName, lastName, COUNT(recordId) as totalMilestones\nFROM Students\nJOIN MilestoneRecords ON Students.id = MilestoneRecords.studentId\nGROUP BY firstName, lastName\nUNION ALL\nSELECT 'Total', '', COUNT(recordId) as totalMilestones\nFROM MilestoneRecords"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "What engineering firm(s) are located at the intersection of Elm Street and Pine Avenue, and which civil engineers work there?",
      "gold_queries": [
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What engineering firm(s) has oversight of Elm Street and Pine Avenue, and which civil engineers are involved in those oversight roles?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Engineering_Firm, Civil_Engineer\nFROM CivilEngineers\nWHERE Intersection = 'Elm St & Pine Ave'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which civil engineer(s) work at the intersection of Elm Street and Pine Avenue?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which civil engineer(s) is responsible for the intersection of Elm St and Pine Ave?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which engineering firm has the biggest budget?",
      "gold_queries": [
        "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The engineering firm associated with the maximum budget project",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers WHERE Budget = (SELECT MAX(Budget) FROM CivilEngineers)"
          ]
        },
        {
          "interpretation": "CivilEngineers.Engineering_Firm",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Who works at the intersection of Elm Street and Pine Avenue?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';",
        "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';",
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Engineering_Firm employed in the project at Elm St & Pine Ave",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Civil_Engineer working on the project at Elm St & Pine Ave",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 1.0,
        "f1_score": 0.8,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which civil engineer works in the company with the biggest budget?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which civil engineer is associated with the project having the maximum budget?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Budget = (SELECT MAX(Budget) FROM CivilEngineers)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "What engineering firm(s) are located at the intersection of Elm Street and Pine Avenue?",
      "gold_queries": [
        "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which civil engineer works for the company with the biggest budget and which company is it?",
      "gold_queries": [
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which civil engineer's project has the maximum budget set, and what is that budget?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer, MAX(Budget) AS Budget\nFROM CivilEngineers"
          ]
        },
        {
          "interpretation": "What is the name of the civil engineer and the engineering firm that have the project with the highest budget?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Budget = (SELECT MAX(Budget) FROM CivilEngineers)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Who has the biggest budget?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;",
        "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;",
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Project with the biggest budget",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm, ProjectID FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Road construction project with the biggest budget",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ProjectID, Intersection, Civil_Engineer, Engineering_Firm, StartDate, EndDate, Budget\nFROM CivilEngineers\nORDER BY Budget DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Civil Engineer with the biggest budget",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer, Engineering_Firm, MAX(Budget) AS Budget FROM CivilEngineers GROUP BY Civil_Engineer, Engineering_Firm ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Engineering firm with the biggest total budget across all projects",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers GROUP BY Engineering_Firm ORDER BY SUM(Budget) DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, mobile apps that they were published on and author names.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nMobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show a detailed table of all articles, the mobile apps their news agencies use, and the authors of each article.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Article.title, Mobile_App.name AS mobileAppName, Author.fullname AS authorName \nFROM Article \nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id \nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id \nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId \nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Display the details of all articles, the mobile apps their news agencies are linked to, and the authors of the articles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.id, Article.title, Article.content, Article.publishedDate, Mobile_App.name AS mobileAppName, Author.fullname AS authorName\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all the mobile apps with their published articles and dates.",
      "gold_queries": [
        "SELECT \r\nMobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Mobile_App\r\nJOIN News_Agency ON News_Agency.id = Mobile_App.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.MobileAppID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the mobile apps and the articles published by the news agencies they refer to, including the dates of publication.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.name AS mobile_app_name, T3.title AS article_title, T3.publishedDate AS publication_date\nFROM Mobile_App AS T1\nJOIN News_Agency AS T2 ON T1.id = T2.mobileAppId\nJOIN Article AS T3 ON T2.id = T3.newsAgencyId"
          ]
        },
        {
          "interpretation": "List all the mobile apps, the news agencies they are linked to, and the articles those news agencies published with their publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Mobile_App.name AS mobileAppName, News_Agency.name AS newsAgencyName, Article.title AS articleTitle, Article.publishedDate AS articlePublishedDate\nFROM Mobile_App\nJOIN News_Agency ON Mobile_App.id = News_Agency.mobileAppId\nJOIN Article ON News_Agency.id = Article.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all the websites, their mobile apps and their published articles and dates.",
      "gold_queries": [
        "SELECT \r\nWebsite.name,\r\nWebsite.url, Mobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the websites, their mobile applications, and the articles they published, including the publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name AS websiteName, m.name AS mobileAppName, a.title AS articleTitle, a.publishedDate\nFROM Website w\nJOIN News_Agency na ON w.id = na.websiteId\nJOIN Mobile_App m ON na.mobileAppId = m.id\nJOIN Article a ON na.id = a.newsAgencyId"
          ]
        },
        {
          "interpretation": "List the details of all the websites and their associated mobile apps, along with the articles they have published and their publication dates.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT W.name AS websiteName, W.url, MA.name AS mobileAppName, A.title AS articleTitle, A.publishedDate\nFROM Website W\nJOIN News_Agency NA ON W.id = NA.websiteId\nJOIN Mobile_App MA ON NA.mobileAppId = MA.id\nJOIN Article A ON NA.id = A.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all platforms and articles published there along with the published date.",
      "gold_queries": [
        "SELECT \r\nWebsite.name,\r\nWebsite.url,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID",
        "SELECT \r\nMobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Mobile_App\r\nJOIN News_Agency ON News_Agency.id = Mobile_App.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.MobileAppID",
        "SELECT \r\nWebsite.name,\r\nWebsite.url, Mobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all mobile apps and their articles along with the published date, and then list all news agencies and their articles along with the published date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Mobile_App.name, Article.title, Article.publishedDate\nFROM Mobile_App\nJOIN News_Agency ON Mobile_App.id = News_Agency.mobileAppId\nJOIN Article ON News_Agency.id = Article.newsAgencyId\nUNION\nSELECT News_Agency.name, Article.title, Article.publishedDate\nFROM News_Agency\nJOIN Article ON News_Agency.id = Article.newsAgencyId"
          ]
        },
        {
          "interpretation": "List all mobile apps, including their associated news agencies and websites, and the articles published there along with the published date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    ma.name AS mobile_app_name,\n    na.name AS news_agency_name,\n    w.name AS website_name,\n    a.title AS article_title,\n    a.publishedDate AS published_date\nFROM \n    Mobile_App ma\nJOIN \n    News_Agency na ON ma.id = na.mobileAppId\nJOIN \n    Website w ON na.websiteId = w.id\nJOIN \n    Article a ON na.id = a.newsAgencyId"
          ]
        },
        {
          "interpretation": "List all news agencies and their articles along with the published date, and then list all websites and their articles along with the published date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT News_Agency.name AS News_Agency, Article.title AS Article_Title, Article.publishedDate AS Published_Date\nFROM News_Agency\nJOIN Article ON News_Agency.id = Article.newsAgencyId\nUNION ALL\nSELECT Website.name AS Website, Article.title AS Article_Title, Article.publishedDate AS Published_Date\nFROM Website\nJOIN News_Agency ON Website.id = News_Agency.websiteId\nJOIN Article ON News_Agency.id = Article.newsAgencyId"
          ]
        },
        {
          "interpretation": "List all websites and their articles along with the published date; then for each website, list the associated news agency and its articles with the published dates; finally, for each news agency, list the associated mobile app and its articles with the published dates.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 0.3333333333333333,
            "f1_score": 0.3333333333333333,
            "num_queries": 3,
            "num_unique_queries": 3,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT NA.name AS newsAgency, A.title AS article, A.publishedDate\nFROM News_Agency NA\nJOIN Article A ON NA.id = A.newsAgencyId",
            "SELECT W.name AS website, A.title AS article, A.publishedDate\nFROM Website W\nJOIN News_Agency NA ON W.id = NA.websiteId\nJOIN Article A ON NA.id = A.newsAgencyId",
            "SELECT MA.name AS mobileApp, A.title AS article, A.publishedDate\nFROM Mobile_App MA\nJOIN News_Agency NA ON MA.id = NA.mobileAppId\nJOIN Article A ON NA.id = A.newsAgencyId"
          ]
        },
        {
          "interpretation": "List all mobile apps and their articles along with the published date, and then list all websites and their articles along with the published date.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 0.5,
            "f1_score": 0.4,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.name AS mobile_app_name, T1.title, T1.publishedDate\nFROM Article AS T1\nJOIN News_Agency AS T2 ON T1.newsAgencyId = T2.id\nJOIN Mobile_App AS T3 ON T2.mobileAppId = T3.id",
            "SELECT T4.name AS website_name, T1.title, T1.publishedDate\nFROM Article AS T1\nJOIN News_Agency AS T2 ON T1.newsAgencyId = T2.id\nJOIN Website AS T4 ON T2.websiteId = T4.id"
          ]
        },
        {
          "interpretation": "List all websites, with their articles and published dates; then for each website, list the associated news agency and its articles with the published dates; finally, for each news agency, list the associated mobile app and its articles with the published dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 3,
            "num_unique_queries": 3,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name AS websiteName, a.title AS articleTitle, a.publishedDate\nFROM Website w\nJOIN News_Agency na ON w.id = na.websiteId\nJOIN Article a ON na.id = a.newsAgencyId",
            "SELECT w.name AS websiteName, na.name AS newsAgencyName, ma.name AS mobileAppName, a.title AS articleTitle, a.publishedDate\nFROM Website w\nJOIN News_Agency na ON w.id = na.websiteId\nJOIN Mobile_App ma ON na.mobileAppId = ma.id\nJOIN Article a ON na.id = a.newsAgencyId",
            "SELECT w.name AS websiteName, na.name AS newsAgencyName, a.title AS articleTitle, a.publishedDate\nFROM Website w\nJOIN News_Agency na ON w.id = na.websiteId\nJOIN Article a ON na.id = a.newsAgencyId"
          ]
        },
        {
          "interpretation": "List all news agencies and their articles along with the published date; then for each news agency, list the associated mobile app and its articles with the published dates; finally, for each mobile app, list the associated website and its articles with the published dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT na.name AS news_agency, a.title AS article, a.publishedDate\nFROM News_Agency na\nJOIN Article a ON na.id = a.newsAgencyId\nUNION ALL\nSELECT na.name AS news_agency, a.title AS article, a.publishedDate\nFROM News_Agency na\nJOIN Mobile_App ma ON na.mobileAppId = ma.id\nJOIN Article a ON na.id = a.newsAgencyId\nUNION ALL\nSELECT w.name AS website, a.title AS article, a.publishedDate\nFROM Website w\nJOIN News_Agency na ON w.id = na.websiteId\nJOIN Article a ON na.id = a.newsAgencyId"
          ]
        },
        {
          "interpretation": "List all mobile apps and their articles along with the published date; then for each mobile app, list the associated news agency and its articles with the published dates; finally, for each news agency, list the associated website and its articles with the published dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Mobile_App.name AS mobile_app_name, Article.title AS article_title, Article.publishedDate\nFROM Mobile_App\nJOIN News_Agency ON Mobile_App.id = News_Agency.mobileAppId\nJOIN Article ON News_Agency.id = Article.newsAgencyId\nUNION ALL\nSELECT News_Agency.name AS news_agency_name, Article.title AS article_title, Article.publishedDate\nFROM News_Agency\nJOIN Article ON News_Agency.id = Article.newsAgencyId\nUNION ALL\nSELECT Website.name AS website_name, Article.title AS article_title, Article.publishedDate\nFROM Website\nJOIN News_Agency ON Website.id = News_Agency.websiteId\nJOIN Article ON News_Agency.id = Article.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.15384615384615385,
        "f1_score": 0.21052631578947367,
        "num_queries": 13,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, websites and mobile apps on which they were published, along with the author names.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nWebsite.name, Website.url, Mobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "LIST all articles, the website and the mobile app associated with each, and the authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    A.title, \n    W.name AS website, \n    MA.name AS mobile_app, \n    Au.fullname AS author\nFROM \n    Article A\nJOIN \n    News_Agency NA ON A.newsAgencyId = NA.id\nJOIN \n    Website W ON NA.websiteId = W.id\nJOIN \n    Mobile_App MA ON NA.mobileAppId = MA.id\nJOIN \n    AuthorArticle AA ON A.id = AA.articleId\nJOIN \n    Author Au ON AA.authorId = Au.id"
          ]
        },
        {
          "interpretation": "Display the details of each article, the related website, the related mobile app, and the author who wrote it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Article.id AS article_id,\n    Article.title,\n    Article.content,\n    Article.publishedDate,\n    Website.name AS website_name,\n    Mobile_App.name AS mobile_app_name,\n    Author.fullname AS author_name\nFROM \n    Article\nJOIN \n    News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN \n    Website ON News_Agency.websiteId = Website.id\nJOIN \n    Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN \n    AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN \n    Author ON AuthorArticle.authorId = Author.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, websites that they were published on and author names.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nWebsite.name,Website.url,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the article details, the websites they were published on, and the full names of the authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Article.id, \n    Article.title, \n    Article.content, \n    Article.publishedDate, \n    Website.name AS websiteName, \n    Author.fullname \nFROM \n    Article \nJOIN \n    News_Agency ON Article.newsAgencyId = News_Agency.id \nJOIN \n    Website ON News_Agency.websiteId = Website.id \nJOIN \n    AuthorArticle ON Article.id = AuthorArticle.articleId \nJOIN \n    Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Display all articles, the websites they were published on, and the full names of the authors who wrote them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, Website.name AS websiteName, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Provide a detailed view of all articles, the websites they were published on, and the authors' full names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, A.content, W.name AS websiteName, Au.fullname AS authorFullName\nFROM Article A\nJOIN News_Agency NA ON A.newsAgencyId = NA.id\nJOIN Website W ON NA.websiteId = W.id\nJOIN AuthorArticle AA ON A.id = AA.articleId\nJOIN Author Au ON AA.authorId = Au.id"
          ]
        },
        {
          "interpretation": "List the details of all articles, the websites they were published on, and their authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, A.content, A.publishedDate, W.name AS websiteName, W.url, C.fullname AS authorName\nFROM Article A\nJOIN News_Agency NA ON A.newsAgencyId = NA.id\nJOIN Website W ON NA.websiteId = W.id\nJOIN AuthorArticle AA ON A.id = AA.articleId\nJOIN Author C ON AA.authorId = C.id"
          ]
        },
        {
          "interpretation": "Display the article information, the publication websites, and the full names of the authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, Article.content, Article.publishedDate, Website.name AS websiteName, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, platforms that they were published on and author name.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nWebsite.name,Website.url,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id",
        "SELECT\r\nArticle.title,\r\nMobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id",
        "SELECT\r\nArticle.title,\r\nWebsite.name, Website.url, Mobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all articles, the news agencies' names that published them, and the author name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, NA.name, Au.fullname \nFROM Article A \nJOIN News_Agency NA ON A.newsAgencyId = NA.id \nJOIN AuthorArticle AA ON A.id = AA.articleId \nJOIN Author Au ON AA.authorId = Au.id"
          ]
        },
        {
          "interpretation": "Retrieve all articles, the platforms they were published on (via their news agencies, websites, or mobile apps), and the associated author name for each.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, NA.name AS newsAgency, W.name AS website, MA.name AS mobileApp, Au.fullname AS authorName\nFROM Article A\nJOIN News_Agency NA ON A.newsAgencyId = NA.id\nJOIN Website W ON NA.websiteId = W.id\nJOIN Mobile_App MA ON NA.mobileAppId = MA.id\nJOIN AuthorArticle AA ON A.id = AA.articleId\nJOIN Author Au ON AA.authorId = Au.id"
          ]
        },
        {
          "interpretation": "List all articles, the platforms they were published on through mobile apps, and the author name.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, m.name AS mobileApp, au.fullname AS authorName\nFROM Article a\nJOIN News_Agency na ON a.newsAgencyId = na.id\nJOIN Mobile_App m ON na.mobileAppId = m.id\nJOIN AuthorArticle aa ON a.id = aa.articleId\nJOIN Author au ON aa.authorId = au.id"
          ]
        },
        {
          "interpretation": "List all articles, the platforms they were published on (related to their news agencies, websites, or mobile apps), and the corresponding author name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Article.title, \n    Website.name AS Website, \n    Mobile_App.name AS MobileApp, \n    Author.fullname AS AuthorName\nFROM \n    Article\nJOIN \n    News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN \n    Website ON News_Agency.websiteId = Website.id\nJOIN \n    Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN \n    AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN \n    Author ON AuthorArticle.authorId = Author.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all the websites with their published articles and dates.",
      "gold_queries": [
        "SELECT \r\nWebsite.name,\r\nWebsite.url,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the articles from each website, along with the authors, publication dates, and the number of publications.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    W.name AS website,\n    A.title AS article_title,\n    Au.fullname AS author_name,\n    A.publishedDate AS publication_date,\n    COUNT(A.id) OVER (PARTITION BY W.id) AS number_of_publications\nFROM \n    Article A\nJOIN \n    News_Agency NA ON A.newsAgencyId = NA.id\nJOIN \n    Website W ON NA.websiteId = W.id\nJOIN \n    AuthorArticle AA ON A.id = AA.articleId\nJOIN \n    Author Au ON AA.authorId = Au.id"
          ]
        },
        {
          "interpretation": "List the website names and the articles, authors, and publication dates, along with the number of publications.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name AS website_name, a.title AS article_title, a.publishedDate, COUNT(a.id) AS number_of_publications\nFROM Article a\nJOIN News_Agency na ON a.newsAgencyId = na.id\nJOIN Website w ON na.websiteId = w.id\nJOIN AuthorArticle aa ON a.id = aa.articleId\nGROUP BY w.name, a.title, a.publishedDate"
          ]
        },
        {
          "interpretation": "List the website names and the articles, along with the authors and publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name AS website_name, A.title AS article_title, Au.fullname AS author_name, A.publishedDate\nFROM Article A\nJOIN News_Agency NA ON A.newsAgencyId = NA.id\nJOIN Website W ON NA.websiteId = W.id\nJOIN AuthorArticle AA ON A.id = AA.articleId\nJOIN Author Au ON AA.authorId = Au.id"
          ]
        },
        {
          "interpretation": "List all the websites and the articles and publication dates associated with each.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Website.name, Article.title, Article.publishedDate\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Website ON News_Agency.websiteId = Website.id"
          ]
        },
        {
          "interpretation": "List all the websites and the number of articles, including the publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name, COUNT(A.id) AS NumberOfArticles, A.publishedDate\nFROM Website W\nJOIN News_Agency NA ON W.id = NA.websiteId\nJOIN Article A ON NA.id = A.newsAgencyId\nGROUP BY W.name, A.publishedDate"
          ]
        },
        {
          "interpretation": "List the website names and the number of articles, along with the authors and publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name AS WebsiteName, COUNT(A.id) AS NumberOfArticles, Au.fullname AS AuthorName, A.publishedDate\nFROM Website W\nJOIN News_Agency NA ON W.id = NA.websiteId\nJOIN Article A ON NA.id = A.newsAgencyId\nJOIN AuthorArticle AA ON A.id = AA.articleId\nJOIN Author Au ON AA.authorId = Au.id\nGROUP BY W.name, Au.fullname, A.publishedDate"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective managing editor and reporter names",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the article contents with the corresponding managing editor and reporter ids",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT content, T2.managing_editor_id, T1.reporter_id\nFROM Articles AS T1\nJOIN Final_Draft AS T2 ON T1.final_draft_id = T2.id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the managing editor and reporter full names and emails",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.content, \n    me.name AS managing_editor_name, \n    me.email AS managing_editor_email, \n    r.fullname AS reporter_fullname\nFROM \n    Articles a\nJOIN \n    Final_Draft fd ON a.final_draft_id = fd.id\nJOIN \n    Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN \n    Reporters r ON a.reporter_id = r.reporter_id"
          ]
        },
        {
          "interpretation": "List all the article contents, with managing editor and reporter full names, emails, and ids",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Managing_Editor.name AS managing_editor_name, Managing_Editor.email AS managing_editor_email, Managing_Editor.id AS managing_editor_id, Reporters.fullname AS reporter_fullname, Reporters.reporter_id\nFROM Articles\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        },
        {
          "interpretation": "List all the article contents, including managing editor and reporter full names and ids",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.content, ME.name, ME.id, R.fullname, R.reporter_id\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Reporters R ON A.reporter_id = R.reporter_id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the managing editor and reporter fullnames",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Articles.content, Managing_Editor.name, Reporters.fullname \nFROM Articles \nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id \nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id \nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the articles with their respective editor and author names.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id",
        "SELECT\r\nArticles.title,\r\nCopy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id",
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name, Copy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the articles with the copy editor and author names.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, CE.name AS copy_editor, Au.fullname AS author\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Authors Au ON A.author_id = Au.author_id"
          ]
        },
        {
          "interpretation": "List all the articles with the managing editor and author names.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, me.name AS managing_editor, au.fullname AS author\nFROM Articles a\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN Authors au ON a.author_id = au.author_id"
          ]
        },
        {
          "interpretation": "List all the articles with the managing editor and reporter names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, ME.name AS managing_editor, R.fullname AS reporter\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Reporters R ON A.reporter_id = R.reporter_id"
          ]
        },
        {
          "interpretation": "List all the articles with the report editor and author names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, R.fullname AS reporter_name, Auth.fullname AS author_name\nFROM Articles A\nJOIN Reporters R ON A.reporter_id = R.reporter_id\nJOIN Authors Auth ON A.author_id = Auth.author_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective copy editor and reporter names",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nCopy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the article contents with their respective copy editors' full names and reporters names",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT A.content, C.name AS copy_editor_name, R.fullname AS reporter_name\nFROM Articles A\nJOIN Final_Draft F ON A.final_draft_id = F.id\nJOIN Copy_Editor C ON F.copy_editor_id = C.id\nJOIN Reporters R ON A.reporter_id = R.reporter_id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "Show me all available articles alongside their managing editors and their authors.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all articles and include the information of their managing editors and authors.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT A.title, M.name AS managing_editor, U.fullname AS author\nFROM Articles A\nJOIN Final_Draft F ON A.final_draft_id = F.id\nJOIN Managing_Editor M ON F.managing_editor_id = M.id\nJOIN Authors U ON A.author_id = U.author_id"
          ]
        },
        {
          "interpretation": "Present all articles alongside their managing editors and authors' information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, A.content, ME.name AS managing_editor, Au.fullname AS author\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Authors Au ON A.author_id = Au.author_id"
          ]
        },
        {
          "interpretation": "Display the complete information of all articles, including their managing editors and authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.id, Articles.title, Articles.content, Authors.fullname AS author_name, Managing_Editor.name AS managing_editor_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "Show me all available articles alongside their managing and copy editors and their authors.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name, Copy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a complete set of articles, including information on their respective managing editors, copy editors, and authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    A.title, \n    A.content, \n    ME.name AS managing_editor, \n    CE.name AS copy_editor, \n    Au.fullname AS author\nFROM \n    Articles A\nJOIN \n    Final_Draft FD ON A.final_draft_id = FD.id\nJOIN \n    Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN \n    Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN \n    Authors Au ON A.author_id = Au.author_id"
          ]
        },
        {
          "interpretation": "List all articles along with their managing editor, copy editor, and author names.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT A.title, ME.name AS managing_editor, CE.name AS copy_editor, Au.fullname AS author_name\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Authors Au ON A.author_id = Au.author_id"
          ]
        },
        {
          "interpretation": "Present all articles with the details of the managing editor, copy editor, and author.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, A.content, ME.name AS managing_editor_name, ME.email AS managing_editor_email, CE.name AS copy_editor_name, CE.email AS copy_editor_email, AU.fullname AS author_name\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Authors AU ON A.author_id = AU.author_id"
          ]
        },
        {
          "interpretation": "Display the details of all articles, including the managing editor, copy editor, and author.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Articles.id, \n    Articles.title, \n    Articles.content, \n    Authors.fullname AS author_name, \n    Reporters.fullname AS reporter_name, \n    Managing_Editor.name AS managing_editor_name, \n    Copy_Editor.name AS copy_editor_name\nFROM \n    Articles\nJOIN \n    Authors ON Articles.author_id = Authors.author_id\nJOIN \n    Reporters ON Articles.reporter_id = Reporters.reporter_id\nJOIN \n    Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN \n    Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id\nJOIN \n    Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "Show me all available articles alongside their copy editors and their authors.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nCopy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display an exhaustive list of articles, including the authors and copy editors who worked on them.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Articles.title, Authors.fullname AS author, Copy_Editor.name AS copy_editor\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "Display a list of all articles including the details of their respective copy editors and authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.title, Articles.content, Authors.fullname AS author_name, Copy_Editor.name AS copy_editor_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "Show the ID, title, and names of the authors and copy editors for each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Articles.id, \n    Articles.title, \n    Authors.fullname AS author_name, \n    Copy_Editor.name AS copy_editor_name \nFROM \n    Articles \nJOIN \n    Authors ON Articles.author_id = Authors.author_id \nJOIN \n    Final_Draft ON Articles.final_draft_id = Final_Draft.id \nJOIN \n    Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective managing editor, copy editor and reporter names",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name, Copy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all article contents, each with the names of the managing editor, copy editor, and reporter",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT \n    Articles.content, \n    Managing_Editor.name AS managing_editor_name, \n    Copy_Editor.name AS copy_editor_name, \n    Reporters.fullname AS reporter_name \nFROM \n    Articles \nJOIN \n    Final_Draft ON Articles.final_draft_id = Final_Draft.id \nJOIN \n    Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id \nJOIN \n    Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id \nJOIN \n    Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective editor and reporter names.",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id",
        "SELECT\r\nArticles.content,\r\nCopy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id",
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name, Copy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the article contents along with the names of their authors, reporters, managing editors, and the emails of copy editors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Articles.content, \n    Authors.fullname AS author_name, \n    Reporters.fullname AS reporter_name, \n    Managing_Editor.name AS managing_editor_name, \n    Copy_Editor.email AS copy_editor_email\nFROM \n    Articles\nJOIN \n    Authors ON Articles.author_id = Authors.author_id\nJOIN \n    Reporters ON Articles.reporter_id = Reporters.reporter_id\nJOIN \n    Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN \n    Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id\nJOIN \n    Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the names of their copy editors and reporters.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Copy_Editor.name AS copy_editor_name, Reporters.fullname AS reporter_name\nFROM Articles\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the names of their authors, managing editors, reporters, and copy editors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.content, au.fullname AS author_name, m.name AS managing_editor_name, r.fullname AS reporter_name, ce.name AS copy_editor_name\nFROM Articles a\nJOIN Authors au ON a.author_id = au.author_id\nJOIN Final_Draft f ON a.final_draft_id = f.id\nJOIN Managing_Editor m ON f.managing_editor_id = m.id\nJOIN Reporters r ON a.reporter_id = r.reporter_id\nJOIN Copy_Editor ce ON f.copy_editor_id = ce.id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the names of their authors, reporters, managing editors, and the emails of managing editors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Authors.fullname AS author_name, Reporters.fullname AS reporter_name, Managing_Editor.name AS managing_editor_name, Managing_Editor.email \nFROM Articles \nJOIN Authors ON Articles.author_id = Authors.author_id \nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id \nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id \nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the names of their authors, reporters, and copy editors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Authors.fullname AS author_name, Reporters.fullname AS reporter_name, Copy_Editor.name AS copy_editor_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the names of their reporters, managing editors, and copy editors.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.content, r.fullname AS reporter_name, me.name AS managing_editor_name, ce.name AS copy_editor_name\nFROM Articles a\nJOIN Reporters r ON a.reporter_id = r.reporter_id\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN Copy_Editor ce ON fd.copy_editor_id = ce.id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the names of their authors, reporters, and managing editors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Authors.fullname AS author_name, Reporters.fullname AS reporter_name, Managing_Editor.name AS managing_editor_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the names of their authors and reporters.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Authors.fullname AS author_name, Reporters.fullname AS reporter_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the names of their managing editors and reporters.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.content, ME.name, R.fullname \nFROM Articles A \nJOIN Final_Draft FD ON A.final_draft_id = FD.id \nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id \nJOIN Reporters R ON A.reporter_id = R.reporter_id"
          ]
        },
        {
          "interpretation": "List all the article contents along with the names of their managing editors and copy editors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.content, me.name AS managing_editor_name, ce.name AS copy_editor_name\nFROM Articles a\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN Copy_Editor ce ON fd.copy_editor_id = ce.id"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3,
        "f1_score": 0.4615384615384615,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "For each author, list their name, certificate and article titles.",
      "gold_queries": [
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Output a list where each element contains an author's name, certificate, and article titles, separated by commas and each on a new line",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.name, T2.Certificate, T1.title \nFROM articles AS T1 \nJOIN journalists AS T2 ON T1.authorId = T2.id"
          ]
        },
        {
          "interpretation": "List authors, their certificates, and articles in a concatenated manner",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT journalists.name, journalists.Certificate, articles.title || ' - ' || articles.content AS article_info\nFROM journalists\nJOIN articles ON journalists.id = articles.authorId"
          ]
        },
        {
          "interpretation": "John Doe Certified Professional Writer",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Certificate FROM journalists WHERE name = 'John Doe' AND Certificate = 'Certified Professional Writer'"
          ]
        },
        {
          "interpretation": "Display a string where authors' names, certificates, and article titles are concatenated",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT journalists.name || ', ' || journalists.Certificate || ', ' || articles.title AS concatenated_info\nFROM journalists\nJOIN articles ON journalists.id = articles.authorId"
          ]
        },
        {
          "interpretation": "List authors, certificates, and articles in a separated list format",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM articles",
            "SELECT name, Certificate FROM journalists"
          ]
        },
        {
          "interpretation": "List authors, certificates, and articles in a separated list format",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM articles",
            "SELECT name, Certificate FROM journalists"
          ]
        },
        {
          "interpretation": "John Doe, Certified Professional Writer, \"Breaking News: New Government Policy\", \"Economic Outlook for Q2\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Certificate, a1.title, a2.title\nFROM journalists j\nJOIN articles a1 ON j.id = a1.authorId AND a1.title = 'Breaking News: New Government Policy'\nJOIN articles a2 ON j.id = a2.authorId AND a2.title = 'Economic Outlook for Q2'\nWHERE j.name = 'John Doe' AND j.Certificate = 'Certified Professional Writer'"
          ]
        },
        {
          "interpretation": "Output a list with each element representing an author, their certificate, and article titles, separated by a colon",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT journalists.name || ': ' || journalists.Certificate || ': ' || articles.title FROM journalists JOIN articles ON journalists.id = articles.authorId"
          ]
        },
        {
          "interpretation": "Provide a collection of author data with certificates and article titles, separated by a pipe character",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT journalists.name || ' | ' || journalists.Certificate || ' | ' || articles.title FROM journalists JOIN articles ON journalists.id = articles.authorId"
          ]
        },
        {
          "interpretation": "Jane Smith, Advanced Reporting Specialist, \"Breaking News: New Government Policy\", \"Economic Outlook for Q2\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.name = 'Jane Smith' AND j.Certificate = 'Advanced Reporting Specialist' AND a.title IN ('Breaking News: New Government Policy', 'Economic Outlook for Q2')"
          ]
        },
        {
          "interpretation": "Jane Smith Advanced Reporting Specialist",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT email, phoneNumber FROM journalists WHERE name = 'Jane Smith' AND Certificate = 'Advanced Reporting Specialist'"
          ]
        },
        {
          "interpretation": "John Doe, Certified Professional Writer, \"Breaking News: New Government Policy\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT articles.title \nFROM articles \nJOIN journalists ON articles.authorId = journalists.id \nWHERE journalists.name = 'John Doe' \nAND journalists.Certificate = 'Certified Professional Writer' \nAND articles.title = 'Breaking News: New Government Policy'"
          ]
        },
        {
          "interpretation": "Jane Smith, Advanced Reporting Specialist, \"Economic Outlook for Q2\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title\nFROM articles a\nJOIN journalists j ON a.authorId = j.id\nWHERE j.name = 'Jane Smith' AND j.Certificate = 'Advanced Reporting Specialist' AND a.title = 'Economic Outlook for Q2'"
          ]
        }
      ],
      "num_unique_execution_results": 13,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.07692307692307693,
        "f1_score": 0.14285714285714288,
        "num_queries": 15,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "For each author, list their name, degree and article titles.",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "John Doe, Bachelor of Arts in Journalism, \"Breaking News: New Government Policy\", \"Economic Outlook for Q2\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.name = 'John Doe' AND j.Degree = 'Bachelor of Arts in Journalism'\nAND a.title IN ('Breaking News: New Government Policy', 'Economic Outlook for Q2')"
          ]
        },
        {
          "interpretation": "Jane Smith, Master of Science in Communication,",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Degree FROM journalists WHERE name = 'Jane Smith'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their certificates and their article titles",
      "gold_queries": [
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all journalists marked as investigative, their certificates, and the titles of their written articles",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.Certificate, a.title \nFROM journalists j \nJOIN articles a ON j.id = a.authorId \nWHERE j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Give me a list of all investigative journalists, their certificates, and the IDs of their articles",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name, J.Certificate, A.id\nFROM journalists J\nJOIN articles A ON J.id = A.authorId\nWHERE J.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Give me a list of all investigative journalists and their certificates",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, Certificate FROM journalists WHERE Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "List investigative journalists, their credentials, and the titles of their articles",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, j.Certificate, a.title \nFROM journalists j \nJOIN articles a ON j.id = a.authorId \nWHERE j.Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their qualifications and their article titles",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1",
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1",
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List of investigative journalists along with their qualifications and the titles of their latest articles",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, j.Certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.Investigative_Journalist = 1\nAND a.publishDate = (\n    SELECT MAX(publishDate)\n    FROM articles\n    WHERE authorId = j.id\n)"
          ]
        },
        {
          "interpretation": "List of investigative journalists, their certifications, and the titles of their featured articles",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name, J.Certificate, A.title\nFROM journalists J\nJOIN articles A ON J.id = A.authorId\nWHERE J.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "List of investigative journalists, their academic degrees, and the titles of their published investigative reports",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, a.title \nFROM journalists j \nJOIN articles a ON j.id = a.authorId \nWHERE j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "List of investigative journalists, their investigative experience indicators, and the titles of their significant articles",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Investigative_Journalist, a.title \nFROM journalists j \nJOIN articles a ON j.id = a.authorId \nWHERE j.Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "For each author, list their name, degree, certificate and article titles.",
      "gold_queries": [
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Jane Smith, Master of Science in Communication, Advanced Reporting Specialist, 'Economic Outlook for Q2'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, j.Degree, j.Certificate\nFROM articles a\nJOIN journalists j ON a.authorId = j.id\nWHERE j.name = 'Jane Smith' AND j.Degree = 'Master of Science in Communication' AND j.Certificate = 'Advanced Reporting Specialist' AND a.title = 'Economic Outlook for Q2'"
          ]
        },
        {
          "interpretation": "Jane Smith, Master of Science in Communication, Advanced Reporting Specialist, 'Breaking News: New Government Policy', 'Economic Outlook for Q2'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, j.Certificate, a.title \nFROM journalists j \nJOIN articles a ON j.id = a.authorId \nWHERE j.name = 'Jane Smith' AND j.Degree = 'Master of Science in Communication' AND j.Certificate = 'Advanced Reporting Specialist' AND a.title IN ('Breaking News: New Government Policy', 'Economic Outlook for Q2')"
          ]
        },
        {
          "interpretation": "John Doe, Bachelor of Arts in Journalism, article titles 'Breaking News: New Government Policy', 'Economic Outlook for Q2'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title\nFROM articles a\nJOIN journalists j ON a.authorId = j.id\nWHERE j.name = 'John Doe' AND j.Degree = 'Bachelor of Arts in Journalism' AND a.title IN ('Breaking News: New Government Policy', 'Economic Outlook for Q2')"
          ]
        },
        {
          "interpretation": "author name, degree, certificate, article titles",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT journalists.name, journalists.Degree, journalists.Certificate, articles.title\nFROM journalists\nJOIN articles ON journalists.id = articles.authorId"
          ]
        },
        {
          "interpretation": "Jane Smith, Master of Science in Communication, article titles 'Breaking News: New Government Policy', 'Economic Outlook for Q2'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title FROM articles AS T1 JOIN journalists AS T2 ON T1.authorId = T2.id WHERE T2.name = 'Jane Smith' AND T2.Degree = 'Master of Science in Communication'"
          ]
        },
        {
          "interpretation": "John Doe, Bachelor of Arts in Journalism, Certified Professional Writer, 'Breaking News: New Government Policy', 'Economic Outlook for Q2'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, j.Certificate, a1.title, a2.title\nFROM journalists j\nJOIN articles a1 ON j.id = a1.authorId AND a1.title = 'Breaking News: New Government Policy'\nJOIN articles a2 ON j.id = a2.authorId AND a2.title = 'Economic Outlook for Q2'\nWHERE j.name = 'John Doe' AND j.Degree = 'Bachelor of Arts in Journalism' AND j.Certificate = 'Certified Professional Writer'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "show me the name, qualification and title for all authors and articles",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id",
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id",
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their degrees and their article titles",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display investigative journalists, their academic credentials, and the titles of their articles",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT J.name, J.Degree, A.title\nFROM journalists J\nJOIN articles A ON J.id = A.authorId\nWHERE J.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Generate a list of investigative journalists, their educational achievements, and the titles of their articles",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name, J.Degree, J.Certificate, A.title\nFROM journalists J\nJOIN articles A ON J.id = A.authorId\nWHERE J.Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the photojournalist who took the most recent photo.",
      "gold_queries": [
        "SELECT Photojournalists.Name\r\nFROM Assignments\r\nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the photojournalist who has the latest AssignmentId in the Assignments table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Photojournalists.Name \nFROM Assignments \nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.id \nWHERE Assignments.id = (SELECT MAX(id) FROM Assignments)"
          ]
        },
        {
          "interpretation": "Show me the photojournalist whose name appears last in the reverse alphabetical order of Photojournalists table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Photojournalists ORDER BY Name DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Show me the photojournalist who has the latest entry in the Photos table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Name\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Photos PH ON PP.PhotoId = PH.id\nORDER BY PH.TakenOn DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Show me the photojournalist who has the most recent record in the Photos table based on the TakenOn date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Name \nFROM Photojournalists P \nJOIN Assignments A ON P.id = A.PhotojournalistId \nJOIN Photos Ph ON A.id = Ph.TakenOn \nORDER BY Ph.TakenOn DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Show me the photojournalist who has the most recent birthday.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Photojournalists WHERE Birthdate = (SELECT MAX(Birthdate) FROM Photojournalists)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "List the events of photos published in 2022",
      "gold_queries": [
        "SELECT Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the events associated with photos published within 2022",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT E.Title\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN PublishedPhotos P ON A.id = P.AssignmentId\nWHERE strftime('%Y', P.PublicationDate) = '2022'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "List the photojournalists whose photos were published in 2022 and the events depicted in these photos.",
      "gold_queries": [
        "SELECT Photojournalists.Name , Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID  WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the photojournalists and the events depicted in their published photos for the year 2022.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Name, E.Title\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PubP ON A.id = PubP.AssignmentId\nJOIN Events E ON A.EventId = E.id\nWHERE PubP.PublicationDate >= '2022-01-01' AND PubP.PublicationDate <= '2022-12-31'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "List the photojournalists whose photos were published in 2022.",
      "gold_queries": [
        "SELECT Photojournalists.Name FROM Assignments JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the photojournalists whose photos were published in 2022 tied to the assignment's photojournalist ID.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT P.Name\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nWHERE strftime('%Y', PP.PublicationDate) = '2022'"
          ]
        },
        {
          "interpretation": "List the photojournalists whose photos were published in 2022 related to the event title.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Photojournalists.Name, Events.Title\nFROM Photojournalists\nJOIN Assignments ON Photojournalists.id = Assignments.PhotojournalistId\nJOIN PublishedPhotos ON Assignments.id = PublishedPhotos.AssignmentId\nJOIN Events ON Assignments.EventId = Events.id\nWHERE strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
          ]
        },
        {
          "interpretation": "List the photojournalists whose photos were published in 2022 based on the photo's caption.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Name, PH.Caption\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Photos PH ON PP.PhotoId = PH.id\nWHERE strftime('%Y', PP.PublicationDate) = '2022'"
          ]
        },
        {
          "interpretation": "List the photojournalists whose photos were published in 2022 tied to their assignment ID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Photojournalists.Name, Assignments.id \nFROM Photojournalists \nJOIN Assignments ON Photojournalists.id = Assignments.PhotojournalistId \nJOIN PublishedPhotos ON Assignments.id = PublishedPhotos.AssignmentId \nWHERE strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the photojournalist and the event of the most recent photo.",
      "gold_queries": [
        "SELECT Photojournalists.Name , Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id  JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the photojournalist and event of the photo taken closest to the current date.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Name, E.Title \nFROM Photojournalists P \nJOIN Assignments A ON P.id = A.PhotojournalistId \nJOIN Events E ON A.EventId = E.id \nJOIN Photos PH ON A.id = (SELECT AssignmentId FROM PublishedPhotos WHERE PhotoId = PH.id) \nORDER BY PH.TakenOn DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Show me the photojournalist and the event associated with the photo that has the most recent takenon date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Photojournalists.Name, Events.Title\nFROM Photos\nJOIN Assignments ON Photos.id = PublishedPhotos.PhotoId\nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.id\nJOIN Events ON Assignments.EventId = Events.id\nJOIN PublishedPhotos ON Photos.id = PublishedPhotos.PhotoId\nWHERE Photos.TakenOn = (SELECT MAX(TakenOn) FROM Photos)"
          ]
        },
        {
          "interpretation": "Show me the photojournalist and event linked to the photo with the newest filepath.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Name, E.Title\nFROM Photos PH\nJOIN PublishedPhotos PP ON PH.id = PP.PhotoId\nJOIN Assignments A ON PP.AssignmentId = A.id\nJOIN Photojournalists P ON A.PhotojournalistId = P.id\nJOIN Events E ON A.EventId = E.id\nWHERE PH.FilePath = (SELECT MAX(FilePath) FROM Photos)"
          ]
        },
        {
          "interpretation": "Show me the photojournalist and the event of the photo with the latest publication date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Photojournalists.Name, Events.Title, PublishedPhotos.PublicationDate\nFROM PublishedPhotos\nJOIN Assignments ON PublishedPhotos.AssignmentId = Assignments.id\nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.id\nJOIN Events ON Assignments.EventId = Events.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the origin of all photos published in 2022",
      "gold_queries": [
        "SELECT Photojournalists.Name FROM Assignments JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'",
        "SELECT Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'",
        "SELECT Photojournalists.Name , Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID  WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the origin of all photos published in 2022 and the assignment details",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Location, A.EventId, A.PhotojournalistId\nFROM PublishedPhotos PP\nJOIN Assignments A ON PP.AssignmentId = A.id\nJOIN Events E ON A.EventId = E.id\nWHERE PP.PublicationDate BETWEEN '2022-01-01' AND '2022-12-31'"
          ]
        },
        {
          "interpretation": "Show me the date photos were taken and origin of all photos published in 2022",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Photos.TakenOn, Events.Location \nFROM PublishedPhotos \nJOIN Photos ON PublishedPhotos.PhotoId = Photos.id \nJOIN Assignments ON PublishedPhotos.AssignmentId = Assignments.id \nJOIN Events ON Assignments.EventId = Events.id \nWHERE strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
          ]
        },
        {
          "interpretation": "Show me the origin of all photos published in 2022 and the event details",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Location, E.Date, E.Title\nFROM PublishedPhotos PP\nJOIN Assignments A ON PP.AssignmentId = A.id\nJOIN Events E ON A.EventId = E.id\nWHERE strftime('%Y', PP.PublicationDate) = '2022'"
          ]
        },
        {
          "interpretation": "Show me the PublicationDate, PhotoId, and EventId of all photos published in 2022 and their origin",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PublishedPhotos.PublicationDate, PublishedPhotos.PhotoId, Assignments.EventId\nFROM PublishedPhotos\nJOIN Assignments ON PublishedPhotos.AssignmentId = Assignments.id\nWHERE strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
          ]
        },
        {
          "interpretation": "Show me the origin of all photos published in 2022 and the photojournalist details",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Location, P.Name\nFROM PublishedPhotos PP\nJOIN Assignments A ON PP.AssignmentId = A.id\nJOIN Events E ON A.EventId = E.id\nJOIN Photojournalists P ON A.PhotojournalistId = P.id\nWHERE strftime('%Y', PP.PublicationDate) = '2022'"
          ]
        },
        {
          "interpretation": "Show me the FilePaths and origin of all photos published in 2022",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Photos.FilePath, Events.Title \nFROM PublishedPhotos \nJOIN Photos ON PublishedPhotos.PhotoId = Photos.id \nJOIN Assignments ON PublishedPhotos.AssignmentId = Assignments.id \nJOIN Events ON Assignments.EventId = Events.id \nWHERE PublishedPhotos.PublicationDate BETWEEN '2022-01-01' AND '2022-12-31'"
          ]
        },
        {
          "interpretation": "Show me the origin of all photos published in 2022 and the Assignments table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Events.Location \nFROM Events \nJOIN Assignments ON Events.id = Assignments.EventId \nJOIN PublishedPhotos ON Assignments.id = PublishedPhotos.AssignmentId \nWHERE strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the origin of the most recent photo",
      "gold_queries": [
        "SELECT Photojournalists.Name\r\nFROM Assignments\r\nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1",
        "SELECT Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1",
        "SELECT Photojournalists.Name , Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id  JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the assignment details and photo metadata for the most recent photo",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.id AS AssignmentId, A.EventId, A.PhotojournalistId, P.id AS PhotoId, P.FilePath, P.Caption, P.TakenOn\nFROM Assignments A\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Photos P ON PP.PhotoId = P.id\nORDER BY PP.PublicationDate DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Provide the context of the most recent photo, including event and photographer info",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, E.Date, P.Name, P.Birthdate\nFROM PublishedPhotos AS PP\nJOIN Assignments AS A ON PP.AssignmentId = A.id\nJOIN Events AS E ON A.EventId = E.id\nJOIN Photojournalists AS P ON A.PhotojournalistId = P.id\nWHERE PP.PublicationDate = (SELECT MAX(PublicationDate) FROM PublishedPhotos)"
          ]
        },
        {
          "interpretation": "Provide the context details of the most recent photo, including event and photographer",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, E.Date, P.Name\nFROM Assignments A\nJOIN Events E ON A.EventId = E.id\nJOIN Photojournalists P ON A.PhotojournalistId = P.id\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nORDER BY PP.PublicationDate DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "List the event, photojournalist, and photo details of the most recent photo",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, P.Name, Ph.FilePath, Ph.Caption, Ph.TakenOn\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN Photojournalists P ON A.PhotojournalistId = P.id\nJOIN Photos Ph ON Ph.id = (\n    SELECT Pu.PhotoId\n    FROM PublishedPhotos Pu\n    WHERE Pu.AssignmentId = A.id\n    ORDER BY Pu.PublicationDate DESC\n    LIMIT 1\n)\nORDER BY Ph.TakenOn DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Provide the creation context of the most recently taken photo, including event and photographer",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, E.Date\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN Photos P ON A.id = (SELECT AssignmentId FROM PublishedPhotos WHERE PhotoId = P.id)\nWHERE P.TakenOn = (SELECT MAX(TakenOn) FROM Photos)"
          ]
        },
        {
          "interpretation": "Show the event and photo information for the most recently taken picture",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, E.Date, P.FilePath, P.Caption, P.TakenOn\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN Photos P ON P.id = (SELECT PhotoId FROM PublishedPhotos PP WHERE PP.AssignmentId = A.id ORDER BY PP.PublicationDate DESC LIMIT 1)\nORDER BY P.TakenOn DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Show me the photo and details of the most recent photo taken",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FilePath, Caption, TakenOn FROM Photos ORDER BY TakenOn DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Provide the event and photo details for the most recent photo ever captured",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, E.Date, P.FilePath, P.Caption, P.TakenOn\nFROM Events AS E\nJOIN Assignments AS A ON E.id = A.EventId\nJOIN Photos AS P ON P.id = (\n    SELECT PhotoId\n    FROM PublishedPhotos\n    ORDER BY PublicationDate DESC\n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "Display the first assignment and photo details for the most recent photo",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    A.id AS AssignmentId,\n    P.FilePath,\n    P.Caption,\n    P.TakenOn\nFROM \n    Assignments A\nJOIN \n    PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN \n    Photos P ON PP.PhotoId = P.id\nORDER BY \n    PP.PublicationDate DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Display the origin event and the photojournalist for the newest photo entry",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, P.Name\nFROM PublishedPhotos AS PubP\nJOIN Assignments AS A ON PubP.AssignmentId = A.id\nJOIN Events AS E ON A.EventId = E.id\nJOIN Photojournalists AS P ON A.PhotojournalistId = P.id\nJOIN Photos AS Ph ON PubP.PhotoId = Ph.id\nORDER BY Ph.TakenOn DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Show the assignment and photo information for the most recent photo",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.EventId, A.PhotojournalistId, P.FilePath, P.Caption, P.TakenOn\nFROM Assignments A\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Photos P ON PP.PhotoId = P.id\nORDER BY P.TakenOn DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "List the photo and assignment details for the most recent photo entry",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Photos.FilePath, Photos.Caption, Assignments.EventId, Assignments.PhotojournalistId\nFROM Photos\nJOIN PublishedPhotos ON Photos.id = PublishedPhotos.PhotoId\nJOIN Assignments ON PublishedPhotos.AssignmentId = Assignments.id\nORDER BY PublishedPhotos.PublicationDate DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Display the source event and photo information for the most recent photo",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Events.Title, Photos.FilePath\nFROM PublishedPhotos\nJOIN Assignments ON PublishedPhotos.AssignmentId = Assignments.id\nJOIN Events ON Assignments.EventId = Events.id\nJOIN Photos ON PublishedPhotos.PhotoId = Photos.id\nORDER BY PublishedPhotos.PublicationDate DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "List the background and photographer of the most recent photo",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Location, P.Name \nFROM Assignments A \nJOIN Events E ON A.EventId = E.id \nJOIN Photojournalists P ON A.PhotojournalistId = P.id \nWHERE A.id = (SELECT MAX(id) FROM Assignments)"
          ]
        },
        {
          "interpretation": "Show the origin event and photo details for the most recently taken photo",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, P.FilePath, P.Caption, P.TakenOn\nFROM Photos P\nJOIN Assignments A ON P.id = A.id\nJOIN Events E ON A.EventId = E.id\nWHERE P.TakenOn = (SELECT MAX(TakenOn) FROM Photos)"
          ]
        },
        {
          "interpretation": "Display the source event and photojournalist for the latest photo entry",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, P.Name\nFROM Assignments A\nJOIN Events E ON A.EventId = E.id\nJOIN Photojournalists P ON A.PhotojournalistId = P.id\nWHERE A.id = (\n    SELECT MAX(A.id)\n    FROM Assignments A\n    JOIN PublishedPhotos PP ON A.id = PP.AssignmentId\n)"
          ]
        }
      ],
      "num_unique_execution_results": 16,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.0625,
        "f1_score": 0.10526315789473684,
        "num_queries": 16,
        "num_unique_queries": 16,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the event of the most recent photo.",
      "gold_queries": [
        "SELECT Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the event of the most recent published photo.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Events.Title FROM Events \nJOIN Assignments ON Events.id = Assignments.EventId \nJOIN PublishedPhotos ON Assignments.id = PublishedPhotos.AssignmentId \nORDER BY PublishedPhotos.PublicationDate DESC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their degrees, their certificates and their article titles",
      "gold_queries": [
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all investigative journalists, mentioning their degrees, certificates, and the titles of the articles they have written",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.degree, j.certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Retrieve a list of investigative journalists, detailing their degrees, certificates, and the titles of their respective articles",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.degree, j.Certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What web framework and content managment system does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Content_Management_System, Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What web framework and content management system does the author 'David Wilson' use, as referenced through the Articles and ContentManagementSystems tables?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Web_Framework, Content_Management_System\nFROM Articles\nJOIN ContentManagementSystems ON Articles.authorID = ContentManagementSystems.cmsId\nWHERE Articles.authorID = (SELECT authorID FROM Authors WHERE name = 'David Wilson')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What technology does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Content_Management_System\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';",
        "SELECT DISTINCT CMS.Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';",
        "SELECT DISTINCT CMS.Content_Management_System, Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "CMS associated with author ID of David Wilson",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Content_Management_System \nFROM ContentManagementSystems \nWHERE cmsId = (SELECT authorID FROM Articles WHERE authorID = (SELECT authorID FROM Authors WHERE name = 'David Wilson'))"
          ]
        },
        {
          "interpretation": "Web framework used by author ID of David Wilson",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.Web_Framework \nFROM Articles AS T1 \nJOIN ContentManagementSystems AS T2 ON T1.authorID = T2.cmsId \nJOIN Authors AS T3 ON T1.authorID = T3.authorID \nWHERE T3.name = 'David Wilson'"
          ]
        },
        {
          "interpretation": "David Wilson's online news platform preference",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Online_News_Platform FROM ContentManagementSystems WHERE cmsId = (SELECT authorID FROM Authors WHERE name = 'David Wilson')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.6666666666666666,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What content managment system does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Content_Management_System\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What content management system does the author associated with the email 'davidwilson@example.com' use?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Content_Management_System \nFROM ContentManagementSystems \nWHERE cmsId = (\n    SELECT authorID \n    FROM Articles \n    WHERE authorID = (\n        SELECT authorID \n        FROM Authors \n        WHERE email = 'davidwilson@example.com'\n    )\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "show me the content management system and web framework that emily brown uses to write her articles",
      "gold_queries": [
        "SELECT CMS.Content_Management_System, Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What technology does Emily Brown use?",
      "gold_queries": [
        "SELECT CMS.Content_Management_System\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';",
        "SELECT CMS.Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';",
        "SELECT CMS.Content_Management_System, Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Emily Brown's work content",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT content FROM Articles WHERE authorID = (SELECT authorID FROM Authors WHERE name = 'Emily Brown')"
          ]
        },
        {
          "interpretation": "Emily Brown's web framework",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Web_Framework \nFROM ContentManagementSystems \nWHERE cmsId = (SELECT authorID FROM Authors WHERE name = 'Emily Brown')"
          ]
        },
        {
          "interpretation": "Emily Brown's contact information",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT email FROM Authors WHERE name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "Emily Brown's editing role",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT role FROM Authors LEFT JOIN Articles ON Authors.authorID = Articles.authorID LEFT JOIN ArticleSources ON Articles.articleID = ArticleSources.articleID LEFT JOIN EditorialTeamMembers ON Articles.authorID = EditorialTeamMembers.memberID WHERE Authors.name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "Emily Brown's publication date",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT publicationDate FROM Articles WHERE authorID = (SELECT authorID FROM Authors WHERE name = 'Emily Brown')"
          ]
        },
        {
          "interpretation": "Emily Brown's author ID",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT authorID FROM Authors WHERE name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "Emily Brown's source URL",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT url FROM Sources WHERE sourceID = (SELECT sourceID FROM ArticleSources WHERE articleID = (SELECT articleID FROM Articles WHERE authorID = (SELECT authorID FROM Authors WHERE name = 'Emily Brown')))"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.14285714285714285,
        "f1_score": 0.2,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What web framework does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which web framework is associated with the author having email 'davidwilson@example.com'?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.Web_Framework\nFROM ContentManagementSystems AS T1\nJOIN Articles AS T2 ON T1.cmsId = T2.authorID\nJOIN Authors AS T3 ON T2.authorID = T3.authorID\nWHERE T3.email = 'davidwilson@example.com'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "show me the web framework that emily brown uses to write her articles",
      "gold_queries": [
        "SELECT CMS.Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "show me the content management system that emily brown uses to write her articles",
      "gold_queries": [
        "SELECT CMS.Content_Management_System\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each writer",
      "gold_queries": [
        "SELECT novelist, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist;",
        "SELECT playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY playwright;",
        "SELECT novelist, playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist, playwright;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a count of movies with each novelist as the author",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) FROM Movies GROUP BY novelist"
          ]
        },
        {
          "interpretation": "Provide a count of movies per creative contributor to the films",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(movie_id) AS movie_count, novelist, playwright\nFROM Movies\nGROUP BY novelist, playwright"
          ]
        },
        {
          "interpretation": "Provide a count of movies written by each playwright",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT playwright, COUNT(movie_id) \nFROM Movies \nGROUP BY playwright"
          ]
        },
        {
          "interpretation": "Provide a count of movies per individual involved in the cinema industry according to the database",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) AS movie_count FROM Movies GROUP BY novelist UNION SELECT playwright, COUNT(*) AS movie_count FROM Movies GROUP BY playwright"
          ]
        },
        {
          "interpretation": "Provide a count of movies per person listed in the film credits",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT film, COUNT(*) AS movie_count FROM Movies GROUP BY film"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each playwright.",
      "gold_queries": [
        "SELECT playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY playwright;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a count of movies adapted from novels by each playwright.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT playwright, COUNT(movie_id) \nFROM Movies \nGROUP BY playwright"
          ]
        },
        {
          "interpretation": "Provide a count of movies that have been unofficially credited to each playwright based on audience perception.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT playwright, COUNT(movie_id) AS movie_count\nFROM Movies\nWHERE playwright = 'Unknown'\nGROUP BY playwright"
          ]
        },
        {
          "interpretation": "Provide a count of movies that have received public acknowledgment of each playwright's contribution, even if the playwright's name is not listed.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movies WHERE playwright IS NOT NULL"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each novelist.",
      "gold_queries": [
        "SELECT novelist, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a count of movies released by each novelist.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) AS movie_count\nFROM Movies\nGROUP BY novelist"
          ]
        },
        {
          "interpretation": "Provide a count of movies each novelist has contributed to.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(movie_id) FROM Movies WHERE novelist != 'Unknown' GROUP BY novelist"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies and their release years, sort by their novelist, then playwright.",
      "gold_queries": [
        "SELECT novelist, playwright, title, release_year\r\nFROM Movies\r\nORDER BY novelist, playwright, release_year;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the movie names and release dates, arranged by novelist and playwright.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies ORDER BY novelist, playwright"
          ]
        },
        {
          "interpretation": "Provide a sorted list of movie titles and release years based on the novelist and playwright fields.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT title, release_year, novelist, playwright FROM Movies ORDER BY novelist, playwright"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies and their release years, sort by their playwright.",
      "gold_queries": [
        "SELECT playwright, title, release_year\r\nFROM Movies\r\nORDER BY playwright, release_year;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the movie titles and their release years, arranged based on the playwright's full name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies ORDER BY playwright"
          ]
        },
        {
          "interpretation": "List the movie names and their release years, sorted alphabetically by the playwright's first name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies WHERE playwright IN (SELECT name FROM Playwrights) ORDER BY playwright"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each novelist and playwright.",
      "gold_queries": [
        "SELECT novelist, playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist, playwright;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a count of movies for each novelist and playwright including both credited and uncredited roles.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT novelist, playwright, COUNT(*) AS movie_count FROM Movies GROUP BY novelist, playwright"
          ]
        },
        {
          "interpretation": "Provide a count of movies produced by each novelist and playwright.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) AS novelist_count FROM Movies GROUP BY novelist\nUNION\nSELECT playwright, COUNT(*) AS playwright_count FROM Movies GROUP BY playwright"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies and their release years, sort by their novelist.",
      "gold_queries": [
        "SELECT novelist, title, release_year\r\nFROM Movies\r\nORDER BY novelist, release_year;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the movies and their release years, sorted by the number of characters in the novelist's name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies ORDER BY LENGTH(novelist)"
          ]
        },
        {
          "interpretation": "List the movies and their release years, sorted by novelist's last name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title, m.release_year \nFROM Movies m \nJOIN Novelists n ON m.novelist = n.name \nORDER BY n.name"
          ]
        },
        {
          "interpretation": "List the movies and their release years, sorted alphabetically within each novelist.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT novelist, title, release_year \nFROM Movies \nORDER BY novelist, title"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies along with their release years, sorted by writer",
      "gold_queries": [
        "SELECT novelist, title, release_year\r\nFROM Movies\r\nORDER BY novelist, release_year;",
        "SELECT playwright, title, release_year\r\nFROM Movies\r\nORDER BY playwright, release_year;",
        "SELECT novelist, playwright, title, release_year\r\nFROM Movies\r\nORDER BY novelist, playwright, release_year;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the movies along with their release years, sorted by show title",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies ORDER BY title"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere date where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereMonth FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;",
        "Select type, title, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;",
        "Select type, title, premiereMonth, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Content type, title, and premiere date where the user's rating is 5 and it is a user-generated content",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereMonth, C.premiereYear \nFROM Content C \nJOIN Reviews R ON C.id = R.contentId \nWHERE R.rating = 5"
          ]
        },
        {
          "interpretation": "Content type, title, and premiere date where the user's rating is 5 and it is an event",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereYear\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5 AND C.type = 'Event'"
          ]
        },
        {
          "interpretation": "Content type, title, and premiere year where the user's rating is 5",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereYear\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5"
          ]
        },
        {
          "interpretation": "Content type, title, and premiere date where the user's rating is 5 and it is a creators' exclusive content",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, date(C.premiereMonth || '-' || C.premiereYear || '-01') AS premiere_date\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5\nAND C.creator IS NOT NULL"
          ]
        },
        {
          "interpretation": "Content type, title, and premiere date where the user's rating is 5 and it is a live broadcast",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereMonth || '/' || C.premiereYear AS premiereDate\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nJOIN Users U ON R.userId = U.id\nWHERE R.rating = 5"
          ]
        },
        {
          "interpretation": "Content type, title, and premiere month where the user's rating is 5",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereMonth\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere month and year where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereMonth, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere year where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the content type, title, and premiere year for the content that received a rating of 5 from a user?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereYear \nFROM Content C \nJOIN Reviews R ON C.id = R.contentId \nWHERE R.rating = 5"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere month of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereMonth FROM Content"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "TV Series, Game of Thrones, Fantasy, 7",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, genre, creator, premiereMonth\nFROM Content\nWHERE title = 'Game of Thrones' AND genre = 'Fantasy' AND premiereMonth = 7"
          ]
        },
        {
          "interpretation": "TV Series, Stranger Things, Science Fiction, 7",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, genre, premiereMonth FROM Content WHERE title = 'Stranger Things' AND genre = 'Science Fiction' AND premiereMonth = 7"
          ]
        },
        {
          "interpretation": "Film, The Shawshank Redemption, Drama, 1",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, genre, director, runtime FROM Movies WHERE title = 'The Shawshank Redemption'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere month where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereMonth FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere month and year of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereMonth, premiereYear FROM Content"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere year of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereYear FROM Content"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the types, names, genres, and premiere years of content that have a non-null premiere year in the Content table?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type, title, genre, premiereYear FROM Content WHERE premiereYear IS NOT NULL"
          ]
        },
        {
          "interpretation": "What are the types, names, genres, and premiere years of all movies in the Content table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, title, genre, premiereYear FROM Content WHERE type = 'Film'"
          ]
        },
        {
          "interpretation": "What are the types, titles, genres, and premiere years of the content created by a specific creator in the Content table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, title, genre, premiereYear FROM Content WHERE creator = 'The Duffer Brothers'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere date of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereMonth FROM Content",
        "SELECT type, title, genre, premiereYear FROM Content",
        "SELECT type, title, genre, premiereMonth, premiereYear FROM Content"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Series, Game of Thrones, Fantasy, 2011-04-17",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, genre, premiereDate FROM Series WHERE title = 'Game of Thrones'"
          ]
        },
        {
          "interpretation": "Series, Breaking Bad, Crime Drama, 2008-01-20",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, genre, premiereDate FROM Series WHERE title = 'Breaking Bad' AND genre = 'Crime Drama' AND premiereDate = '2008-01-20'"
          ]
        },
        {
          "interpretation": "TV Series, Stranger Things, Science Fiction, 2016-07-01",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Content WHERE type = 'TV Series' AND title = 'Stranger Things' AND genre = 'Science Fiction' AND premiereMonth = 7 AND premiereYear = 2016"
          ]
        },
        {
          "interpretation": "Film, Inception, Action, Adventure, Sci-Fi, 2010-07-01",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, genre, director, runtime, release_date FROM Movies WHERE title = 'Inception'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the monetary value of the longest project?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the total monetary value associated with the project that has the latest end date?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE EndDate = (SELECT MAX(EndDate) FROM Project)"
          ]
        },
        {
          "interpretation": "What is the sum of the monetary values of all projects, focusing only on the longest one?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Monetary_Value) FROM Project WHERE EndDate - StartDate = (SELECT MAX(EndDate - StartDate) FROM Project)"
          ]
        },
        {
          "interpretation": "What is the average monetary value of the longest project?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(Monetary_Value) FROM Project WHERE (EndDate - StartDate) = (SELECT MAX(EndDate - StartDate) FROM Project)"
          ]
        },
        {
          "interpretation": "What is the total monetary value of the project that started the earliest and ended the latest?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE StartDate = (SELECT MIN(StartDate) FROM Project) AND EndDate = (SELECT MAX(EndDate) FROM Project)"
          ]
        },
        {
          "interpretation": "What is the total monetary value of the longest ongoing project?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE EndDate - StartDate = (SELECT MAX(EndDate - StartDate) FROM Project)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the maintenance cost of Residential Building?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\"",
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\"",
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the total maintenance cost associated with the Residential Building?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.RentalRate * E.DailyUsage) AS TotalMaintenanceCost\nFROM Equipment E\nJOIN Project P ON 1=1\nWHERE P.Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "What is the budgeted maintenance cost for the Residential Building?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "What is the estimated maintenance cost for the Residential Building project?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 0.1 * Monetary_Value AS Estimated_Maintenance_Cost FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "What is the maintenance cost percentage for the Residential Building project?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "How much money and what percentage of the budget can we use for maintenance on the residential building?",
      "gold_queries": [
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the financial allocation and its proportional share of the budget intended for maintaining the equipment and materials used in the residential building project?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Monetary_Value, P.Percentage_Of_Budget\nFROM Project P\nWHERE P.Infrastructure = 'Residential Building'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment is required for architect?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What personal protective equipment is required for all employees with the position 'Architect'?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.personalProtectiveEquipment\nFROM Employee AS T1\nJOIN Safety AS T2 ON T1.employeeID = T2.employeeID\nWHERE T1.position = 'Architect'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment will Mike Johnson need?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Safety data for the employee named Mike Johnson",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms, constructionWorker\nFROM Safety\nWHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson')"
          ]
        },
        {
          "interpretation": "Safetys record for Mike Johnson",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Safety.*\nFROM Safety\nJOIN Employee ON Safety.employeeID = Employee.employeeID\nWHERE Employee.firstName = 'Mike' AND Employee.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "PersonalProtectiveEquipment required for the construction worker Mike Johnson",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.personalProtectiveEquipment \nFROM Employee AS T1 \nJOIN Safety AS T2 ON T1.employeeID = T2.employeeID \nWHERE T1.firstName = 'Mike' AND T1.lastName = 'Johnson'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment and training programs are required for architect?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What personal protective equipment and training programs are listed in the Safety records for an employee with the position Architect?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms \nFROM Safety \nWHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What safety measures will Mike Johnson require?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\"",
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\"",
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Training mandated for an employee named Mike Johnson",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT trainingPrograms FROM Safety JOIN Employee ON Safety.employeeID = Employee.employeeID WHERE Employee.firstName = 'Mike' AND Employee.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "Personal protective items for an employee named Mike Johnson in the safety records",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson')"
          ]
        },
        {
          "interpretation": "Construction worker safety procedures for Mike Johnson",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms, constructionWorker\nFROM Safety\nJOIN Employee ON Safety.employeeID = Employee.employeeID\nWHERE Employee.firstName = 'Mike' AND Employee.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "Construction worker safety procedures as per employment record",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT safetyID, employeeID, personalProtectiveEquipment, trainingPrograms, constructionWorker FROM Safety"
          ]
        },
        {
          "interpretation": "Construction worker safety regulations as per employment",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT employeeID, personalProtectiveEquipment, trainingPrograms, constructionWorker \nFROM Safety"
          ]
        },
        {
          "interpretation": "Safety measures required for Mike Johnson's role",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms\nFROM Safety\nJOIN Employee ON Safety.employeeID = Employee.employeeID\nWHERE Employee.firstName = 'Mike' AND Employee.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "Construction worker safety measures as required by the job",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT employeeID, personalProtectiveEquipment, trainingPrograms\nFROM Safety\nWHERE constructionWorker IN ('Novice', 'Intermediate', 'Skilled', 'Experienced', 'Expert')"
          ]
        },
        {
          "interpretation": "Training programs for an employee Mike Johnson",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT safetyID, trainingPrograms \nFROM Safety \nINNER JOIN Employee ON Safety.employeeID = Employee.employeeID \nWHERE Employee.firstName = 'Mike' AND Employee.lastName = 'Johnson'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.375,
        "f1_score": 0.5454545454545454,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What safety measures will the architect require?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\"",
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\"",
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Safety regulations specific to an architect's role",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms, constructionWorker \nFROM Safety \nJOIN Employee ON Safety.employeeID = Employee.employeeID \nWHERE Employee.position = 'Architect'"
          ]
        },
        {
          "interpretation": "Training programs needed for the role of architect",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.trainingPrograms \nFROM Safety AS T1 \nJOIN Employee AS T2 \nON T1.employeeID = T2.employeeID \nWHERE T2.position = 'Architect'"
          ]
        },
        {
          "interpretation": "Personal protective equipment required for an architect",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment\nFROM Safety\nJOIN Employee ON Safety.employeeID = Employee.employeeID\nWHERE Employee.position = 'Architect'"
          ]
        },
        {
          "interpretation": "Health and safety guidelines for architects",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms \nFROM Safety \nJOIN Employee ON Safety.employeeID = Employee.employeeID \nWHERE position = 'Architect'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What training programs will Mike Johnson need?",
      "gold_queries": [
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What training programs does Mike Johnson require?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT trainingPrograms FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment and training programs will Mike Johnson need?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The PPE and training programs needed by the employee Mike Johnson specifically",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.personalProtectiveEquipment, T1.trainingPrograms\nFROM Safety AS T1\nJOIN Employee AS T2 ON T1.employeeID = T2.employeeID\nWHERE T2.firstName = 'Mike' AND T2.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "SafetieID corresponding to employeeID 3's personalProtectiveEquipment and trainingPrograms",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT safetyID, personalProtectiveEquipment, trainingPrograms FROM Safety WHERE employeeID = 3"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What training programs are required for architect?",
      "gold_queries": [
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Architect position safety training programs",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.trainingPrograms \nFROM Employee AS T1 \nJOIN Safety AS T2 \nON T1.employeeID = T2.employeeID \nWHERE T1.position = 'Architect'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the maintenance cost of the longest Project?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)",
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)",
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the maintenance cost of the Project that has the longest duration period?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Monetary_Value * 0.1 AS MaintenanceCost\nFROM Project P\nORDER BY strftime('%J', P.EndDate) - strftime('%J', P.StartDate) DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "What is the maintenance cost of the Project that lasts the longest in terms of total days?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT (julianday(EndDate) - julianday(StartDate)) * (SELECT SUM(DailyUsage * RentalRate) FROM Equipment) AS MaintenanceCost\nFROM Project\nORDER BY (julianday(EndDate) - julianday(StartDate)) DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "What is the maintenance cost of the Project that spans the greatest number of days?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 0 AS MaintenanceCost"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the budget percentage of the longest project?",
      "gold_queries": [
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the budget percentage of the project that started earliest?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project ORDER BY StartDate ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "What is the budget percentage of the project that has the highest span of dates?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project ORDER BY (julianday(EndDate) - julianday(StartDate)) DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "What is the budget percentage of the project with the longest timeline?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project WHERE (EndDate - StartDate) = (SELECT MAX(EndDate - StartDate) FROM Project)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "How much money does it cost to maintain a residential building?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "How much does it cost to maintain the infrastructure for Project1?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE Name = 'Project1'"
          ]
        },
        {
          "interpretation": "What are the maintenance costs associated with the residential building project?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.RentalRate * E.DailyUsage) AS MaintenanceCosts\nFROM Equipment E\nJOIN Project P ON 1=1\nWHERE P.Infrastructure = 'Residential Building'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the monetary value and budget percentage of the longest project?",
      "gold_queries": [
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the overall budget allocation and financial value of the project that had the longest duration?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Monetary_Value, Percentage_Of_Budget \nFROM Project \nORDER BY (julianday(EndDate) - julianday(StartDate)) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "What are the financial metrics (Monetary_Value and Percentage_Of_Budget) of the project with the highest project duration?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value, Percentage_Of_Budget FROM Project ORDER BY (EndDate - StartDate) DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What percentage of the budget can we use for maintenance on the residential building?",
      "gold_queries": [
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What portion of the total budget is designated for upkeep related to the residential building?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "How much budget can be directed towards the maintenance of the residential building's infrastructure according to its percentage?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value * Percentage_Of_Budget / 100 FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "How much of the Project1's budget can be reserved for keeping the facilities in good condition?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value * (1 - Percentage_Of_Budget / 100) FROM Project WHERE Name = 'Project1'"
          ]
        },
        {
          "interpretation": "What share of the Project1's budget is allowable for maintenance activities?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget * 0.2 AS Maintenance_Budget_Share\nFROM Project\nWHERE Name = 'Project1'"
          ]
        },
        {
          "interpretation": "Could the maintenance costs for the residential building take up to its budget percentage?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Equipment.RentalRate * Equipment.DailyUsage) AS MaintenanceCost\nFROM Project\nJOIN Equipment ON 1=1\nWHERE Project.Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "Can maintenance expenses for the residential building exceed its percentage of the overall budget?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT (SELECT SUM(T2.RentalRate * DailyUsage) FROM Project AS T1 JOIN Equipment AS T2 ON T1.id = T2.id WHERE Infrastructure = 'Residential Building') > Monetary_Value * Percentage_Of_Budget / 100 FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "What fraction of the Project1's financial plan is preserved for maintenance purposes?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 1 - Percentage_Of_Budget / 100 FROM Project WHERE Name = 'Project1'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What are the eligibility criteria required for this loan?",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the eligibility criteria required for the second loan in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria FROM EligibilityAndDocuments WHERE LoanID = 2"
          ]
        },
        {
          "interpretation": "What are the eligibility criteria required for loans with a given interest rate?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria \nFROM EligibilityAndDocuments \nJOIN Loans ON EligibilityAndDocuments.LoanID = Loans.LoanID \nWHERE Loans.Rate = '5.5%'"
          ]
        },
        {
          "interpretation": "What are the eligibility criteria required for inactive loans?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria FROM EligibilityAndDocuments WHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Inactive')"
          ]
        },
        {
          "interpretation": "What are the eligibility criteria required for loans in general?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Eligibility_Criteria FROM EligibilityAndDocuments"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What are the necessary documents required for this loan?",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Documentation_Requirements where Business_Loan_Application is True",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments WHERE Business_Loan_Application = 1"
          ]
        },
        {
          "interpretation": "Eligibility_Criteria for Business_Loan_Application",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria FROM EligibilityAndDocuments WHERE Business_Loan_Application = 1"
          ]
        },
        {
          "interpretation": "Eligibility_Criteria, Documentation_Requirements for LoanID 1",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments WHERE LoanID = 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What were the requirements for each loan.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId",
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId",
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Business_Loan_Application",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Business_Loan_Application FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "Documentation_Requirements",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "Which loans met the approval status and what were the requirements",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'",
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'",
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "For which loans is the approval status \"Approved,\" and what are the associated documentation and eligibility requirements?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Ed.ApplicationID, Ed.Eligibility_Criteria, Ed.Documentation_Requirements\nFROM EligibilityAndDocuments Ed\nJOIN Loans L ON Ed.LoanID = L.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "Can you list the loans that are approved and provide the related eligibility criteria and documentations needed?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.LoanID, L.Amount, L.Term, L.Rate, L.ApprovalDate, E.Eligibility_Criteria, E.Documentation_Requirements\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "Which loans have an \"Approved\" status, and what are the eligibility criteria and documentation requirements for those loans?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Eligibility_Criteria, E.Documentation_Requirements\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "What are the specific approval statuses of the loans, and what are the detailed requirements including eligibility criteria and necessary documents?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.Status, E.Eligibility_Criteria, E.Documentation_Requirements\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID"
          ]
        },
        {
          "interpretation": "Which loans have been approved, and what documents are required for loan approval based on the criteria?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.LoanID, L.Status, E.Documentation_Requirements\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID\nWHERE L.Status = 'Approved'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.2,
        "f1_score": 0.25,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "List the eligibility criteria  for all approved loans, the document requirements for them and these loans.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the approval status of loans and their associated eligibility criteria and document requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Loans.Status, EligibilityAndDocuments.Eligibility_Criteria, EligibilityAndDocuments.Documentation_Requirements\nFROM Loans\nJOIN EligibilityAndDocuments ON Loans.LoanID = EligibilityAndDocuments.LoanID"
          ]
        },
        {
          "interpretation": "List the eligibility criteria for all approved loans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria FROM EligibilityAndDocuments WHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        },
        {
          "interpretation": "List the eligibility criteria and document requirements for loans that are in the approved status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Eligibility_Criteria, T1.Documentation_Requirements\nFROM EligibilityAndDocuments AS T1\nJOIN Loans AS T2 ON T1.LoanID = T2.LoanID\nWHERE T2.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the loans that are currently approved, along with the eligibility criteria and required documents.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT L.LoanID, E.Eligibility_Criteria, E.Documentation_Requirements\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the loans that have been approved and include the related eligibility criteria and document requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.LoanID, L.Amount, L.Term, L.Rate, L.ApprovalDate, L.Status, E.Eligibility_Criteria, E.Documentation_Requirements\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the document requirements for all approved loans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Documentation_Requirements \nFROM EligibilityAndDocuments AS T1 \nJOIN Loans AS T2 ON T1.LoanID = T2.LoanID \nWHERE T2.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the loans approved by date, including their eligibility criteria and document requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Loans.ApprovalDate, EligibilityAndDocuments.Eligibility_Criteria, EligibilityAndDocuments.Documentation_Requirements\nFROM Loans\nJOIN EligibilityAndDocuments ON Loans.LoanID = EligibilityAndDocuments.LoanID\nWHERE Loans.Status = 'Approved'\nORDER BY Loans.ApprovalDate"
          ]
        },
        {
          "interpretation": "List the loans that are approved along with their eligibility criteria and document requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.LoanID, L.Amount, L.Term, L.Rate, L.ApprovalDate, E.Eligibility_Criteria, E.Documentation_Requirements\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID\nWHERE L.Status = 'Approved'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What are the eligibility criteria required for this loan and necessary documents for it?",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the stipulated criteria and necessary files for loan eligibility?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "What specific criteria and documents are required for applying to this loan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments WHERE LoanID = 1"
          ]
        },
        {
          "interpretation": "What are the eligibility requirements and mandatory paperwork for securing this loan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments WHERE LoanID = (SELECT LoanID FROM Loans WHERE Status = 'Pending')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "List the document requirements for all approved loans and these loans.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the loans and their document requirements for all approved loans.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT L.LoanID, E.Documentation_Requirements \nFROM Loans L \nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID \nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the document requirements for only the approved loans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments WHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "List the eligibility criteria for all approved loans and these loans.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the approved loan details along with their eligibility criteria.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.LoanID, L.Amount, L.Term, L.Rate, L.ApprovalDate, L.Status, E.Eligibility_Criteria\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "Display the loans that are approved and the specific eligibility criteria required for them.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria \nFROM Loans \nINNER JOIN EligibilityAndDocuments ON Loans.LoanID = EligibilityAndDocuments.LoanID \nWHERE Loans.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the loan approval conditions and the loans that satisfy these conditions, specifically for those loans with an approved status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements, LoanID\nFROM EligibilityAndDocuments\nWHERE LoanID IN (\n    SELECT LoanID\n    FROM Loans\n    WHERE Status = 'Approved'\n)"
          ]
        },
        {
          "interpretation": "Display the loan approval eligibility and the related loans, ensuring that only approved loans are included.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.Eligibility_Criteria, l.LoanID, l.Amount, l.Term, l.Rate, l.ApprovalDate\nFROM EligibilityAndDocuments e\nJOIN Loans l ON e.LoanID = l.LoanID\nWHERE l.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the approved loans and the eligibility criteria required to be met.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Loans.Amount, EligibilityAndDocuments.Eligibility_Criteria\nFROM Loans\nJOIN EligibilityAndDocuments ON Loans.LoanID = EligibilityAndDocuments.LoanID\nWHERE Loans.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the loan approval criteria alongside the loans that have been approved.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria \nFROM EligibilityAndDocuments \nWHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        },
        {
          "interpretation": "List the approved loans and their associated eligibility criteria requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Eligibility_Criteria, E.Documentation_Requirements\nFROM EligibilityAndDocuments E\nJOIN Loans L ON E.LoanID = L.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "Display the loans that are approved and their associated eligibility criteria.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Loans.Amount, Loans.Term, Loans.Rate, EligibilityAndDocuments.Eligibility_Criteria\nFROM Loans\nJOIN EligibilityAndDocuments ON Loans.LoanID = EligibilityAndDocuments.LoanID\nWHERE Loans.Status = 'Approved'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "Show me cities where more than 60,000 people live and foreign born population of that places.",
      "gold_queries": [
        "select municipality, Foreign_born_Population from population where Total_Population > 60000"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display municipalities that have more than 60,000 residents and include the count of foreign-born individuals.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population \nFROM Population \nWHERE Total_Population > 60000"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "show me immigrants in each city",
      "gold_queries": [
        "select Foreign_born_Population, municipality from population",
        "select Naturalized_Citizens, municipality from population",
        "select Foreign_born_Population, Naturalized_Citizens, municipality from population"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "display the foreign-born population for each municipality",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population FROM Population"
          ]
        },
        {
          "interpretation": "provide the percentage of foreign-born population in each city",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, (Foreign_born_Population * 100.0 / Total_Population) AS Foreign_Born_Percentage FROM Population"
          ]
        },
        {
          "interpretation": "list cities based on the descending order of foreign-born population",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population ORDER BY Foreign_born_Population DESC"
          ]
        },
        {
          "interpretation": "present the foreign-born population as a percentage of the total population for each city",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, (Foreign_born_Population / Total_Population * 100) AS Foreign_Born_Percentage FROM Population"
          ]
        },
        {
          "interpretation": "list the naturalized citizens alongside the foreign-born population for each city",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population, Naturalized_Citizens FROM Population"
          ]
        },
        {
          "interpretation": "show the difference between naturalized citizens and foreign-born population for each city",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Naturalized_Citizens - Foreign_born_Population AS Difference \nFROM Population"
          ]
        },
        {
          "interpretation": "display the total immigrant population (naturalized and foreign-born) for each municipality",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, (Foreign_born_Population + Naturalized_Citizens) AS Total_Immigrant_Population FROM Population"
          ]
        },
        {
          "interpretation": "present the total population including immigrants for each city",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Total_Population FROM Population"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.25,
        "f1_score": 0.36363636363636365,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "List the naturalised citizen population per city.",
      "gold_queries": [
        "select Naturalized_Citizens, municipality from population"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the city and its naturalized citizen population.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, Naturalized_Citizens FROM Population"
          ]
        },
        {
          "interpretation": "List the foreign-born population along with naturalized citizens per city.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Foreign_born_Population, Naturalized_Citizens FROM Population"
          ]
        },
        {
          "interpretation": "Show the percentage of naturalized citizens per city.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, (Naturalized_Citizens * 100.0 / Total_Population) AS Naturalized_Citizens_Percentage FROM Population"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "show me cities and immigrants where more than 60,000 people live",
      "gold_queries": [
        "select municipality, Foreign_born_Population from population where Total_Population > 60000",
        "select municipality, Naturalized_Citizens from population where Total_Population > 60000",
        "select municipality, Foreign_born_Population, Naturalized_Citizens from population where Total_Population > 60000"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me cities and the ratio of foreign-born population to total population where the former is more than 60%",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, CAST(Foreign_born_Population AS REAL) / Total_Population AS Ratio\nFROM Population\nWHERE CAST(Foreign_born_Population AS REAL) * 100 / Total_Population > 60"
          ]
        },
        {
          "interpretation": "Show me cities where foreign-born population is more than 60% of the naturalized citizens",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality \nFROM Population \nWHERE Foreign_born_Population > 0.6 * Naturalized_Citizens"
          ]
        },
        {
          "interpretation": "Show me cities with a total population greater than 60,000 and the number of foreign-born individuals",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population \nFROM Population \nWHERE Total_Population > 60000"
          ]
        },
        {
          "interpretation": "Show me cities with a total population over 60,000 and the naturalized citizens count",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Naturalized_Citizens FROM Population WHERE Total_Population > 60000"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "Show me cities where more than 60,000 people live, along with their foreign born population and naturalized citizens of that places.",
      "gold_queries": [
        "select municipality, Foreign_born_Population, Naturalized_Citizens from population where Total_Population > 60000"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display cities having a population over 60,000, alongside their foreign born and naturalized citizens figures.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population, Naturalized_Citizens FROM Population WHERE Total_Population > 60000"
          ]
        },
        {
          "interpretation": "Show cities where the total population surpasses 60,000, including foreign born and naturalized citizens numbers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Total_Population, Foreign_born_Population, Naturalized_Citizens \nFROM Population \nWHERE Total_Population > 60000"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "Show me cities where more than 60,000 people live and naturalized citizens of that places.",
      "gold_queries": [
        "select municipality, Naturalized_Citizens from population where Total_Population > 60000"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Filter cities based on population and show naturalized citizen counts.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Naturalized_Citizens, Municipality FROM Population WHERE Total_Population > 60000"
          ]
        },
        {
          "interpretation": "Identify cities with a population over 60,000 and the count of naturalized citizens.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, COUNT(Naturalized_Citizens) AS Naturalized_Citizens_Count\nFROM Population\nWHERE Total_Population > 60000\nGROUP BY Municipality"
          ]
        },
        {
          "interpretation": "Filter and list cities with a population greater than 60,000, showing the number of naturalized citizens.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Naturalized_Citizens FROM Population WHERE Total_Population > 60000"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "List the foreign born population per city.",
      "gold_queries": [
        "select Foreign_born_Population, municipality from population"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the count of foreign-born population per town.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, COUNT(Foreign_born_Population) AS Foreign_Born_Population_Count FROM Population GROUP BY Municipality"
          ]
        },
        {
          "interpretation": "Display the percentage of foreign-born population per city.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, (Foreign_born_Population / CAST(Total_Population AS REAL)) * 100 AS Foreign_Born_Percentage FROM Population"
          ]
        },
        {
          "interpretation": "List the foreign-born population for each municipality.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Foreign_born_Population, Municipality FROM Population"
          ]
        },
        {
          "interpretation": "Display the foreign-born population percentage for each municipality.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, (Foreign_born_Population * 100.0 / Total_Population) AS Foreign_Born_Percentage FROM Population"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "What region are women immigrants from?",
      "gold_queries": [
        "SELECT  region_name  FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id WHERE gender  = 'F'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Female immigrants are sourced from which regions?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT T2.region_name \nFROM Immigrants AS T1 \nJOIN Regions AS T2 \nON T1.region_of_origin = T2.region_id \nWHERE T1.gender = 'F'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "Where does the oldest immigrant come from?",
      "gold_queries": [
        "SELECT  country_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id ORDER BY age ASC LIMIT 1",
        "SELECT  region_name  FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id ORDER BY age ASC LIMIT 1",
        "SELECT  country_name, region_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id JOIN Regions ON Immigrants.region_of_origin = Regions.region_id  ORDER BY age ASC LIMIT 1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Ascertain the country of origin based on the oldest immigrant's age.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.country_name \nFROM Immigrants I \nJOIN Countries C ON I.country_of_origin = C.id \nORDER BY I.age DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Determine the region of origin for the oldest immigrant.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name \nFROM Immigrants I \nJOIN Regions R ON I.region_of_origin = R.region_id \nORDER BY I.age DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Who is the oldest immigrant and where is he/she from?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.age, C.country_name\nFROM Immigrants I\nJOIN Countries C ON I.country_of_origin = C.id\nORDER BY I.age DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "List the foreign born and naturalised citizen population per city.",
      "gold_queries": [
        "select Foreign_born_Population, Naturalized_Citizens, municipality from population"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the counts of foreign-born and naturalized citizens for each urban location.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population, Naturalized_Citizens FROM Population"
          ]
        },
        {
          "interpretation": "Detail the foreign-born and naturalized citizen numbers per city.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Foreign_born_Population, Naturalized_Citizens FROM Population"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "the hospital was designed by which architect?",
      "gold_queries": [
        "SELECT name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id\r\nWHERE building_name = 'Hospital'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Architect responsible for the hospital building project",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Architect.name \nFROM Architect \nJOIN Building ON Architect.id = Building.architect_id \nWHERE Building.building_name = 'Hospital'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Show all firms.",
      "gold_queries": [
        "SELECT name\r\nFROM Firm;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "RETRIEVE FIRM DATA;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, address FROM Firm"
          ]
        },
        {
          "interpretation": "EXTRACT ALL FIRM DETAILS;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Firm"
          ]
        },
        {
          "interpretation": "PROVIDE A LIST OF ALL COMPANIES;",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Firm"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Show all architects.",
      "gold_queries": [
        "SELECT name\r\nFROM Architect;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all architects' project details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name, Project.project_name, Project.start_date, Project.end_date\nFROM Architect\nJOIN Building ON Architect.id = Building.architect_id\nJOIN Project ON Building.id = Project.building_id"
          ]
        },
        {
          "interpretation": "Show all architects' associated buildings.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name, Building.building_name FROM Architect JOIN Building ON Architect.id = Building.architect_id"
          ]
        },
        {
          "interpretation": "Show all architects' emails.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT email FROM Architect"
          ]
        },
        {
          "interpretation": "Show all architects' names.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Architect"
          ]
        },
        {
          "interpretation": "Show all architects' employee positions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT position FROM Employee WHERE position = 'Architect'"
          ]
        },
        {
          "interpretation": "Show all architects' firm information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, F.name, F.address \nFROM Architect A \nJOIN Building B ON A.id = B.architect_id \nJOIN Firm F ON B.firm_id = F.id"
          ]
        },
        {
          "interpretation": "Show all architects' names and emails.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email FROM Architect"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Show all architects and firms.",
      "gold_queries": [
        "SELECT Firm.name, Architect.name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id  JOIN Firm ON Building.firm_id = Firm.id;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the connection between all architects and the firms they work for.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Architect.name AS architect_name, Firm.name AS firm_name\nFROM Architect\nJOIN Building ON Architect.id = Building.architect_id\nJOIN Firm ON Building.firm_id = Firm.id"
          ]
        },
        {
          "interpretation": "List all architects and indicate the firm IDs they work for.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name, Building.firm_id\nFROM Architect\nJOIN Building ON Architect.id = Building.architect_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Which firm designed the hospital?",
      "gold_queries": [
        "SELECT name\r\nFROM Firm JOIN Building ON Building.firm_id = Firm.id\r\nWHERE building_name = 'Hospital'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which firm is listed as the architect for the hospital?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Firm.name\nFROM Building\nJOIN Firm ON Building.firm_id = Firm.id\nJOIN Architect ON Building.architect_id = Architect.id\nWHERE Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Which firm owns the project for the hospital?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Firm.name FROM Firm\nJOIN Building ON Firm.id = Building.firm_id\nJOIN Project ON Building.id = Project.building_id\nWHERE Building.building_name = 'Hospital'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Who designed the hospital?",
      "gold_queries": [
        "SELECT name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id\r\nWHERE building_name = 'Hospital'",
        "SELECT name\r\nFROM Firm JOIN Building ON Building.firm_id = Firm.id\r\nWHERE building_name = 'Hospital'",
        "SELECT Firm.name, Architect.name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id  JOIN Firm ON Building.firm_id = Firm.id\r\nWHERE building_name = 'Hospital'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Employee responsible for the hospital design",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.employee_name \nFROM Building AS T1 \nJOIN Employee AS T2 ON T1.firm_id = T2.firm_id \nWHERE T1.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Building record creator for the hospital",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Building WHERE building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Firm that designed the hospital",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Firm.name\nFROM Building\nJOIN Firm ON Building.firm_id = Firm.id\nWHERE Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Electrician involved in the hospital design",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employee.employee_name \nFROM Employee \nINNER JOIN Firm ON Employee.firm_id = Firm.id \nINNER JOIN Building ON Firm.id = Building.firm_id \nWHERE Employee.position = 'Electrician' AND Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Superintendent of the hospital project",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.employee_name \nFROM Employee AS T1 \nJOIN Firm AS T2 ON T1.firm_id = T2.id \nJOIN Building AS T3 ON T2.id = T3.firm_id \nJOIN Project AS T4 ON T3.id = T4.building_id \nWHERE T1.position = 'Superintendent' AND T3.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Person who specified materials for the hospital",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name\nFROM Architect A\nJOIN Building B ON A.id = B.architect_id\nWHERE B.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Person in charge of the hospital project",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Architect AS T1 JOIN Building AS T2 ON T1.id = T2.architect_id JOIN Project AS T3 ON T2.id = T3.building_id WHERE T3.project_name = 'Hospital Expansion'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.2857142857142857,
        "f1_score": 0.4,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Which architect and firm designed the hospital?",
      "gold_queries": [
        "SELECT Firm.name, Architect.name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id  JOIN Firm ON Building.firm_id = Firm.id\r\nWHERE building_name = 'Hospital'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Firm that commissioned the architect to design the hospital",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name \nFROM Firm AS T1 \nJOIN Building AS T2 ON T1.id = T2.firm_id \nJOIN Architect AS T3 ON T2.architect_id = T3.id \nWHERE T2.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Architect and firm that designed the hospital building",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Architect.name, Firm.name\nFROM Architect\nJOIN Building ON Architect.id = Building.architect_id\nJOIN Firm ON Building.firm_id = Firm.id\nWHERE Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Architect and their firm that had the project for the hospital",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name, f.name\nFROM Architect a\nJOIN Building b ON a.id = b.architect_id\nJOIN Firm f ON b.firm_id = f.id\nJOIN Project p ON b.id = p.building_id\nWHERE b.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Firm responsible for the hospital project and the architect",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Firm.name AS FirmName, Architect.name AS ArchitectName\nFROM Firm\nJOIN Building ON Firm.id = Building.firm_id\nJOIN Architect ON Building.architect_id = Architect.id\nJOIN Project ON Building.id = Project.building_id\nWHERE Project.project_name = 'Hospital Expansion'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Show all designers",
      "gold_queries": [
        "SELECT name\r\nFROM Architect;",
        "SELECT name\r\nFROM Firm;",
        "SELECT Firm.name, Architect.name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id  JOIN Firm ON Building.firm_id = Firm.id;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all individuals associated with designing projects",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name FROM Architect\nJOIN Building ON Architect.id = Building.architect_id\nJOIN Project ON Building.id = Project.building_id"
          ]
        },
        {
          "interpretation": "Show all employees with the position 'Architect'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT employee_name FROM Employee WHERE position = 'Architect'"
          ]
        },
        {
          "interpretation": "Show all workers with design roles in the database",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT employee_name FROM Employee WHERE position LIKE '%Designer%'"
          ]
        },
        {
          "interpretation": "Show all firms' designated designers",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT F.name, A.name \nFROM Firm F \nJOIN Building B ON F.id = B.firm_id \nJOIN Architect A ON B.architect_id = A.id"
          ]
        },
        {
          "interpretation": "Show all architects",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Architect"
          ]
        },
        {
          "interpretation": "Show all building designers",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT architect_id, COUNT(*) AS number_of_designs\nFROM Building\nGROUP BY architect_id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.3333333333333333,
        "f1_score": 0.4444444444444444,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "Which region does the oldest immigrant come from?",
      "gold_queries": [
        "SELECT  region_name  FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id ORDER BY age ASC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which region does the immigrant with the highest age come from?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name\nFROM Immigrants I\nJOIN Regions R ON I.region_of_origin = R.region_id\nORDER BY I.age DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "Which region and country does the oldest immigrant come from?",
      "gold_queries": [
        "SELECT  country_name, region_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id JOIN Regions ON Immigrants.region_of_origin = Regions.region_id  ORDER BY age ASC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which region and country does the oldest male immigrant come from?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name, C.country_name\nFROM Immigrants I\nJOIN Regions R ON I.region_of_origin = R.region_id\nJOIN Countries C ON I.country_of_origin = C.id\nWHERE I.gender = 'M'\nORDER BY I.age DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Which region with the oldest immigrant's origin country?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name \nFROM Regions R \nJOIN Immigrants I ON R.region_id = I.region_of_origin \nORDER BY I.age DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Which region and country does the oldest female immigrant come from?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name, C.country_name \nFROM Immigrants I \nJOIN Regions R ON I.region_of_origin = R.region_id \nJOIN Countries C ON I.country_of_origin = C.id \nWHERE I.gender = 'F' \nORDER BY I.age DESC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "What country and region do women immigrants come from?",
      "gold_queries": [
        "SELECT  country_name, region_of_origin  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id JOIN Regions ON Immigrants.region_of_origin = Regions.region_id  WHERE gender  = 'F'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What countries and regions are the origin places for female immigrants?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.country_name, r.region_name \nFROM Immigrants i \nJOIN Countries c ON i.country_of_origin = c.id \nJOIN Regions r ON i.region_of_origin = r.region_id \nWHERE i.gender = 'F'"
          ]
        },
        {
          "interpretation": "What are the country_of_origin and region_of_origin values for female immigrants?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_of_origin, region_of_origin FROM Immigrants WHERE gender = 'F'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "What are the average age rating and average critical rating for all action movies?",
      "gold_queries": [
        "SELECT AVG(ageRating), AVG(criticalRating) FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the average age rating and average critical rating for all movies in the 'Action' genre?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT AVG(T2.ageRating), AVG(T2.criticalRating) \nFROM Movie AS T1 \nJOIN Rating AS T2 ON T1.id = T2.movieId \nJOIN Genre AS T3 ON T1.genreId = T3.id \nWHERE T3.name = 'Action'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "What is the average rating for all action movies?",
      "gold_queries": [
        "SELECT AVG(ageRating) AS average_rating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";",
        "SELECT AVG(criticalRating) AS average_rating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";",
        "SELECT AVG(ageRating), AVG(criticalRating) FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the average ageRating for all movies in the Action genre?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(ageRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))"
          ]
        },
        {
          "interpretation": "What is the average of general ratings for all Action movies?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(rating) FROM Review INNER JOIN Movie ON Review.movieId = Movie.id INNER JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = 'Action'"
          ]
        },
        {
          "interpretation": "What is the average of TV show ratings for movies in the Action genre?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(criticalRating) \nFROM Rating \nJOIN Movie ON Rating.movieId = Movie.id \nJOIN Genre ON Movie.genreId = Genre.id \nWHERE Genre.name = 'Action' AND Rating.tvShow = 1"
          ]
        },
        {
          "interpretation": "What is the average criticalRating for all movies in the Action genre?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(R.criticalRating) \nFROM Rating R \nJOIN Movie M ON R.movieId = M.id \nJOIN Genre G ON M.genreId = G.id \nWHERE G.name = 'Action'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "What is the average age rating for all action movies?",
      "gold_queries": [
        "SELECT AVG(ageRating) AS average_rating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the average age rating for movies featuring Tom Hanks as an actor?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(R.ageRating) \nFROM Rating R \nJOIN Review V ON R.movieId = V.movieId \nJOIN Actor A ON V.actorId = A.id \nWHERE A.firstName = 'Tom' AND A.lastName = 'Hanks'"
          ]
        },
        {
          "interpretation": "What is the average age rating for movies released after 2010?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(ageRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE releaseDate > '2010-12-31')"
          ]
        },
        {
          "interpretation": "What is the average age rating for all horror movies?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(ageRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Horror'))"
          ]
        },
        {
          "interpretation": "What is the average age rating for all movies in the 'Action' genre?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT AVG(R.ageRating) FROM Rating R JOIN Movie M ON R.movieId = M.id JOIN Genre G ON M.genreId = G.id WHERE G.name = 'Action'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "Rank the movies based on their critical rating, from highest to lowest.",
      "gold_queries": [
        "SELECT movieId, criticalRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY criticalRating DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Order the movies by the critical rating, descending.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title \nFROM Movie \nJOIN Rating ON Movie.id = Rating.movieId \nORDER BY Rating.criticalRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on critical rating scores, from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.title, R.criticalRating\nFROM Movie AS M\nJOIN Rating AS R ON M.id = R.movieId\nORDER BY R.criticalRating DESC"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "Rank the movies based on their ratings from highest to lowest.",
      "gold_queries": [
        "SELECT movieId, ageRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating DESC;",
        "SELECT movieId, criticalRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY criticalRating DESC;",
        "SELECT movieId, ageRating, criticalRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating, criticalRating DESC;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Rank the movies based on the average ratings given by a specific director from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, AVG(Review.rating) AS averageRating\nFROM Movie\nJOIN Director ON Movie.directorId = Director.id\nJOIN Review ON Movie.id = Review.movieId\nWHERE Director.firstName = 'SpecificFirstName' AND Director.lastName = 'SpecificLastName'\nGROUP BY Movie.id\nORDER BY averageRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on the average ratings given by a specific genre from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.title, AVG(R.rating) AS averageRating\nFROM Movie M\nJOIN Genre G ON M.genreId = G.id\nJOIN Review R ON M.id = R.movieId\nWHERE G.name = 'Action'\nGROUP BY M.id\nORDER BY averageRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on their average critical ratings from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title\nFROM Movie m\nJOIN Rating r ON m.id = r.movieId\nGROUP BY m.id\nORDER BY AVG(r.criticalRating) DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on the sum of all ratings from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, SUM(Review.rating) AS totalRating\nFROM Movie\nJOIN Review ON Movie.id = Review.movieId\nGROUP BY Movie.id\nORDER BY totalRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on the number of reviews from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, COUNT(Review.id) AS reviewCount \nFROM Movie \nJOIN Review ON Movie.id = Review.movieId \nGROUP BY Movie.id \nORDER BY reviewCount DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on their average age ratings from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.title, AVG(R.ageRating) AS averageAgeRating\nFROM Movie M\nJOIN Rating R ON M.id = R.movieId\nGROUP BY M.id\nORDER BY averageAgeRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on the number of 5-star reviews from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title\nFROM Movie m\nJOIN (\n    SELECT movieId, COUNT(*) AS fiveStarCount\n    FROM Review\n    WHERE rating = 5\n    GROUP BY movieId\n) r ON m.id = r.movieId\nORDER BY r.fiveStarCount DESC"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "What is the average critical rating for all action movies?",
      "gold_queries": [
        "SELECT AVG(criticalRating) AS average_rating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "Rank the movies based on their age rating, from highest to lowest.",
      "gold_queries": [
        "SELECT movieId, ageRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the movies based on the descending age rating.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title \nFROM Movie m \nJOIN Rating r ON m.id = r.movieId \nORDER BY r.ageRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on their age rating in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, Rating.ageRating\nFROM Movie\nJOIN Rating ON Movie.id = Rating.movieId\nORDER BY Rating.ageRating DESC"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "Rank the movies based on their age and critical ratings, from highest to lowest.",
      "gold_queries": [
        "SELECT movieId, ageRating, criticalRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating, criticalRating DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Rank the movies based on their age ratings, from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.movieId = T2.id ORDER BY T1.ageRating DESC"
          ]
        },
        {
          "interpretation": "Rank the genres based on their age and critical ratings, from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT g.name, AVG(r.ageRating) AS avg_age_rating, AVG(r.criticalRating) AS avg_critical_rating\nFROM Genre g\nJOIN Movie m ON g.id = m.genreId\nJOIN Rating r ON m.id = r.movieId\nGROUP BY g.id\nORDER BY avg_critical_rating DESC, avg_age_rating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on their critical ratings, from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, Rating.criticalRating\nFROM Movie\nJOIN Rating ON Movie.id = Rating.movieId\nORDER BY Rating.criticalRating DESC"
          ]
        },
        {
          "interpretation": "Rank the actors based on their age and critical ratings, from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.firstName, a.lastName\nFROM Actor a\nJOIN Review r ON a.id = r.actorId\nJOIN Rating ra ON r.movieId = ra.movieId\nORDER BY r.rating * ra.criticalRating DESC"
          ]
        },
        {
          "interpretation": "Rank the directors based on their age and critical ratings, from highest to lowest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT D.firstName, D.lastName\nFROM Director D\nJOIN Movie M ON D.id = M.directorId\nJOIN Rating R ON M.id = R.movieId\nORDER BY D.id, R.criticalRating DESC"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "List the theater company and producers for all plays and arrange them by ascending premiere date.",
      "gold_queries": [
        "SELECT theater_company, producer FROM Stage_Play ORDER BY year_premiered ASC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the theater company and producer for each play, arranged in chronological order based on the year the play was premiered.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT theater_company, producer FROM Stage_Play ORDER BY year_premiered"
          ]
        },
        {
          "interpretation": "List the premiere year of each play followed by the theater company and producer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT year_premiered, theater_company, producer FROM Stage_Play"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "List the theater company for all plays and arrange them by ascending premiere date.",
      "gold_queries": [
        "SELECT theater_company FROM Stage_Play ORDER BY year_premiered ASC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the theater company of plays ordered alphabetically by decreasing premiere date",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company FROM Stage_Play ORDER BY year_premiered DESC"
          ]
        },
        {
          "interpretation": "List the theater company for the earliest premiered play(s)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company FROM Stage_Play WHERE year_premiered = (SELECT MIN(year_premiered) FROM Stage_Play)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "What theater companies made all the dramas?",
      "gold_queries": [
        "SELECT theater_company FROM \"Stage_Play\" WHERE genre = 'Drama';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "How many different theater companies were involved in dramatizations?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT theater_company) FROM Stage_Play WHERE genre = 'Drama'"
          ]
        },
        {
          "interpretation": "What theater companies staged all the drama plays?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT theater_company FROM Stage_Play WHERE genre = 'Drama'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "Show me who staged all the performances and arrange them by premiere date in ascending order.",
      "gold_queries": [
        "SELECT theater_company FROM Stage_Play ORDER BY year_premiered ASC;",
        "SELECT producer FROM Stage_Play ORDER BY year_premiered ASC;",
        "SELECT theater_company, producer FROM Stage_Play ORDER BY year_premiered ASC;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the distinct theater companies and their premier years in ascending order, indicating their involvement in stage performances.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT theater_company, year_premiered FROM Stage_Play ORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "Show the theater companies and the total number of plays they staged, ordered by the premiere date in ascending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company, COUNT(*) FROM Stage_Play GROUP BY theater_company ORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "Show me the names of the theater companies and directors who staged all the performances and arrange them by premiere date in ascending order.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company, producer FROM Stage_Play ORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "Display the theater companies and the first play they ever staged, listed in ascending order by the premiere date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company, title \nFROM Stage_Play \nORDER BY year_premiered ASC"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "What theater companies and producers made all the dramas?",
      "gold_queries": [
        "SELECT theater_company, producer FROM \"Stage_Play\" WHERE genre = 'Drama';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Who are the theater companies and producers that participated in all drama premieres?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT theater_company, producer FROM Stage_Play WHERE genre = 'Drama' GROUP BY theater_company, producer HAVING COUNT(*) = (SELECT COUNT(*) FROM Stage_Play WHERE genre = 'Drama')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "What producers made all the dramas?",
      "gold_queries": [
        "SELECT producer FROM \"Stage_Play\" WHERE genre = 'Drama';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which producers worked on every drama?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT producer FROM Stage_Play WHERE genre = 'Drama' GROUP BY producer HAVING COUNT(DISTINCT genre) = (SELECT COUNT(DISTINCT id) FROM Stage_Play WHERE genre = 'Drama')"
          ]
        },
        {
          "interpretation": "How many producers made only drama stage plays?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT producer) FROM Stage_Play WHERE genre = 'Drama'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "List the producer for all plays and arrange them by ascending premiere date.",
      "gold_queries": [
        "SELECT producer FROM Stage_Play ORDER BY year_premiered ASC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a list of producers, ordered alphabetically by the year of the play's premiere",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT producer FROM Stage_Play ORDER BY year_premiered"
          ]
        },
        {
          "interpretation": "Display the producers of plays, sorted by the play's premiere year in ascending order",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer, theater_company FROM Stage_Play ORDER BY year_premiered ASC"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "Who produced all the dramas?",
      "gold_queries": [
        "SELECT theater_company FROM \"Stage_Play\" WHERE genre = 'Drama';",
        "SELECT producer FROM \"Stage_Play\" WHERE genre = 'Drama';",
        "SELECT theater_company, producer FROM \"Stage_Play\" WHERE genre = 'Drama';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Can a single producer be identified for all drama premieres?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer FROM Stage_Play WHERE genre = 'Drama' GROUP BY producer HAVING COUNT(DISTINCT id) = (SELECT COUNT(*) FROM Stage_Play WHERE genre = 'Drama')"
          ]
        },
        {
          "interpretation": "Are there any drama plays that have the same producer?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer, COUNT(*) FROM Stage_Play WHERE genre = 'Drama' GROUP BY producer HAVING COUNT(*) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "Where do immigrant women come from?",
      "gold_queries": [
        "SELECT  country_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id WHERE gender  = 'F'",
        "SELECT  region_name  FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id WHERE gender  = 'F'",
        "SELECT  country_name, region_of_origin  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id JOIN Regions ON Immigrants.region_of_origin = Regions.region_id  WHERE gender  = 'F'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Which resource is the least expensive?",
      "gold_queries": [
        "select TextbookTitle from textbooks_and_software order by price asc limit 1;",
        "select SoftwareName from textbooks_and_software order by price asc limit 1;",
        "select TextbookTitle, SoftwareName from textbooks_and_software order by price asc limit 1;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Which software is the least expensive?",
      "gold_queries": [
        "select SoftwareName from textbooks_and_software order by price asc limit 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "List the courses and their required softwares.",
      "gold_queries": [
        "Select title, SoftwareName from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the courses and the software accompanying each.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.Title, T.SoftwareName \nFROM Courses C \nJOIN Textbooks_and_Software T \nON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "List the courses and the software required for each student.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.SoftwareName\nFROM Courses C\nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID\nWHERE T.SoftwareName IS NOT NULL"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Which textbook is the least expensive?",
      "gold_queries": [
        "select TextbookTitle from textbooks_and_software order by price asc limit 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which textbook has the lowest price?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT TextbookTitle FROM Textbooks_and_Software ORDER BY Price LIMIT 1"
          ]
        },
        {
          "interpretation": "What is the most affordable item listed under textbooks and software?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName, Price\nFROM Textbooks_and_Software\nORDER BY Price ASC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "What is the Software with the smallest price?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SoftwareName FROM Textbooks_and_Software ORDER BY Price ASC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "List the courses and their required textbooks.",
      "gold_queries": [
        "Select title, TextbookTitle from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the courses with their respective textbook and software titles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.TextbookTitle, T.SoftwareName\nFROM Courses C\nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "List the courses along with the number of textbooks required.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.Quantity \nFROM Courses C \nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "List the courses along with the number of software required.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.Title, COUNT(Textbooks_and_Software.SoftwareName) AS NumberOfSoftware\nFROM Courses\nLEFT JOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID\nWHERE Textbooks_and_Software.SoftwareName IS NOT NULL\nGROUP BY Courses.CourseID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "List the courses and their required textbooks and softwares.",
      "gold_queries": [
        "Select title, TextbookTitle, SoftwareName from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the courses and their required textbooks and software, including the name of the teacher, the description of the course, the subject taught by the teacher, and the date when the course was last taught.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T1.TextbookTitle, T1.SoftwareName, TE.FirstName, TE.LastName, TE.SubjectTaught, MAX(E.Date) AS LastTaughtDate\nFROM Courses C\nJOIN Textbooks_and_Software T1 ON C.CourseID = T1.CourseID\nJOIN Teachers TE ON C.TeacherID = TE.TeacherID\nLEFT JOIN Exams E ON C.CourseID = E.CourseID\nGROUP BY C.CourseID, T1.TextbookTitle, T1.SoftwareName, TE.FirstName, TE.LastName, TE.SubjectTaught"
          ]
        },
        {
          "interpretation": "List the courses and their required textbooks and software, including the name of the teacher, the description of the course, and the subject taught by the teacher.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.Title, Textbooks_and_Software.TextbookTitle, Textbooks_and_Software.SoftwareName, Teachers.FirstName, Teachers.LastName, Courses.Description, Teachers.SubjectTaught\nFROM Courses\nJOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID\nJOIN Teachers ON Courses.TeacherID = Teachers.TeacherID"
          ]
        },
        {
          "interpretation": "List the courses and the total quantity of software required for each course.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, SUM(T.Quantity) AS TotalSoftwareQuantity\nFROM Courses C\nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID\nWHERE T.SoftwareName IS NOT NULL\nGROUP BY C.Title"
          ]
        },
        {
          "interpretation": "List the courses and the total quantity of textbooks required for each course.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.Title, SUM(Textbooks_and_Software.Quantity) AS TotalQuantity\nFROM Courses\nJOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID\nGROUP BY Courses.CourseID, Courses.Title"
          ]
        },
        {
          "interpretation": "List the courses and the subjects taught by the teachers responsible for each course along with the required textbooks and software.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.SubjectTaught, TBS.TextbookTitle, TBS.SoftwareName\nFROM Courses C\nJOIN Teachers T ON C.TeacherID = T.TeacherID\nJOIN Textbooks_and_Software TBS ON C.CourseID = TBS.CourseID"
          ]
        },
        {
          "interpretation": "List the courses, their descriptions, and the required textbooks and software.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, C.Description, T.TextbookTitle, T.SoftwareName \nFROM Courses C \nLEFT JOIN Textbooks_and_Software T ON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "List the courses and their required textbooks and software, including the name of the teacher and the description of the course.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.TextbookTitle, T.SoftwareName, TCS.Description, TE.FirstName, TE.LastName\nFROM Courses C\nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID\nJOIN Teachers TE ON C.TeacherID = TE.TeacherID\nJOIN (\n    SELECT CourseID, Description FROM Courses\n) AS TCS ON C.CourseID = TCS.CourseID"
          ]
        },
        {
          "interpretation": "List the courses and their required textbooks and software, including the name of the teacher, the description of the course, the subject taught by the teacher, the date when the course was last taught, and the average grade given in the course.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, C.Description, T.FirstName, T.LastName, T.SubjectTaught, MAX(E.Date) AS LastTaughtDate, AVG(EN.Grade) AS AverageGrade, TXT.TextbookTitle, TXT.SoftwareName\nFROM Courses C\nJOIN Teachers T ON C.TeacherID = T.TeacherID\nJOIN Exams E ON C.CourseID = E.CourseID\nJOIN Enrollments EN ON C.CourseID = EN.CourseID\nLEFT JOIN Textbooks_and_Software TXT ON C.CourseID = TXT.CourseID\nGROUP BY C.Title, C.Description, T.FirstName, T.LastName, T.SubjectTaught, TXT.TextbookTitle, TXT.SoftwareName"
          ]
        },
        {
          "interpretation": "List the courses and the teachers responsible for each course along with the required textbooks and software.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.Title, Teachers.FirstName, Teachers.LastName, Textbooks_and_Software.TextbookTitle, Textbooks_and_Software.SoftwareName\nFROM Courses\nJOIN Teachers ON Courses.TeacherID = Teachers.TeacherID\nJOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "What is the country of origin of the oldest immigrant?",
      "gold_queries": [
        "SELECT  country_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id ORDER BY age ASC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "What country do women immigrants come from?",
      "gold_queries": [
        "SELECT  country_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id WHERE gender  = 'F'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What country do female immigrants come from?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Countries.country_name \nFROM Immigrants \nJOIN Countries ON Immigrants.country_of_origin = Countries.id \nWHERE Immigrants.gender = 'F'"
          ]
        },
        {
          "interpretation": "Which regions of the world do female immigrants come from?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT R.region_name\nFROM Immigrants I\nJOIN Regions R ON I.region_of_origin = R.region_id\nWHERE I.gender = 'F'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Show me courses and resources for them.",
      "gold_queries": [
        "Select title, TextbookTitle from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;",
        "Select title, SoftwareName from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;",
        "Select title, TextbookTitle, SoftwareName from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the titles of courses and the quantity and price of textbooks and software for those courses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.Quantity, T.Price \nFROM Courses C \nJOIN Textbooks_and_Software T \nON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "Show me the titles of courses and the details of exams for those courses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, E.ExamID, E.Date, E.TotalMarks, E.PassMark \nFROM Courses C \nJOIN Exams E ON C.CourseID = E.CourseID"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Which textbook and software are the least expensive?",
      "gold_queries": [
        "select TextbookTitle, SoftwareName from textbooks_and_software order by price asc limit 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Are there multiple textbooks and/or software items that are the least expensive?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName FROM Textbooks_and_Software WHERE Price = (SELECT MIN(Price) FROM Textbooks_and_Software)"
          ]
        },
        {
          "interpretation": "Is the question asking for the least expensive item based on the given data or all possible items?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName, Price FROM Textbooks_and_Software WHERE Price = (SELECT MIN(Price) FROM Textbooks_and_Software)"
          ]
        },
        {
          "interpretation": "Which software has the lowest price?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SoftwareName FROM Textbooks_and_Software WHERE Price = (SELECT MIN(Price) FROM Textbooks_and_Software)"
          ]
        },
        {
          "interpretation": "Are there any textbooks or software without a price, and if so, how does that affect the least expensive item?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName, Price \nFROM Textbooks_and_Software \nWHERE Price IS NULL",
            "SELECT MIN(Price) \nFROM Textbooks_and_Software \nWHERE Price IS NOT NULL"
          ]
        },
        {
          "interpretation": "Are there any textbooks or software without a price, and if so, how does that affect the least expensive item?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName, Price \nFROM Textbooks_and_Software \nWHERE Price IS NULL",
            "SELECT MIN(Price) \nFROM Textbooks_and_Software \nWHERE Price IS NOT NULL"
          ]
        },
        {
          "interpretation": "Does the question assume that all items have a price listed in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName, Price FROM Textbooks_and_Software"
          ]
        },
        {
          "interpretation": "Which textbook has the lowest price?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle FROM Textbooks_and_Software ORDER BY Price ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "Is the question asking for the least expensive item based on a subset of data or the entire dataset?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ItemID, TextbookTitle, SoftwareName, Price \nFROM Textbooks_and_Software \nORDER BY Price ASC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "f1_score": 0.2222222222222222,
        "num_queries": 10,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "In what month were the computers purchased?",
      "gold_queries": [
        "SELECT Materials.Month FROM Materials WHERE Materials.ResourceType =  'Computers'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "In what exact month of the year 2021 were the Computers purchased?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Month FROM Materials WHERE Year = 2021 AND ResourceType = 'Computers'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "Show me the resource type and supplier for all expenses by month and year",
      "gold_queries": [
        "SELECT Expenses.Supplier, Materials.Month, Year FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the resource type and supplier for expenses organized by fiscal year and month",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Materials.ResourceType, Expenses.Supplier, Materials.Year AS FiscalYear, Materials.Month \nFROM Expenses \nJOIN Materials ON Expenses.MaterialID = Materials.MaterialID \nORDER BY Materials.Year, Materials.Month"
          ]
        },
        {
          "interpretation": "Show me the resource type and supplier for expenses categorized by semester and year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier, \n       CASE \n           WHEN M.Month BETWEEN 1 AND 6 THEN 'Semester 1'\n           ELSE 'Semester 2'\n       END AS Semester, \n       M.Year\nFROM Expenses E\nJOIN Materials M ON E.MaterialID = M.MaterialID\nORDER BY M.Year, Semester"
          ]
        },
        {
          "interpretation": "Show me the resource type and supplier for expenses segmented by financial quarter and year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    M.ResourceType, \n    E.Supplier, \n    CASE \n        WHEN M.Month BETWEEN 1 AND 3 THEN 'Q1'\n        WHEN M.Month BETWEEN 4 AND 6 THEN 'Q2'\n        WHEN M.Month BETWEEN 7 AND 9 THEN 'Q3'\n        ELSE 'Q4'\n    END AS Quarter,\n    M.Year\nFROM \n    Expenses E\nJOIN \n    Materials M ON E.MaterialID = M.MaterialID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "When were the computers purchased?",
      "gold_queries": [
        "SELECT Materials.Month FROM Materials WHERE Materials.ResourceType =  'Computers'",
        "SELECT Materials.Year FROM Materials WHERE Materials.ResourceType =  'Computers'",
        "SELECT Materials.Month, Year FROM Materials WHERE Materials.ResourceType =  'Computers'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "On which specific date in March 2021 were the computers purchased",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT M.Month, M.Year, E.Supplier\nFROM Materials M\nJOIN Expenses E ON M.MaterialID = E.MaterialID\nWHERE M.ResourceType = 'Computers' AND M.Month = 3 AND M.Year = 2021"
          ]
        },
        {
          "interpretation": "Exactly when the computers were purchased in 2021",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Supplier, E.Amount, M.Month, M.Year\nFROM Expenses E\nJOIN Materials M ON E.MaterialID = M.MaterialID\nWHERE M.ResourceType = 'Computers' AND M.Year = 2021"
          ]
        },
        {
          "interpretation": "The exact date when the computers were recorded as purchased in the database",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Year, Month FROM Materials WHERE ResourceType = 'Computers'"
          ]
        },
        {
          "interpretation": "2021-03-01 during the third month of 2021",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier, E.Amount\nFROM Expenses E\nJOIN Materials M ON E.MaterialID = M.MaterialID\nWHERE M.Year = 2021 AND M.Month = 3"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "Show me the resource type and supplier for all expenses by month",
      "gold_queries": [
        "SELECT Expenses.Supplier, Materials.Month FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the total resource type and supplier for expenses by month",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    M.Month,\n    E.Supplier,\n    M.ResourceType,\n    SUM(E.Amount) AS TotalAmount\nFROM \n    Expenses E\nJOIN \n    Materials M ON E.MaterialID = M.MaterialID\nGROUP BY \n    M.Month, E.Supplier, M.ResourceType"
          ]
        },
        {
          "interpretation": "Show me the resource type and supplier for each expense",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Materials.ResourceType, Expenses.Supplier, Materials.Month AS ExpenseMonth, Materials.Year AS ExpenseYear\nFROM Expenses\nJOIN Materials ON Expenses.MaterialID = Materials.MaterialID"
          ]
        },
        {
          "interpretation": "Show me the minimum and maximum amount spent on each resource type from different suppliers by month",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.Month, m.ResourceType, e.Supplier, MIN(e.Amount) AS MinAmount, MAX(e.Amount) AS MaxAmount\nFROM Expenses e\nJOIN Materials m ON e.MaterialID = m.MaterialID\nGROUP BY m.Month, m.ResourceType, e.Supplier"
          ]
        },
        {
          "interpretation": "Show me the count of distinct resource types and suppliers for expenses by month",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Month, COUNT(DISTINCT ResourceType), COUNT(DISTINCT Supplier) \nFROM Expenses \nJOIN Materials ON Expenses.MaterialID = Materials.MaterialID \nGROUP BY Month"
          ]
        },
        {
          "interpretation": "Show me the resource type and supplier for expenses grouped by month",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier, M.Month\nFROM Materials M\nJOIN Expenses E ON M.MaterialID = E.MaterialID\nGROUP BY M.ResourceType, E.Supplier, M.Month"
          ]
        },
        {
          "interpretation": "Show me the distinct resource type and supplier for expenses by month",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ResourceType, Supplier\nFROM Materials\nJOIN Expenses ON Materials.MaterialID = Expenses.MaterialID\nGROUP BY Materials.Month"
          ]
        },
        {
          "interpretation": "Show me the resource type, supplier, and the count of expenses for each by month",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Materials.ResourceType, \n    Expenses.Supplier, \n    COUNT(Expenses.ExpenseID) AS ExpenseCount, \n    Materials.Month\nFROM \n    Expenses\nJOIN \n    Materials ON Expenses.MaterialID = Materials.MaterialID\nGROUP BY \n    Materials.ResourceType, \n    Expenses.Supplier, \n    Materials.Month"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "In what month and year were the computers purchased?",
      "gold_queries": [
        "SELECT Materials.Month, Year FROM Materials WHERE Materials.ResourceType =  'Computers'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which month and year were the computer-related expenses recorded for?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT M.Month, M.Year \nFROM Materials M \nJOIN Expenses E ON M.MaterialID = E.MaterialID \nWHERE M.ResourceType = 'Computers'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "Show me the resource type and supplier for all expenses by year",
      "gold_queries": [
        "SELECT Expenses.Supplier, Materials.Year FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show resource types and suppliers for expenses grouped per calendar year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier, strftime('%Y', E.ExpenseID) AS CalendarYear\nFROM Expenses E\nJOIN Materials M ON E.MaterialID = M.MaterialID\nGROUP BY M.ResourceType, E.Supplier, CalendarYear"
          ]
        },
        {
          "interpretation": "Provide resource types and suppliers for expenses by yearly grouping",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ResourceType, Supplier, SUM(Amount) as TotalExpenses\nFROM Expenses\nJOIN Materials ON Expenses.MaterialID = Materials.MaterialID\nGROUP BY Year, Month, ResourceType, Supplier"
          ]
        },
        {
          "interpretation": "Display the resource type and supplier for expenses that are annual",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier\nFROM Expenses E\nJOIN Materials M ON E.MaterialID = M.MaterialID\nWHERE M.Year = 2021"
          ]
        },
        {
          "interpretation": "Show resource types and suppliers for yearly expense records",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Materials.ResourceType, Expenses.Supplier, Materials.Year\nFROM Materials\nJOIN Expenses ON Materials.MaterialID = Expenses.MaterialID"
          ]
        },
        {
          "interpretation": "Display the resource type and supplier for expenses divided by financial years",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    ResourceType, \n    Supplier, \n    SUM(Amount) AS TotalAmount, \n    Materials.Year AS FinancialYear\nFROM \n    Expenses\nJOIN \n    Materials ON Expenses.MaterialID = Materials.MaterialID\nGROUP BY \n    ResourceType, \n    Supplier, \n    Materials.Year"
          ]
        },
        {
          "interpretation": "Provide the resource type and supplier for expenses yearly segmented",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.ResourceType, e.Supplier, m.Month, m.Year\nFROM Expenses e\nJOIN Materials m ON e.MaterialID = m.MaterialID"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "In what year were the computers purchased?",
      "gold_queries": [
        "SELECT Materials.Year FROM Materials WHERE Materials.ResourceType =  'Computers'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "Who provided all the materials and when?",
      "gold_queries": [
        "SELECT Expenses.Supplier, Materials.Month FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID",
        "SELECT Expenses.Supplier, Materials.Year FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID",
        "SELECT Expenses.Supplier, Materials.Month, Year FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "All suppliers of materials and their respective supply dates and quantities?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Expenses.Supplier, Expenses.Amount, Materials.Month, Materials.Quantity\nFROM Expenses\nJOIN Materials ON Expenses.MaterialID = Materials.MaterialID"
          ]
        },
        {
          "interpretation": "The suppliers of every material category and their supply timeline?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Materials.ResourceType, Expenses.Supplier, Expenses.Amount, Materials.Month, Materials.Year\nFROM Expenses\nJOIN Materials ON Expenses.MaterialID = Materials.MaterialID\nORDER BY Materials.ResourceType, Materials.Month, Materials.Year"
          ]
        },
        {
          "interpretation": "Who are the suppliers for each material type and when were these supplies made?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier, M.Month, M.Year\nFROM Materials M\nJOIN Expenses E ON M.MaterialID = E.MaterialID"
          ]
        },
        {
          "interpretation": "Who supplied all the materials and in which months and years?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Supplier, Month, Year FROM Expenses JOIN Materials ON Expenses.MaterialID = Materials.MaterialID"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    }
  ],
  "metrics": {
    "ambig": {
      "attachment": {
        "recall": 0.3484848484848485,
        "precision": 0.16304823123004938,
        "f1_score": 0.209233695597332,
        "all_found": 0.06060606060606061
      },
      "scope": {
        "recall": 0.5294117647058824,
        "precision": 0.29332399626517275,
        "f1_score": 0.3495447139045755,
        "all_found": 0.19607843137254902
      },
      "vague": {
        "recall": 0.4184397163120566,
        "precision": 0.3021968279947003,
        "f1_score": 0.32725630721151444,
        "all_found": 0.14893617021276595
      },
      "total": {
        "recall": 0.44402035623409664,
        "precision": 0.2636898195104302,
        "f1_score": 0.30620258628081276,
        "all_found": 0.1450381679389313
      }
    },
    "unambig": {
      "attachment": {
        "recall": 0.45454545454545453,
        "precision": 0.11908970658970659,
        "f1_score": 0.1789212471030653,
        "all_found": 0.45454545454545453
      },
      "scope": {
        "recall": 0.8333333333333334,
        "precision": 0.35398381574852167,
        "f1_score": 0.4621388959624253,
        "all_found": 0.8333333333333334
      },
      "vague": {
        "recall": 0.7375886524822695,
        "precision": 0.4056536253344764,
        "f1_score": 0.48508949679162444,
        "all_found": 0.7375886524822695
      },
      "total": {
        "recall": 0.7087378640776699,
        "precision": 0.32738974438003565,
        "f1_score": 0.4121184101766625,
        "all_found": 0.7087378640776699
      }
    }
  },
  "statistics": {
    "total_examples": 440,
    "avg_interpretations": 3.713636363636364,
    "avg_unique_execution_results": 3.713636363636364,
    "avg_matched_gold_sql": 0.8090909090909091
  },
  "args": {
    "interpretations_file": "outputs/initial_interpretations/interpretations_qwen2.5-7b-instruct_seed42_ambrosia_test_tgi.json",
    "output_dir": "outputs/sql_generation",
    "exp_name": "default",
    "model_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "dtype": "auto",
    "load_in_4bit": false,
    "max_seq_length": 8192,
    "chat_template": null,
    "overwrite": false,
    "seed": 42,
    "backend": "tgi",
    "tgi_url": "http://0.0.0.0/v1",
    "dataset_type": "ambrosia",
    "split": "test",
    "no_database": false,
    "filter_gold": false,
    "filter_interpr": false,
    "filtered": true
  }
}